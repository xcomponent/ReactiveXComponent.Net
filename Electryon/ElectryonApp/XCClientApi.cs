 
//Autogenerated File


using System;
using XCClientLib.Builder;
using XCClientLib.Common;
using XCClientLib.RabbitMQ;

namespace XCClientLib
{
	public class XClientSender : IDisposable
	{
		private IXComponentApi iApi;
		private string deploymentFile;

		public CheckOrder_Component CheckOrder_Component { get; protected set; }
		public ExchangeManager_Component ExchangeManager_Component { get; protected set; }
		public FeedSource_Component FeedSource_Component { get; protected set; }
		public OrderDbAccessor_Component OrderDbAccessor_Component { get; protected set; }
		public OrderManagementSystem_Component OrderManagementSystem_Component { get; protected set; }
		public Pricer_Component Pricer_Component { get; protected set; }
		public Referential_Component Referential_Component { get; protected set; }
		public ReferentialFeedSource_Component ReferentialFeedSource_Component { get; protected set; }
		public ReportsManager_Component ReportsManager_Component { get; protected set; }
		public Research_Component Research_Component { get; protected set; }
		public UserManagement_Component UserManagement_Component { get; protected set; }
		public XcAppMetricsPublisher_Component XcAppMetricsPublisher_Component { get; protected set; }
		
		public XClientSender(string deploymentFile)
		{
			this.deploymentFile = deploymentFile;
			CheckOrder_Component =  new CheckOrder_Component();
			ExchangeManager_Component =  new ExchangeManager_Component();
			FeedSource_Component =  new FeedSource_Component();
			OrderDbAccessor_Component =  new OrderDbAccessor_Component();
			OrderManagementSystem_Component =  new OrderManagementSystem_Component();
			Pricer_Component =  new Pricer_Component();
			Referential_Component =  new Referential_Component();
			ReferentialFeedSource_Component =  new ReferentialFeedSource_Component();
			ReportsManager_Component =  new ReportsManager_Component();
			Research_Component =  new Research_Component();
			UserManagement_Component =  new UserManagement_Component();
			XcAppMetricsPublisher_Component =  new XcAppMetricsPublisher_Component();
	
		}		
		
		public void Init()
		{
			XComponentBuilder xcBuilder = new XComponentBuilder(this.deploymentFile);
			iApi = xcBuilder.CreateApi();
			iApi.AddCallback("CheckOrder","CheckComponent",CheckOrder_Component.CheckComponent_StateMachine.OnCheckComponentNodeCheckComponentInstanceUpdated);
			iApi.AddCallback("ExchangeManager","ExchangeManager",ExchangeManager_Component.ExchangeManager_StateMachine.OnExchangeManagerExchangeManagerInstanceUpdated);
			iApi.AddCallback("ExchangeManager","Exchange",ExchangeManager_Component.Exchange_StateMachine.OnExchangeInfoExchangeInstanceUpdated);
			iApi.AddCallback("ExchangeManager","ExchangeOpening",ExchangeManager_Component.ExchangeOpening_StateMachine.OnExchangeInfoExchangeOpeningInstanceUpdated);
			iApi.AddCallback("ExchangeManager","Error",ExchangeManager_Component.Error_StateMachine.OnErrorErrorInstanceUpdated);
			iApi.AddCallback("ExchangeManager","ExchangeError",ExchangeManager_Component.ExchangeError_StateMachine.OnExchangeErrorExchangeErrorInstanceUpdated);
			iApi.AddCallback("ExchangeManager","ExchangeLoading",ExchangeManager_Component.ExchangeLoading_StateMachine.OnExchangeInfoExchangeLoadingInstanceUpdated);
			iApi.AddCallback("ExchangeManager","TimeZone",ExchangeManager_Component.TimeZone_StateMachine.OnTimeZoneDefinitionTimeZoneInstanceUpdated);
			iApi.AddCallback("ExchangeManager","ExchangeDisabling",ExchangeManager_Component.ExchangeDisabling_StateMachine.OnExchangeInfoExchangeDisablingInstanceUpdated);
			iApi.AddCallback("ExchangeManager","ExchangeMidnight",ExchangeManager_Component.ExchangeMidnight_StateMachine.OnExchangeInfoExchangeMidnightInstanceUpdated);
			iApi.AddCallback("FeedSource","FeedManager",FeedSource_Component.FeedManager_StateMachine.OnFeedManagerFeedManagerInstanceUpdated);
			iApi.AddCallback("FeedSource","Gateway",FeedSource_Component.Gateway_StateMachine.OnGatewayGatewayInstanceUpdated);
			iApi.AddCallback("FeedSource","Feed",FeedSource_Component.Feed_StateMachine.OnFeedFeedInstanceUpdated);
			iApi.AddCallback("FeedSource","DataSubscription",FeedSource_Component.DataSubscription_StateMachine.OnDataSubscriptionDataSubscriptionInstanceUpdated);
			iApi.AddCallback("FeedSource","FeedSnapshot",FeedSource_Component.FeedSnapshot_StateMachine.OnFeedSnapshotFeedSnapshotInstanceUpdated);
			iApi.AddCallback("FeedSource","DataSubscriptionDenial",FeedSource_Component.DataSubscriptionDenial_StateMachine.OnDataSubscriptionDenialDataSubscriptionDenialInstanceUpdated);
			iApi.AddCallback("OrderDbAccessor","OrderSnapshot",OrderDbAccessor_Component.OrderSnapshot_StateMachine.OnOrderSnapshotResultOrderSnapshotInstanceUpdated);
			iApi.AddCallback("OrderDbAccessor","TradeSnapshot",OrderDbAccessor_Component.TradeSnapshot_StateMachine.OnTradeSnapshotResultTradeSnapshotInstanceUpdated);
			iApi.AddCallback("OrderDbAccessor","NewTradeAvailable",OrderDbAccessor_Component.NewTradeAvailable_StateMachine.OnTradeNewTradeAvailableInstanceUpdated);
			iApi.AddCallback("OrderDbAccessor","OrdersTradesSnapshot",OrderDbAccessor_Component.OrdersTradesSnapshot_StateMachine.OnOrdersTradesSnapshotResultOrdersTradesSnapshotInstanceUpdated);
			iApi.AddCallback("OrderManagementSystem","OrderManagementSystem",OrderManagementSystem_Component.OrderManagementSystem_StateMachine.OnOrderManagementSystemOrderManagementSystemInstanceUpdated);
			iApi.AddCallback("OrderManagementSystem","Trade",OrderManagementSystem_Component.Trade_StateMachine.OnTradeTradeInstanceUpdated);
			iApi.AddCallback("OrderManagementSystem","Order",OrderManagementSystem_Component.Order_StateMachine.OnXCOrderOrderInstanceUpdated);
			iApi.AddCallback("OrderManagementSystem","ExchangeMidnightListener",OrderManagementSystem_Component.ExchangeMidnightListener_StateMachine.OnExchangeMidnightListenerExchangeMidnightListenerInstanceUpdated);
			iApi.AddCallback("Pricer","Calculation",Pricer_Component.Calculation_StateMachine.OnCalculationCalculationInstanceUpdated);
			iApi.AddCallback("Pricer","DetailedCalculation",Pricer_Component.DetailedCalculation_StateMachine.OnDetailedCalculationDetailedCalculationInstanceUpdated);
			iApi.AddCallback("Referential","Referential",Referential_Component.Referential_StateMachine.OnReferentialReferentialInstanceUpdated);
			iApi.AddCallback("Referential","FinancialInstrument",Referential_Component.FinancialInstrument_StateMachine.OnFinancialInstrumentFinancialInstrumentInstanceUpdated);
			iApi.AddCallback("Referential","InstrumentRequest",Referential_Component.InstrumentRequest_StateMachine.OnInstrumentRequestInstrumentRequestInstanceUpdated);
			iApi.AddCallback("Referential","CustomInstrumentRequest",Referential_Component.CustomInstrumentRequest_StateMachine.OnCustomInstrumentRequestResultCustomInstrumentRequestInstanceUpdated);
			iApi.AddCallback("Referential","ExchangeReferentialImport",Referential_Component.ExchangeReferentialImport_StateMachine.OnExchangeReferentialImportExchangeReferentialImportInstanceUpdated);
			iApi.AddCallback("Referential","ExchangeImportError",Referential_Component.ExchangeImportError_StateMachine.OnMinorErrorExchangeImportErrorInstanceUpdated);
			iApi.AddCallback("Referential","QuickSearch",Referential_Component.QuickSearch_StateMachine.OnQuickSearchQuickSearchInstanceUpdated);
			iApi.AddCallback("Referential","ImportManager",Referential_Component.ImportManager_StateMachine.OnImportManagerImportManagerInstanceUpdated);
			iApi.AddCallback("ReferentialFeedSource","ReferentialFeedManager",ReferentialFeedSource_Component.ReferentialFeedManager_StateMachine.OnReferentialFeedManagerReferentialFeedManagerInstanceUpdated);
			iApi.AddCallback("ReferentialFeedSource","HeartBeatRequest",ReferentialFeedSource_Component.HeartBeatRequest_StateMachine.OnHeartBeatHeartBeatRequestInstanceUpdated);
			iApi.AddCallback("ReferentialFeedSource","FeedSourceOrchestrator",ReferentialFeedSource_Component.FeedSourceOrchestrator_StateMachine.OnFeedSourceOrchestratorFeedSourceOrchestratorInstanceUpdated);
			iApi.AddCallback("ReferentialFeedSource","ReferentialFeed",ReferentialFeedSource_Component.ReferentialFeed_StateMachine.OnReferentialFeedReferentialFeedInstanceUpdated);
			iApi.AddCallback("ReferentialFeedSource","ShutDownTimer",ReferentialFeedSource_Component.ShutDownTimer_StateMachine.OnShutDownTimerShutDownTimerInstanceUpdated);
			iApi.AddCallback("Research","ResearchCache",Research_Component.ResearchCache_StateMachine.OnResearchCacheResearchCacheInstanceUpdated);
			iApi.AddCallback("Research","ResearchEntity",Research_Component.ResearchEntity_StateMachine.OnResearchEntityResearchEntityInstanceUpdated);
			iApi.AddCallback("Research","ResearchDocument",Research_Component.ResearchDocument_StateMachine.OnResearchDocumentResponseResearchDocumentInstanceUpdated);
			iApi.AddCallback("Research","CacheUpdater",Research_Component.CacheUpdater_StateMachine.OnCacheUpdaterCacheUpdaterInstanceUpdated);
			iApi.AddCallback("Research","ResearchQuery",Research_Component.ResearchQuery_StateMachine.OnResearchQueryResultResearchQueryInstanceUpdated);
			iApi.AddCallback("Research","ResearchSuggestQuery",Research_Component.ResearchSuggestQuery_StateMachine.OnWordSuggestedResearchSuggestQueryInstanceUpdated);
			iApi.AddCallback("Research","ResearchSettings",Research_Component.ResearchSettings_StateMachine.OnResearchSettingsResearchSettingsInstanceUpdated);
			iApi.AddCallback("UserManagement","UserManagement",UserManagement_Component.UserManagement_StateMachine.OnUserManagementUserManagementInstanceUpdated);
			iApi.AddCallback("UserManagement","UserSession",UserManagement_Component.UserSession_StateMachine.OnUserSessionInfoUserSessionInstanceUpdated);
			iApi.AddCallback("UserManagement","GetRight",UserManagement_Component.GetRight_StateMachine.OnGetRightGetRightInstanceUpdated);
			iApi.AddCallback("UserManagement","CachedPermissionChecker",UserManagement_Component.CachedPermissionChecker_StateMachine.OnCachedPermissionCheckerCachedPermissionCheckerInstanceUpdated);
			iApi.AddCallback("UserManagement","ChangePassword",UserManagement_Component.ChangePassword_StateMachine.OnChangingPasswordChangePasswordInstanceUpdated);
			iApi.AddCallback("UserManagement","UserEntityInfo",UserManagement_Component.UserEntityInfo_StateMachine.OnUserEntityInfoUserEntityInfoInstanceUpdated);
			iApi.AddCallback("UserManagement","BackendInfo",UserManagement_Component.BackendInfo_StateMachine.OnBackendInfoBackendInfoInstanceUpdated);
		}
		
		public void InitTopic(string privateCommunicationIdentifier){
			XComponentApi.PrivateCommunicationIdentifier = privateCommunicationIdentifier;
		}

		public void Dispose() {
			iApi.Dispose();
		}	
		
		public void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","ExchangeManager", "ExchangeManager",102,"XComponent.ExchangeManager.UserObject.Error", obj, visibility);
		}
		
		public void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","ExchangeManager", "ExchangeManager",119,"XComponent.ExchangeManager.UserObject.Retry", obj, visibility);
		}
		
		public void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","FeedSource", "FeedManager",157,"XComponent.FeedSource.UserObject.Stop", obj, visibility);
		}
		
		public void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","FeedSource", "FeedManager",148,"XComponent.FeedSource.UserObject.RestoreSubscription", obj, visibility);
		}
		
		public void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","FeedSource", "FeedManager",168,"XComponent.FeedSource.UserObject.UnsubscriptionRequest", obj, visibility);
		}
		
		public void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","FeedSource", "FeedManager",161,"XComponent.FeedSource.UserObject.SubscriptionRequest", obj, visibility);
		}
		
		public void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","FeedSource", "FeedManager",129,"XComponent.FeedSource.UserObject.InitReport", obj, visibility);
		}
		
		public void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","FeedSource", "FeedManager",102,"XComponent.FeedSource.UserObject.ConnectionLost", obj, visibility);
		}
		
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","FeedSource", "FeedManager",317,"XComponent.UserManagement.UserObject.SessionId", obj, visibility);
		}
		
		public void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","FeedSource", "FeedManager",159,"XComponent.FeedSource.UserObject.SubscriptionPreprocessor", obj, visibility);
		}
		
		public void SendRetryFeedSource(XComponent.Referential.UserObject.Retry obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","FeedSource", "FeedManager",246,"XComponent.Referential.UserObject.Retry", obj, visibility);
		}
		
		public void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderDbAccessor", "OrderDbAccessor",111,"XComponent.OrderDbAccessor.UserObject.UpdateOperationFail", obj, visibility);
		}
		
		public void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderDbAccessor", "OrderDbAccessor",103,"XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult", obj, visibility);
		}
		
		public void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderDbAccessor", "OrderDbAccessor",101,"XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail", obj, visibility);
		}
		
		public void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderDbAccessor", "OrderDbAccessor",110,"XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult", obj, visibility);
		}
		
		public void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderDbAccessor", "OrderDbAccessor",108,"XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail", obj, visibility);
		}
		
		public void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderDbAccessor", "OrderDbAccessor",102,"XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest", obj, visibility);
		}
		
		public void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderDbAccessor", "OrderDbAccessor",109,"XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest", obj, visibility);
		}
		
		public void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderDbAccessor", "OrderDbAccessor",107,"XComponent.OrderDbAccessor.UserObject.TradeAvailable", obj, visibility);
		}
		
		public void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderDbAccessor", "OrderDbAccessor",97,"XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator", obj, visibility);
		}
		
		public void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderDbAccessor", "OrderDbAccessor",104,"XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest", obj, visibility);
		}
		
		public void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderDbAccessor", "OrderDbAccessor",105,"XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult", obj, visibility);
		}
		
		public void SendRestore(XComponent.OrderManagementSystem.UserObject.Restore obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",148,"XComponent.OrderManagementSystem.UserObject.Restore", obj, visibility);
		}
		
		public void SendModify(XComponent.OrderManagementSystem.UserObject.Modify obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",131,"XComponent.OrderManagementSystem.UserObject.Modify", obj, visibility);
		}
		
		public void SendCancelOrder(XComponent.OrderManagementSystem.UserObject.CancelOrder obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",101,"XComponent.OrderManagementSystem.UserObject.CancelOrder", obj, visibility);
		}
		
		public void SendSessionIdOrderManagementSystem(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",221,"XComponent.UserManagement.UserObject.SessionId", obj, visibility);
		}
		
		public void SendCancellationAcceptance(XComponent.OrderManagementSystem.UserObject.CancellationAcceptance obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",100,"XComponent.OrderManagementSystem.UserObject.CancellationAcceptance", obj, visibility);
		}
		
		public void SendCancelRequest(XComponent.OrderManagementSystem.UserObject.CancelRequest obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",102,"XComponent.OrderManagementSystem.UserObject.CancelRequest", obj, visibility);
		}
		
		public void SendPartialExecutionInput(XComponent.OrderManagementSystem.UserObject.PartialExecutionInput obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",140,"XComponent.OrderManagementSystem.UserObject.PartialExecutionInput", obj, visibility);
		}
		
		public void SendCancelAcked(XComponent.OrderManagementSystem.UserObject.CancelAcked obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",99,"XComponent.OrderManagementSystem.UserObject.CancelAcked", obj, visibility);
		}
		
		public void SendExecutionInput(XComponent.OrderManagementSystem.UserObject.ExecutionInput obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",117,"XComponent.OrderManagementSystem.UserObject.ExecutionInput", obj, visibility);
		}
		
		public void SendRejectCancel(XComponent.OrderManagementSystem.UserObject.RejectCancel obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",144,"XComponent.OrderManagementSystem.UserObject.RejectCancel", obj, visibility);
		}
		
		public void SendCreateTrade(XComponent.OrderManagementSystem.UserObject.CreateTrade obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",111,"XComponent.OrderManagementSystem.UserObject.CreateTrade", obj, visibility);
		}
		
		public void SendExpireOrders(XComponent.OrderManagementSystem.UserObject.ExpireOrders obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",119,"XComponent.OrderManagementSystem.UserObject.ExpireOrders", obj, visibility);
		}
		
		public void SendAcknowledgement(XComponent.OrderManagementSystem.UserObject.Acknowledgement obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",98,"XComponent.OrderManagementSystem.UserObject.Acknowledgement", obj, visibility);
		}
		
		public void SendRejectOrder(XComponent.OrderManagementSystem.UserObject.RejectOrder obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",147,"XComponent.OrderManagementSystem.UserObject.RejectOrder", obj, visibility);
		}
		
		public void SendRejectModification(XComponent.OrderManagementSystem.UserObject.RejectModification obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",146,"XComponent.OrderManagementSystem.UserObject.RejectModification", obj, visibility);
		}
		
		public void SendAcceptModification(XComponent.OrderManagementSystem.UserObject.AcceptModification obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",97,"XComponent.OrderManagementSystem.UserObject.AcceptModification", obj, visibility);
		}
		
		public void SendModifyAcked(XComponent.OrderManagementSystem.UserObject.ModifyAcked obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",132,"XComponent.OrderManagementSystem.UserObject.ModifyAcked", obj, visibility);
		}
		
		public void SendShutDown(XComponent.OrderManagementSystem.UserObject.ShutDown obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",151,"XComponent.OrderManagementSystem.UserObject.ShutDown", obj, visibility);
		}
		
		public void SendCreateExchangeListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeListener obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",108,"XComponent.OrderManagementSystem.UserObject.CreateExchangeListener", obj, visibility);
		}
		
		public void SendCreateExchangeMidnightListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeMidnightListener obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",109,"XComponent.OrderManagementSystem.UserObject.CreateExchangeMidnightListener", obj, visibility);
		}
		
		public void SendDisconnected(XComponent.OrderManagementSystem.UserObject.Disconnected obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","OrderManagementSystem", "OrderManagementSystem",113,"XComponent.OrderManagementSystem.UserObject.Disconnected", obj, visibility);
		}
		
		public void SendRequestCalculation(XComponent.Pricer.UserObject.RequestCalculation obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Pricer", "Pricer",102,"XComponent.Pricer.UserObject.RequestCalculation", obj, visibility);
		}
		
		public void SendRequestDetailedCalculation(XComponent.Pricer.UserObject.RequestDetailedCalculation obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Pricer", "Pricer",103,"XComponent.Pricer.UserObject.RequestDetailedCalculation", obj, visibility);
		}
		
		public void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",269,"XComponent.Referential.UserObject.Referential", obj, visibility);
		}
		
		public void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",241,"XComponent.Referential.UserObject.GetFromType", obj, visibility);
		}
		
		public void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",239,"XComponent.Referential.UserObject.GetFromId", obj, visibility);
		}
		
		public void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",280,"XComponent.Referential.UserObject.Update", obj, visibility);
		}
		
		public void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",240,"XComponent.Referential.UserObject.GetFromIsin", obj, visibility);
		}
		
		public void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",321,"XComponent.UserManagement.UserObject.GetRight", obj, visibility);
		}
		
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",365,"XComponent.UserManagement.UserObject.RightRequest", obj, visibility);
		}
		
		public void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",261,"XComponent.Referential.UserObject.IsValid", obj, visibility);
		}
		
		public void SendErrorReferential(XComponent.Referential.UserObject.Error obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",216,"XComponent.Referential.UserObject.Error", obj, visibility);
		}
		
		public void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",212,"XComponent.Referential.UserObject.Done", obj, visibility);
		}
		
		public void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",214,"XComponent.Referential.UserObject.Down", obj, visibility);
		}
		
		public void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",242,"XComponent.Referential.UserObject.HeartBeat", obj, visibility);
		}
		
		public void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",209,"XComponent.Referential.UserObject.CustomInstrumentRequest", obj, visibility);
		}
		
		public void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",205,"XComponent.Referential.UserObject.CreateInstrument", obj, visibility);
		}
		
		public void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",267,"XComponent.Referential.UserObject.MultiFieldsQuery", obj, visibility);
		}
		
		public void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",213,"XComponent.Referential.UserObject.DoQuickSearch", obj, visibility);
		}
		
		public void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",248,"XComponent.Referential.UserObject.ImportReferentialFromCsv", obj, visibility);
		}
		
		public void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",244,"XComponent.Referential.UserObject.Import", obj, visibility);
		}
		
		public void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",238,"XComponent.Referential.UserObject.GetAllInstruments", obj, visibility);
		}
		
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",291,"XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor", obj, visibility);
		}
		
		public void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",255,"XComponent.Referential.UserObject.InstrumentLoaded", obj, visibility);
		}
		
		public void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",290,"XComponent.ReferentialFeedSource.UserObject.ReferentialFeed", obj, visibility);
		}
		
		public void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",264,"XComponent.Referential.UserObject.MinorError", obj, visibility);
		}
		
		public void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",285,"XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator", obj, visibility);
		}
		
		public void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",295,"XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed", obj, visibility);
		}
		
		public void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",289,"XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed", obj, visibility);
		}
		
		public void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",256,"XComponent.Referential.UserObject.InstrumentModified", obj, visibility);
		}
		
		public void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",265,"XComponent.Referential.UserObject.ModificationsCompleted", obj, visibility);
		}
		
		public void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Referential", "Referential",266,"XComponent.Referential.UserObject.ModificationsPartiallyCompleted", obj, visibility);
		}
		
		public void SendReferentialFeedDescriptorReferentialFeedSource(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","ReferentialFeedSource", "ReferentialFeedManager",182,"XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor", obj, visibility);
		}
		
		public void SendFindResearch(XComponent.Research.UserObject.FindResearch obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Research", "ResearchCache",177,"XComponent.Research.UserObject.FindResearch", obj, visibility);
		}
		
		public void SendGetResearchEntity(XComponent.Research.UserObject.GetResearchEntity obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Research", "ResearchCache",180,"XComponent.Research.UserObject.GetResearchEntity", obj, visibility);
		}
		
		public void SendInitFailed(XComponent.Research.UserObject.InitFailed obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Research", "ResearchCache",181,"XComponent.Research.UserObject.InitFailed", obj, visibility);
		}
		
		public void SendGetResearchDocument(XComponent.Research.UserObject.GetResearchDocument obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Research", "ResearchCache",179,"XComponent.Research.UserObject.GetResearchDocument", obj, visibility);
		}
		
		public void SendSuggestQuery(XComponent.Research.UserObject.SuggestQuery obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Research", "ResearchCache",193,"XComponent.Research.UserObject.SuggestQuery", obj, visibility);
		}
		
		public void SendGetLatestResearch(XComponent.Research.UserObject.GetLatestResearch obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Research", "ResearchCache",178,"XComponent.Research.UserObject.GetLatestResearch", obj, visibility);
		}
		
		public void SendInitOk(XComponent.Research.UserObject.InitOk obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Research", "ResearchCache",182,"XComponent.Research.UserObject.InitOk", obj, visibility);
		}
		
		public void SendRebuildIndex(XComponent.Research.UserObject.RebuildIndex obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Research", "ResearchCache",186,"XComponent.Research.UserObject.RebuildIndex", obj, visibility);
		}
		
		public void SendUpdateResearch(XComponent.Research.UserObject.Update obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","Research", "ResearchCache",194,"XComponent.Research.UserObject.Update", obj, visibility);
		}
		
		public void SendErrorUserManagement(XComponent.UserManagement.UserObject.Error obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","UserManagement", "UserManagement",112,"XComponent.UserManagement.UserObject.Error", obj, visibility);
		}
		
		public void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","UserManagement", "UserManagement",153,"XComponent.UserManagement.UserObject.OpenSession", obj, visibility);
		}
		
		public void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","UserManagement", "UserManagement",156,"XComponent.UserManagement.UserObject.Ping", obj, visibility);
		}
		
		public void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","UserManagement", "UserManagement",110,"XComponent.UserManagement.UserObject.DoManagingAction", obj, visibility);
		}
		
		public void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","UserManagement", "UserManagement",103,"XComponent.UserManagement.UserObject.ChangingPassword", obj, visibility);
		}
		
		public void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","UserManagement", "UserManagement",106,"XComponent.UserManagement.UserObject.CloseSession", obj, visibility);
		}
		
		public void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","UserManagement", "UserManagement",115,"XComponent.UserManagement.UserObject.GetPermissionsSnapshot", obj, visibility);
		}
		
		public void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","UserManagement", "UserManagement",108,"XComponent.UserManagement.UserObject.CustomRightRequest", obj, visibility);
		}
		
		public void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","UserManagement", "UserManagement",102,"XComponent.UserManagement.UserObject.ChangePassword", obj, visibility);
		}
		
		public void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","UserManagement", "UserManagement",105,"XComponent.UserManagement.UserObject.ClientSessionHeartBeat", obj, visibility);
		}
		
		public void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","UserManagement", "UserManagement",128,"XComponent.UserManagement.UserObject.InnerCloseSession", obj, visibility);
		}
		
		public void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","UserManagement", "UserManagement",167,"XComponent.UserManagement.UserObject.SessionUpdated", obj, visibility);
		}
		
		public void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","UserManagement", "UserManagement",125,"XComponent.UserManagement.UserObject.GetUserRightHistory", obj, visibility);
		}
		
		public void SendRightRequestUserManagement(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","UserManagement", "UserManagement",160,"XComponent.UserManagement.UserObject.RightRequest", obj, visibility);
		}
		
		public void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","UserManagement", "UserManagement",121,"XComponent.UserManagement.UserObject.GetSessionRequest", obj, visibility);
		}
		
		public void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","UserManagement", "UserManagement",124,"XComponent.UserManagement.UserObject.GetUserEntity", obj, visibility);
		}
		
		public void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","UserManagement", "UserManagement",122,"XComponent.UserManagement.UserObject.GetSessionRequestByDbId", obj, visibility);
		}
		
		public void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","UserManagement", "UserManagement",114,"XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot", obj, visibility);
		}
		
		public void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","UserManagement", "UserManagement",99,"XComponent.UserManagement.UserObject.BackendInfo", obj, visibility);
		}
		
		public void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility)
		{
			iApi.SendEvent("engine1","UserManagement", "UserManagement",113,"XComponent.UserManagement.UserObject.GetBackendInfo", obj, visibility);
		}
	}
	
	public interface ICheckOrder_Component 
	{
		CheckComponent_StateMachine CheckComponent_StateMachine { get; set; }
	}
	
	public interface IExchangeManager_Component 
	{
		ExchangeManager_StateMachine ExchangeManager_StateMachine { get; set; }
		Exchange_StateMachine Exchange_StateMachine { get; set; }
		ExchangeOpening_StateMachine ExchangeOpening_StateMachine { get; set; }
		Error_StateMachine Error_StateMachine { get; set; }
		ExchangeError_StateMachine ExchangeError_StateMachine { get; set; }
		ExchangeLoading_StateMachine ExchangeLoading_StateMachine { get; set; }
		TimeZone_StateMachine TimeZone_StateMachine { get; set; }
		ExchangeDisabling_StateMachine ExchangeDisabling_StateMachine { get; set; }
		ExchangeMidnight_StateMachine ExchangeMidnight_StateMachine { get; set; }
	}
	
	public interface IFeedSource_Component 
	{
		FeedManager_StateMachine FeedManager_StateMachine { get; set; }
		Gateway_StateMachine Gateway_StateMachine { get; set; }
		Feed_StateMachine Feed_StateMachine { get; set; }
		DataSubscription_StateMachine DataSubscription_StateMachine { get; set; }
		FeedSnapshot_StateMachine FeedSnapshot_StateMachine { get; set; }
		DataSubscriptionDenial_StateMachine DataSubscriptionDenial_StateMachine { get; set; }
	}
	
	public interface IOrderDbAccessor_Component 
	{
		OrderSnapshot_StateMachine OrderSnapshot_StateMachine { get; set; }
		TradeSnapshot_StateMachine TradeSnapshot_StateMachine { get; set; }
		NewTradeAvailable_StateMachine NewTradeAvailable_StateMachine { get; set; }
		OrdersTradesSnapshot_StateMachine OrdersTradesSnapshot_StateMachine { get; set; }
	}
	
	public interface IOrderManagementSystem_Component 
	{
		OrderManagementSystem_StateMachine OrderManagementSystem_StateMachine { get; set; }
		Trade_StateMachine Trade_StateMachine { get; set; }
		Order_StateMachine Order_StateMachine { get; set; }
		ExchangeMidnightListener_StateMachine ExchangeMidnightListener_StateMachine { get; set; }
	}
	
	public interface IPricer_Component 
	{
		Calculation_StateMachine Calculation_StateMachine { get; set; }
		DetailedCalculation_StateMachine DetailedCalculation_StateMachine { get; set; }
	}
	
	public interface IReferential_Component 
	{
		Referential_StateMachine Referential_StateMachine { get; set; }
		FinancialInstrument_StateMachine FinancialInstrument_StateMachine { get; set; }
		InstrumentRequest_StateMachine InstrumentRequest_StateMachine { get; set; }
		CustomInstrumentRequest_StateMachine CustomInstrumentRequest_StateMachine { get; set; }
		ExchangeReferentialImport_StateMachine ExchangeReferentialImport_StateMachine { get; set; }
		ExchangeImportError_StateMachine ExchangeImportError_StateMachine { get; set; }
		QuickSearch_StateMachine QuickSearch_StateMachine { get; set; }
		ImportManager_StateMachine ImportManager_StateMachine { get; set; }
	}
	
	public interface IReferentialFeedSource_Component 
	{
		ReferentialFeedManager_StateMachine ReferentialFeedManager_StateMachine { get; set; }
		HeartBeatRequest_StateMachine HeartBeatRequest_StateMachine { get; set; }
		FeedSourceOrchestrator_StateMachine FeedSourceOrchestrator_StateMachine { get; set; }
		ReferentialFeed_StateMachine ReferentialFeed_StateMachine { get; set; }
		ShutDownTimer_StateMachine ShutDownTimer_StateMachine { get; set; }
	}
	
	public interface IReportsManager_Component 
	{
	}
	
	public interface IResearch_Component 
	{
		ResearchCache_StateMachine ResearchCache_StateMachine { get; set; }
		ResearchEntity_StateMachine ResearchEntity_StateMachine { get; set; }
		ResearchDocument_StateMachine ResearchDocument_StateMachine { get; set; }
		CacheUpdater_StateMachine CacheUpdater_StateMachine { get; set; }
		ResearchQuery_StateMachine ResearchQuery_StateMachine { get; set; }
		ResearchSuggestQuery_StateMachine ResearchSuggestQuery_StateMachine { get; set; }
		ResearchSettings_StateMachine ResearchSettings_StateMachine { get; set; }
	}
	
	public interface IUserManagement_Component 
	{
		UserManagement_StateMachine UserManagement_StateMachine { get; set; }
		UserSession_StateMachine UserSession_StateMachine { get; set; }
		GetRight_StateMachine GetRight_StateMachine { get; set; }
		CachedPermissionChecker_StateMachine CachedPermissionChecker_StateMachine { get; set; }
		ChangePassword_StateMachine ChangePassword_StateMachine { get; set; }
		UserEntityInfo_StateMachine UserEntityInfo_StateMachine { get; set; }
		BackendInfo_StateMachine BackendInfo_StateMachine { get; set; }
	}
	
	public interface IXcAppMetricsPublisher_Component 
	{
	}
	
	sealed public class CheckOrder_Component : ICheckOrder_Component 
	{
		public CheckComponent_StateMachine CheckComponent_StateMachine { get; set; }

		public CheckOrder_Component(){
			CheckComponent_StateMachine = new CheckComponent_StateMachine();
		}
	}
	
	sealed public class ExchangeManager_Component : IExchangeManager_Component 
	{
		public ExchangeManager_StateMachine ExchangeManager_StateMachine { get; set; }
		public Exchange_StateMachine Exchange_StateMachine { get; set; }
		public ExchangeOpening_StateMachine ExchangeOpening_StateMachine { get; set; }
		public Error_StateMachine Error_StateMachine { get; set; }
		public ExchangeError_StateMachine ExchangeError_StateMachine { get; set; }
		public ExchangeLoading_StateMachine ExchangeLoading_StateMachine { get; set; }
		public TimeZone_StateMachine TimeZone_StateMachine { get; set; }
		public ExchangeDisabling_StateMachine ExchangeDisabling_StateMachine { get; set; }
		public ExchangeMidnight_StateMachine ExchangeMidnight_StateMachine { get; set; }

		public ExchangeManager_Component(){
			ExchangeManager_StateMachine = new ExchangeManager_StateMachine();
			Exchange_StateMachine = new Exchange_StateMachine();
			ExchangeOpening_StateMachine = new ExchangeOpening_StateMachine();
			Error_StateMachine = new Error_StateMachine();
			ExchangeError_StateMachine = new ExchangeError_StateMachine();
			ExchangeLoading_StateMachine = new ExchangeLoading_StateMachine();
			TimeZone_StateMachine = new TimeZone_StateMachine();
			ExchangeDisabling_StateMachine = new ExchangeDisabling_StateMachine();
			ExchangeMidnight_StateMachine = new ExchangeMidnight_StateMachine();
		}
	}
	
	sealed public class FeedSource_Component : IFeedSource_Component 
	{
		public FeedManager_StateMachine FeedManager_StateMachine { get; set; }
		public Gateway_StateMachine Gateway_StateMachine { get; set; }
		public Feed_StateMachine Feed_StateMachine { get; set; }
		public DataSubscription_StateMachine DataSubscription_StateMachine { get; set; }
		public FeedSnapshot_StateMachine FeedSnapshot_StateMachine { get; set; }
		public DataSubscriptionDenial_StateMachine DataSubscriptionDenial_StateMachine { get; set; }

		public FeedSource_Component(){
			FeedManager_StateMachine = new FeedManager_StateMachine();
			Gateway_StateMachine = new Gateway_StateMachine();
			Feed_StateMachine = new Feed_StateMachine();
			DataSubscription_StateMachine = new DataSubscription_StateMachine();
			FeedSnapshot_StateMachine = new FeedSnapshot_StateMachine();
			DataSubscriptionDenial_StateMachine = new DataSubscriptionDenial_StateMachine();
		}
	}
	
	sealed public class OrderDbAccessor_Component : IOrderDbAccessor_Component 
	{
		public OrderSnapshot_StateMachine OrderSnapshot_StateMachine { get; set; }
		public TradeSnapshot_StateMachine TradeSnapshot_StateMachine { get; set; }
		public NewTradeAvailable_StateMachine NewTradeAvailable_StateMachine { get; set; }
		public OrdersTradesSnapshot_StateMachine OrdersTradesSnapshot_StateMachine { get; set; }

		public OrderDbAccessor_Component(){
			OrderSnapshot_StateMachine = new OrderSnapshot_StateMachine();
			TradeSnapshot_StateMachine = new TradeSnapshot_StateMachine();
			NewTradeAvailable_StateMachine = new NewTradeAvailable_StateMachine();
			OrdersTradesSnapshot_StateMachine = new OrdersTradesSnapshot_StateMachine();
		}
	}
	
	sealed public class OrderManagementSystem_Component : IOrderManagementSystem_Component 
	{
		public OrderManagementSystem_StateMachine OrderManagementSystem_StateMachine { get; set; }
		public Trade_StateMachine Trade_StateMachine { get; set; }
		public Order_StateMachine Order_StateMachine { get; set; }
		public ExchangeMidnightListener_StateMachine ExchangeMidnightListener_StateMachine { get; set; }

		public OrderManagementSystem_Component(){
			OrderManagementSystem_StateMachine = new OrderManagementSystem_StateMachine();
			Trade_StateMachine = new Trade_StateMachine();
			Order_StateMachine = new Order_StateMachine();
			ExchangeMidnightListener_StateMachine = new ExchangeMidnightListener_StateMachine();
		}
	}
	
	sealed public class Pricer_Component : IPricer_Component 
	{
		public Calculation_StateMachine Calculation_StateMachine { get; set; }
		public DetailedCalculation_StateMachine DetailedCalculation_StateMachine { get; set; }

		public Pricer_Component(){
			Calculation_StateMachine = new Calculation_StateMachine();
			DetailedCalculation_StateMachine = new DetailedCalculation_StateMachine();
		}
	}
	
	sealed public class Referential_Component : IReferential_Component 
	{
		public Referential_StateMachine Referential_StateMachine { get; set; }
		public FinancialInstrument_StateMachine FinancialInstrument_StateMachine { get; set; }
		public InstrumentRequest_StateMachine InstrumentRequest_StateMachine { get; set; }
		public CustomInstrumentRequest_StateMachine CustomInstrumentRequest_StateMachine { get; set; }
		public ExchangeReferentialImport_StateMachine ExchangeReferentialImport_StateMachine { get; set; }
		public ExchangeImportError_StateMachine ExchangeImportError_StateMachine { get; set; }
		public QuickSearch_StateMachine QuickSearch_StateMachine { get; set; }
		public ImportManager_StateMachine ImportManager_StateMachine { get; set; }

		public Referential_Component(){
			Referential_StateMachine = new Referential_StateMachine();
			FinancialInstrument_StateMachine = new FinancialInstrument_StateMachine();
			InstrumentRequest_StateMachine = new InstrumentRequest_StateMachine();
			CustomInstrumentRequest_StateMachine = new CustomInstrumentRequest_StateMachine();
			ExchangeReferentialImport_StateMachine = new ExchangeReferentialImport_StateMachine();
			ExchangeImportError_StateMachine = new ExchangeImportError_StateMachine();
			QuickSearch_StateMachine = new QuickSearch_StateMachine();
			ImportManager_StateMachine = new ImportManager_StateMachine();
		}
	}
	
	sealed public class ReferentialFeedSource_Component : IReferentialFeedSource_Component 
	{
		public ReferentialFeedManager_StateMachine ReferentialFeedManager_StateMachine { get; set; }
		public HeartBeatRequest_StateMachine HeartBeatRequest_StateMachine { get; set; }
		public FeedSourceOrchestrator_StateMachine FeedSourceOrchestrator_StateMachine { get; set; }
		public ReferentialFeed_StateMachine ReferentialFeed_StateMachine { get; set; }
		public ShutDownTimer_StateMachine ShutDownTimer_StateMachine { get; set; }

		public ReferentialFeedSource_Component(){
			ReferentialFeedManager_StateMachine = new ReferentialFeedManager_StateMachine();
			HeartBeatRequest_StateMachine = new HeartBeatRequest_StateMachine();
			FeedSourceOrchestrator_StateMachine = new FeedSourceOrchestrator_StateMachine();
			ReferentialFeed_StateMachine = new ReferentialFeed_StateMachine();
			ShutDownTimer_StateMachine = new ShutDownTimer_StateMachine();
		}
	}
	
	sealed public class ReportsManager_Component : IReportsManager_Component 
	{

		public ReportsManager_Component(){
		}
	}
	
	sealed public class Research_Component : IResearch_Component 
	{
		public ResearchCache_StateMachine ResearchCache_StateMachine { get; set; }
		public ResearchEntity_StateMachine ResearchEntity_StateMachine { get; set; }
		public ResearchDocument_StateMachine ResearchDocument_StateMachine { get; set; }
		public CacheUpdater_StateMachine CacheUpdater_StateMachine { get; set; }
		public ResearchQuery_StateMachine ResearchQuery_StateMachine { get; set; }
		public ResearchSuggestQuery_StateMachine ResearchSuggestQuery_StateMachine { get; set; }
		public ResearchSettings_StateMachine ResearchSettings_StateMachine { get; set; }

		public Research_Component(){
			ResearchCache_StateMachine = new ResearchCache_StateMachine();
			ResearchEntity_StateMachine = new ResearchEntity_StateMachine();
			ResearchDocument_StateMachine = new ResearchDocument_StateMachine();
			CacheUpdater_StateMachine = new CacheUpdater_StateMachine();
			ResearchQuery_StateMachine = new ResearchQuery_StateMachine();
			ResearchSuggestQuery_StateMachine = new ResearchSuggestQuery_StateMachine();
			ResearchSettings_StateMachine = new ResearchSettings_StateMachine();
		}
	}
	
	sealed public class UserManagement_Component : IUserManagement_Component 
	{
		public UserManagement_StateMachine UserManagement_StateMachine { get; set; }
		public UserSession_StateMachine UserSession_StateMachine { get; set; }
		public GetRight_StateMachine GetRight_StateMachine { get; set; }
		public CachedPermissionChecker_StateMachine CachedPermissionChecker_StateMachine { get; set; }
		public ChangePassword_StateMachine ChangePassword_StateMachine { get; set; }
		public UserEntityInfo_StateMachine UserEntityInfo_StateMachine { get; set; }
		public BackendInfo_StateMachine BackendInfo_StateMachine { get; set; }

		public UserManagement_Component(){
			UserManagement_StateMachine = new UserManagement_StateMachine();
			UserSession_StateMachine = new UserSession_StateMachine();
			GetRight_StateMachine = new GetRight_StateMachine();
			CachedPermissionChecker_StateMachine = new CachedPermissionChecker_StateMachine();
			ChangePassword_StateMachine = new ChangePassword_StateMachine();
			UserEntityInfo_StateMachine = new UserEntityInfo_StateMachine();
			BackendInfo_StateMachine = new BackendInfo_StateMachine();
		}
	}
	
	sealed public class XcAppMetricsPublisher_Component : IXcAppMetricsPublisher_Component 
	{

		public XcAppMetricsPublisher_Component(){
		}
	}
	
	public interface ICheckComponent_StateMachine 
	{
		event System.Action<XComponent.CheckOrder.CheckComponentNode> CheckComponentNodeCheckComponent;
		void OnCheckComponentNodeCheckComponentInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IExchangeManager_StateMachine 
	{
		event System.Action<XComponent.ExchangeManager.UserObject.ExchangeManager> ExchangeManagerExchangeManager;
		void OnExchangeManagerExchangeManagerInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IExchange_StateMachine 
	{
		event System.Action<PerseusLib.Common.Dto.Referential.ExchangeInfo> ExchangeInfoExchange;
		void OnExchangeInfoExchangeInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IExchangeOpening_StateMachine 
	{
		event System.Action<PerseusLib.Common.Dto.Referential.ExchangeInfo> ExchangeInfoExchangeOpening;
		void OnExchangeInfoExchangeOpeningInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IError_StateMachine 
	{
		event System.Action<XComponent.ExchangeManager.UserObject.Error> ErrorError;
		void OnErrorErrorInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IExchangeError_StateMachine 
	{
		event System.Action<XComponent.ExchangeManager.UserObject.ExchangeError> ExchangeErrorExchangeError;
		void OnExchangeErrorExchangeErrorInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IExchangeLoading_StateMachine 
	{
		event System.Action<PerseusLib.Common.Dto.Referential.ExchangeInfo> ExchangeInfoExchangeLoading;
		void OnExchangeInfoExchangeLoadingInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface ITimeZone_StateMachine 
	{
		event System.Action<PerseusLib.Common.Dto.Referential.TimeZoneDefinition> TimeZoneDefinitionTimeZone;
		void OnTimeZoneDefinitionTimeZoneInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IExchangeDisabling_StateMachine 
	{
		event System.Action<PerseusLib.Common.Dto.Referential.ExchangeInfo> ExchangeInfoExchangeDisabling;
		void OnExchangeInfoExchangeDisablingInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IExchangeMidnight_StateMachine 
	{
		event System.Action<PerseusLib.Common.Dto.Referential.ExchangeInfo> ExchangeInfoExchangeMidnight;
		void OnExchangeInfoExchangeMidnightInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IFeedManager_StateMachine 
	{
		event System.Action<XComponent.FeedSource.UserObject.FeedManager> FeedManagerFeedManager;
		void OnFeedManagerFeedManagerInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IGateway_StateMachine 
	{
		event System.Action<XComponent.FeedSource.UserObject.Gateway> GatewayGateway;
		void OnGatewayGatewayInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IFeed_StateMachine 
	{
		event System.Action<XComponent.FeedSource.UserObject.Feed> FeedFeed;
		void OnFeedFeedInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IDataSubscription_StateMachine 
	{
		event System.Action<XComponent.FeedSource.UserObject.DataSubscription> DataSubscriptionDataSubscription;
		void OnDataSubscriptionDataSubscriptionInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IFeedSnapshot_StateMachine 
	{
		event System.Action<XComponent.FeedSource.UserObject.FeedSnapshot> FeedSnapshotFeedSnapshot;
		void OnFeedSnapshotFeedSnapshotInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IDataSubscriptionDenial_StateMachine 
	{
		event System.Action<XComponent.FeedSource.UserObject.DataSubscriptionDenial> DataSubscriptionDenialDataSubscriptionDenial;
		void OnDataSubscriptionDenialDataSubscriptionDenialInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IOrderSnapshot_StateMachine 
	{
		event System.Action<XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult> OrderSnapshotResultOrderSnapshot;
		void OnOrderSnapshotResultOrderSnapshotInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface ITradeSnapshot_StateMachine 
	{
		event System.Action<XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult> TradeSnapshotResultTradeSnapshot;
		void OnTradeSnapshotResultTradeSnapshotInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface INewTradeAvailable_StateMachine 
	{
		event System.Action<PerseusLib.Common.Dto.Orders.Trade> TradeNewTradeAvailable;
		void OnTradeNewTradeAvailableInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IOrdersTradesSnapshot_StateMachine 
	{
		event System.Action<XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult> OrdersTradesSnapshotResultOrdersTradesSnapshot;
		void OnOrdersTradesSnapshotResultOrdersTradesSnapshotInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IOrderManagementSystem_StateMachine 
	{
		event System.Action<XComponent.OrderManagementSystem.UserObject.OrderManagementSystem> OrderManagementSystemOrderManagementSystem;
		void OnOrderManagementSystemOrderManagementSystemInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface ITrade_StateMachine 
	{
		event System.Action<PerseusLib.Common.Dto.Orders.Trade> TradeTrade;
		void OnTradeTradeInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IOrder_StateMachine 
	{
		event System.Action<PerseusLib.Common.Dto.Orders.XCOrder> XCOrderOrder;
		void OnXCOrderOrderInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IExchangeMidnightListener_StateMachine 
	{
		event System.Action<XComponent.OrderManagementSystem.UserObject.ExchangeMidnightListener> ExchangeMidnightListenerExchangeMidnightListener;
		void OnExchangeMidnightListenerExchangeMidnightListenerInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface ICalculation_StateMachine 
	{
		event System.Action<XComponent.Pricer.UserObject.Calculation> CalculationCalculation;
		void OnCalculationCalculationInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IDetailedCalculation_StateMachine 
	{
		event System.Action<XComponent.Pricer.UserObject.DetailedCalculation> DetailedCalculationDetailedCalculation;
		void OnDetailedCalculationDetailedCalculationInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IReferential_StateMachine 
	{
		event System.Action<XComponent.Referential.UserObject.Referential> ReferentialReferential;
		void OnReferentialReferentialInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IFinancialInstrument_StateMachine 
	{
		event System.Action<PerseusLib.Common.Dto.Referential.FinancialInstrument> FinancialInstrumentFinancialInstrument;
		void OnFinancialInstrumentFinancialInstrumentInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IInstrumentRequest_StateMachine 
	{
		event System.Action<XComponent.Referential.UserObject.InstrumentRequest> InstrumentRequestInstrumentRequest;
		void OnInstrumentRequestInstrumentRequestInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface ICustomInstrumentRequest_StateMachine 
	{
		event System.Action<XComponent.Referential.UserObject.CustomInstrumentRequestResult> CustomInstrumentRequestResultCustomInstrumentRequest;
		void OnCustomInstrumentRequestResultCustomInstrumentRequestInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IExchangeReferentialImport_StateMachine 
	{
		event System.Action<PerseusLib.Common.Dto.Referential.ExchangeReferentialImport> ExchangeReferentialImportExchangeReferentialImport;
		void OnExchangeReferentialImportExchangeReferentialImportInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IExchangeImportError_StateMachine 
	{
		event System.Action<XComponent.Referential.UserObject.MinorError> MinorErrorExchangeImportError;
		void OnMinorErrorExchangeImportErrorInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IQuickSearch_StateMachine 
	{
		event System.Action<XComponent.Referential.UserObject.QuickSearch> QuickSearchQuickSearch;
		void OnQuickSearchQuickSearchInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IImportManager_StateMachine 
	{
		event System.Action<XComponent.Referential.UserObject.ImportManager> ImportManagerImportManager;
		void OnImportManagerImportManagerInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IReferentialFeedManager_StateMachine 
	{
		event System.Action<XComponent.ReferentialFeedSource.UserObject.ReferentialFeedManager> ReferentialFeedManagerReferentialFeedManager;
		void OnReferentialFeedManagerReferentialFeedManagerInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IHeartBeatRequest_StateMachine 
	{
		event System.Action<XComponent.FeedSource.UserObject.HeartBeat> HeartBeatHeartBeatRequest;
		void OnHeartBeatHeartBeatRequestInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IFeedSourceOrchestrator_StateMachine 
	{
		event System.Action<XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator> FeedSourceOrchestratorFeedSourceOrchestrator;
		void OnFeedSourceOrchestratorFeedSourceOrchestratorInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IReferentialFeed_StateMachine 
	{
		event System.Action<XComponent.ReferentialFeedSource.UserObject.ReferentialFeed> ReferentialFeedReferentialFeed;
		void OnReferentialFeedReferentialFeedInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IShutDownTimer_StateMachine 
	{
		event System.Action<XComponent.ReferentialFeedSource.UserObject.ShutDownTimer> ShutDownTimerShutDownTimer;
		void OnShutDownTimerShutDownTimerInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IResearchCache_StateMachine 
	{
		event System.Action<XComponent.Research.UserObject.ResearchCache> ResearchCacheResearchCache;
		void OnResearchCacheResearchCacheInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IResearchEntity_StateMachine 
	{
		event System.Action<XComponent.Research.UserObject.ResearchEntity> ResearchEntityResearchEntity;
		void OnResearchEntityResearchEntityInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IResearchDocument_StateMachine 
	{
		event System.Action<XComponent.Research.UserObject.ResearchDocumentResponse> ResearchDocumentResponseResearchDocument;
		void OnResearchDocumentResponseResearchDocumentInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface ICacheUpdater_StateMachine 
	{
		event System.Action<XComponent.Research.UserObject.CacheUpdater> CacheUpdaterCacheUpdater;
		void OnCacheUpdaterCacheUpdaterInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IResearchQuery_StateMachine 
	{
		event System.Action<XComponent.Research.UserObject.ResearchQueryResult> ResearchQueryResultResearchQuery;
		void OnResearchQueryResultResearchQueryInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IResearchSuggestQuery_StateMachine 
	{
		event System.Action<XComponent.Research.UserObject.WordSuggested> WordSuggestedResearchSuggestQuery;
		void OnWordSuggestedResearchSuggestQueryInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IResearchSettings_StateMachine 
	{
		event System.Action<XComponent.Research.UserObject.ResearchSettings> ResearchSettingsResearchSettings;
		void OnResearchSettingsResearchSettingsInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IUserManagement_StateMachine 
	{
		event System.Action<XComponent.UserManagement.UserObject.UserManagement> UserManagementUserManagement;
		void OnUserManagementUserManagementInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IUserSession_StateMachine 
	{
		event System.Action<XComponent.UserManagement.UserObject.UserSessionInfo> UserSessionInfoUserSession;
		void OnUserSessionInfoUserSessionInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IGetRight_StateMachine 
	{
		event System.Action<XComponent.UserManagement.UserObject.GetRight> GetRightGetRight;
		void OnGetRightGetRightInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface ICachedPermissionChecker_StateMachine 
	{
		event System.Action<XComponent.UserManagement.UserObject.CachedPermissionChecker> CachedPermissionCheckerCachedPermissionChecker;
		void OnCachedPermissionCheckerCachedPermissionCheckerInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IChangePassword_StateMachine 
	{
		event System.Action<XComponent.UserManagement.UserObject.ChangingPassword> ChangingPasswordChangePassword;
		void OnChangingPasswordChangePasswordInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IUserEntityInfo_StateMachine 
	{
		event System.Action<XComponent.UserManagement.UserObject.UserEntityInfo> UserEntityInfoUserEntityInfo;
		void OnUserEntityInfoUserEntityInfoInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IBackendInfo_StateMachine 
	{
		event System.Action<XComponent.UserManagement.UserObject.BackendInfo> BackendInfoBackendInfo;
		void OnBackendInfoBackendInfoInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public sealed class CheckComponent_StateMachine : ICheckComponent_StateMachine
	{
		public event System.Action<XComponent.CheckOrder.CheckComponentNode> CheckComponentNodeCheckComponent;
		public void OnCheckComponentNodeCheckComponentInstanceUpdated(MessageEventArgs busEvent) {
			if( CheckComponentNodeCheckComponent != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.CheckOrder.CheckComponentNode;
				if( publicMember != null ) CheckComponentNodeCheckComponent(publicMember);
			}
		}
	}
	
	public sealed class ExchangeManager_StateMachine : IExchangeManager_StateMachine
	{
		public event System.Action<XComponent.ExchangeManager.UserObject.ExchangeManager> ExchangeManagerExchangeManager;
		public void OnExchangeManagerExchangeManagerInstanceUpdated(MessageEventArgs busEvent) {
			if( ExchangeManagerExchangeManager != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.ExchangeManager.UserObject.ExchangeManager;
				if( publicMember != null ) ExchangeManagerExchangeManager(publicMember);
			}
		}
	}
	
	public sealed class Exchange_StateMachine : IExchange_StateMachine
	{
		public event System.Action<PerseusLib.Common.Dto.Referential.ExchangeInfo> ExchangeInfoExchange;
		public void OnExchangeInfoExchangeInstanceUpdated(MessageEventArgs busEvent) {
			if( ExchangeInfoExchange != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Referential.ExchangeInfo;
				if( publicMember != null ) ExchangeInfoExchange(publicMember);
			}
		}
	}
	
	public sealed class ExchangeOpening_StateMachine : IExchangeOpening_StateMachine
	{
		public event System.Action<PerseusLib.Common.Dto.Referential.ExchangeInfo> ExchangeInfoExchangeOpening;
		public void OnExchangeInfoExchangeOpeningInstanceUpdated(MessageEventArgs busEvent) {
			if( ExchangeInfoExchangeOpening != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Referential.ExchangeInfo;
				if( publicMember != null ) ExchangeInfoExchangeOpening(publicMember);
			}
		}
	}
	
	public sealed class Error_StateMachine : IError_StateMachine
	{
		public event System.Action<XComponent.ExchangeManager.UserObject.Error> ErrorError;
		public void OnErrorErrorInstanceUpdated(MessageEventArgs busEvent) {
			if( ErrorError != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.ExchangeManager.UserObject.Error;
				if( publicMember != null ) ErrorError(publicMember);
			}
		}
	}
	
	public sealed class ExchangeError_StateMachine : IExchangeError_StateMachine
	{
		public event System.Action<XComponent.ExchangeManager.UserObject.ExchangeError> ExchangeErrorExchangeError;
		public void OnExchangeErrorExchangeErrorInstanceUpdated(MessageEventArgs busEvent) {
			if( ExchangeErrorExchangeError != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.ExchangeManager.UserObject.ExchangeError;
				if( publicMember != null ) ExchangeErrorExchangeError(publicMember);
			}
		}
	}
	
	public sealed class ExchangeLoading_StateMachine : IExchangeLoading_StateMachine
	{
		public event System.Action<PerseusLib.Common.Dto.Referential.ExchangeInfo> ExchangeInfoExchangeLoading;
		public void OnExchangeInfoExchangeLoadingInstanceUpdated(MessageEventArgs busEvent) {
			if( ExchangeInfoExchangeLoading != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Referential.ExchangeInfo;
				if( publicMember != null ) ExchangeInfoExchangeLoading(publicMember);
			}
		}
	}
	
	public sealed class TimeZone_StateMachine : ITimeZone_StateMachine
	{
		public event System.Action<PerseusLib.Common.Dto.Referential.TimeZoneDefinition> TimeZoneDefinitionTimeZone;
		public void OnTimeZoneDefinitionTimeZoneInstanceUpdated(MessageEventArgs busEvent) {
			if( TimeZoneDefinitionTimeZone != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Referential.TimeZoneDefinition;
				if( publicMember != null ) TimeZoneDefinitionTimeZone(publicMember);
			}
		}
	}
	
	public sealed class ExchangeDisabling_StateMachine : IExchangeDisabling_StateMachine
	{
		public event System.Action<PerseusLib.Common.Dto.Referential.ExchangeInfo> ExchangeInfoExchangeDisabling;
		public void OnExchangeInfoExchangeDisablingInstanceUpdated(MessageEventArgs busEvent) {
			if( ExchangeInfoExchangeDisabling != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Referential.ExchangeInfo;
				if( publicMember != null ) ExchangeInfoExchangeDisabling(publicMember);
			}
		}
	}
	
	public sealed class ExchangeMidnight_StateMachine : IExchangeMidnight_StateMachine
	{
		public event System.Action<PerseusLib.Common.Dto.Referential.ExchangeInfo> ExchangeInfoExchangeMidnight;
		public void OnExchangeInfoExchangeMidnightInstanceUpdated(MessageEventArgs busEvent) {
			if( ExchangeInfoExchangeMidnight != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Referential.ExchangeInfo;
				if( publicMember != null ) ExchangeInfoExchangeMidnight(publicMember);
			}
		}
	}
	
	public sealed class FeedManager_StateMachine : IFeedManager_StateMachine
	{
		public event System.Action<XComponent.FeedSource.UserObject.FeedManager> FeedManagerFeedManager;
		public void OnFeedManagerFeedManagerInstanceUpdated(MessageEventArgs busEvent) {
			if( FeedManagerFeedManager != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.FeedSource.UserObject.FeedManager;
				if( publicMember != null ) FeedManagerFeedManager(publicMember);
			}
		}
	}
	
	public sealed class Gateway_StateMachine : IGateway_StateMachine
	{
		public event System.Action<XComponent.FeedSource.UserObject.Gateway> GatewayGateway;
		public void OnGatewayGatewayInstanceUpdated(MessageEventArgs busEvent) {
			if( GatewayGateway != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.FeedSource.UserObject.Gateway;
				if( publicMember != null ) GatewayGateway(publicMember);
			}
		}
	}
	
	public sealed class Feed_StateMachine : IFeed_StateMachine
	{
		public event System.Action<XComponent.FeedSource.UserObject.Feed> FeedFeed;
		public void OnFeedFeedInstanceUpdated(MessageEventArgs busEvent) {
			if( FeedFeed != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.FeedSource.UserObject.Feed;
				if( publicMember != null ) FeedFeed(publicMember);
			}
		}
	}
	
	public sealed class DataSubscription_StateMachine : IDataSubscription_StateMachine
	{
		public event System.Action<XComponent.FeedSource.UserObject.DataSubscription> DataSubscriptionDataSubscription;
		public void OnDataSubscriptionDataSubscriptionInstanceUpdated(MessageEventArgs busEvent) {
			if( DataSubscriptionDataSubscription != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.FeedSource.UserObject.DataSubscription;
				if( publicMember != null ) DataSubscriptionDataSubscription(publicMember);
			}
		}
	}
	
	public sealed class FeedSnapshot_StateMachine : IFeedSnapshot_StateMachine
	{
		public event System.Action<XComponent.FeedSource.UserObject.FeedSnapshot> FeedSnapshotFeedSnapshot;
		public void OnFeedSnapshotFeedSnapshotInstanceUpdated(MessageEventArgs busEvent) {
			if( FeedSnapshotFeedSnapshot != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.FeedSource.UserObject.FeedSnapshot;
				if( publicMember != null ) FeedSnapshotFeedSnapshot(publicMember);
			}
		}
	}
	
	public sealed class DataSubscriptionDenial_StateMachine : IDataSubscriptionDenial_StateMachine
	{
		public event System.Action<XComponent.FeedSource.UserObject.DataSubscriptionDenial> DataSubscriptionDenialDataSubscriptionDenial;
		public void OnDataSubscriptionDenialDataSubscriptionDenialInstanceUpdated(MessageEventArgs busEvent) {
			if( DataSubscriptionDenialDataSubscriptionDenial != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.FeedSource.UserObject.DataSubscriptionDenial;
				if( publicMember != null ) DataSubscriptionDenialDataSubscriptionDenial(publicMember);
			}
		}
	}
	
	public sealed class OrderSnapshot_StateMachine : IOrderSnapshot_StateMachine
	{
		public event System.Action<XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult> OrderSnapshotResultOrderSnapshot;
		public void OnOrderSnapshotResultOrderSnapshotInstanceUpdated(MessageEventArgs busEvent) {
			if( OrderSnapshotResultOrderSnapshot != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult;
				if( publicMember != null ) OrderSnapshotResultOrderSnapshot(publicMember);
			}
		}
	}
	
	public sealed class TradeSnapshot_StateMachine : ITradeSnapshot_StateMachine
	{
		public event System.Action<XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult> TradeSnapshotResultTradeSnapshot;
		public void OnTradeSnapshotResultTradeSnapshotInstanceUpdated(MessageEventArgs busEvent) {
			if( TradeSnapshotResultTradeSnapshot != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult;
				if( publicMember != null ) TradeSnapshotResultTradeSnapshot(publicMember);
			}
		}
	}
	
	public sealed class NewTradeAvailable_StateMachine : INewTradeAvailable_StateMachine
	{
		public event System.Action<PerseusLib.Common.Dto.Orders.Trade> TradeNewTradeAvailable;
		public void OnTradeNewTradeAvailableInstanceUpdated(MessageEventArgs busEvent) {
			if( TradeNewTradeAvailable != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Orders.Trade;
				if( publicMember != null ) TradeNewTradeAvailable(publicMember);
			}
		}
	}
	
	public sealed class OrdersTradesSnapshot_StateMachine : IOrdersTradesSnapshot_StateMachine
	{
		public event System.Action<XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult> OrdersTradesSnapshotResultOrdersTradesSnapshot;
		public void OnOrdersTradesSnapshotResultOrdersTradesSnapshotInstanceUpdated(MessageEventArgs busEvent) {
			if( OrdersTradesSnapshotResultOrdersTradesSnapshot != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult;
				if( publicMember != null ) OrdersTradesSnapshotResultOrdersTradesSnapshot(publicMember);
			}
		}
	}
	
	public sealed class OrderManagementSystem_StateMachine : IOrderManagementSystem_StateMachine
	{
		public event System.Action<XComponent.OrderManagementSystem.UserObject.OrderManagementSystem> OrderManagementSystemOrderManagementSystem;
		public void OnOrderManagementSystemOrderManagementSystemInstanceUpdated(MessageEventArgs busEvent) {
			if( OrderManagementSystemOrderManagementSystem != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.OrderManagementSystem.UserObject.OrderManagementSystem;
				if( publicMember != null ) OrderManagementSystemOrderManagementSystem(publicMember);
			}
		}
	}
	
	public sealed class Trade_StateMachine : ITrade_StateMachine
	{
		public event System.Action<PerseusLib.Common.Dto.Orders.Trade> TradeTrade;
		public void OnTradeTradeInstanceUpdated(MessageEventArgs busEvent) {
			if( TradeTrade != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Orders.Trade;
				if( publicMember != null ) TradeTrade(publicMember);
			}
		}
	}
	
	public sealed class Order_StateMachine : IOrder_StateMachine
	{
		public event System.Action<PerseusLib.Common.Dto.Orders.XCOrder> XCOrderOrder;
		public void OnXCOrderOrderInstanceUpdated(MessageEventArgs busEvent) {
			if( XCOrderOrder != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Orders.XCOrder;
				if( publicMember != null ) XCOrderOrder(publicMember);
			}
		}
	}
	
	public sealed class ExchangeMidnightListener_StateMachine : IExchangeMidnightListener_StateMachine
	{
		public event System.Action<XComponent.OrderManagementSystem.UserObject.ExchangeMidnightListener> ExchangeMidnightListenerExchangeMidnightListener;
		public void OnExchangeMidnightListenerExchangeMidnightListenerInstanceUpdated(MessageEventArgs busEvent) {
			if( ExchangeMidnightListenerExchangeMidnightListener != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.OrderManagementSystem.UserObject.ExchangeMidnightListener;
				if( publicMember != null ) ExchangeMidnightListenerExchangeMidnightListener(publicMember);
			}
		}
	}
	
	public sealed class Calculation_StateMachine : ICalculation_StateMachine
	{
		public event System.Action<XComponent.Pricer.UserObject.Calculation> CalculationCalculation;
		public void OnCalculationCalculationInstanceUpdated(MessageEventArgs busEvent) {
			if( CalculationCalculation != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Pricer.UserObject.Calculation;
				if( publicMember != null ) CalculationCalculation(publicMember);
			}
		}
	}
	
	public sealed class DetailedCalculation_StateMachine : IDetailedCalculation_StateMachine
	{
		public event System.Action<XComponent.Pricer.UserObject.DetailedCalculation> DetailedCalculationDetailedCalculation;
		public void OnDetailedCalculationDetailedCalculationInstanceUpdated(MessageEventArgs busEvent) {
			if( DetailedCalculationDetailedCalculation != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Pricer.UserObject.DetailedCalculation;
				if( publicMember != null ) DetailedCalculationDetailedCalculation(publicMember);
			}
		}
	}
	
	public sealed class Referential_StateMachine : IReferential_StateMachine
	{
		public event System.Action<XComponent.Referential.UserObject.Referential> ReferentialReferential;
		public void OnReferentialReferentialInstanceUpdated(MessageEventArgs busEvent) {
			if( ReferentialReferential != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Referential.UserObject.Referential;
				if( publicMember != null ) ReferentialReferential(publicMember);
			}
		}
	}
	
	public sealed class FinancialInstrument_StateMachine : IFinancialInstrument_StateMachine
	{
		public event System.Action<PerseusLib.Common.Dto.Referential.FinancialInstrument> FinancialInstrumentFinancialInstrument;
		public void OnFinancialInstrumentFinancialInstrumentInstanceUpdated(MessageEventArgs busEvent) {
			if( FinancialInstrumentFinancialInstrument != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Referential.FinancialInstrument;
				if( publicMember != null ) FinancialInstrumentFinancialInstrument(publicMember);
			}
		}
	}
	
	public sealed class InstrumentRequest_StateMachine : IInstrumentRequest_StateMachine
	{
		public event System.Action<XComponent.Referential.UserObject.InstrumentRequest> InstrumentRequestInstrumentRequest;
		public void OnInstrumentRequestInstrumentRequestInstanceUpdated(MessageEventArgs busEvent) {
			if( InstrumentRequestInstrumentRequest != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Referential.UserObject.InstrumentRequest;
				if( publicMember != null ) InstrumentRequestInstrumentRequest(publicMember);
			}
		}
	}
	
	public sealed class CustomInstrumentRequest_StateMachine : ICustomInstrumentRequest_StateMachine
	{
		public event System.Action<XComponent.Referential.UserObject.CustomInstrumentRequestResult> CustomInstrumentRequestResultCustomInstrumentRequest;
		public void OnCustomInstrumentRequestResultCustomInstrumentRequestInstanceUpdated(MessageEventArgs busEvent) {
			if( CustomInstrumentRequestResultCustomInstrumentRequest != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Referential.UserObject.CustomInstrumentRequestResult;
				if( publicMember != null ) CustomInstrumentRequestResultCustomInstrumentRequest(publicMember);
			}
		}
	}
	
	public sealed class ExchangeReferentialImport_StateMachine : IExchangeReferentialImport_StateMachine
	{
		public event System.Action<PerseusLib.Common.Dto.Referential.ExchangeReferentialImport> ExchangeReferentialImportExchangeReferentialImport;
		public void OnExchangeReferentialImportExchangeReferentialImportInstanceUpdated(MessageEventArgs busEvent) {
			if( ExchangeReferentialImportExchangeReferentialImport != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Referential.ExchangeReferentialImport;
				if( publicMember != null ) ExchangeReferentialImportExchangeReferentialImport(publicMember);
			}
		}
	}
	
	public sealed class ExchangeImportError_StateMachine : IExchangeImportError_StateMachine
	{
		public event System.Action<XComponent.Referential.UserObject.MinorError> MinorErrorExchangeImportError;
		public void OnMinorErrorExchangeImportErrorInstanceUpdated(MessageEventArgs busEvent) {
			if( MinorErrorExchangeImportError != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Referential.UserObject.MinorError;
				if( publicMember != null ) MinorErrorExchangeImportError(publicMember);
			}
		}
	}
	
	public sealed class QuickSearch_StateMachine : IQuickSearch_StateMachine
	{
		public event System.Action<XComponent.Referential.UserObject.QuickSearch> QuickSearchQuickSearch;
		public void OnQuickSearchQuickSearchInstanceUpdated(MessageEventArgs busEvent) {
			if( QuickSearchQuickSearch != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Referential.UserObject.QuickSearch;
				if( publicMember != null ) QuickSearchQuickSearch(publicMember);
			}
		}
	}
	
	public sealed class ImportManager_StateMachine : IImportManager_StateMachine
	{
		public event System.Action<XComponent.Referential.UserObject.ImportManager> ImportManagerImportManager;
		public void OnImportManagerImportManagerInstanceUpdated(MessageEventArgs busEvent) {
			if( ImportManagerImportManager != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Referential.UserObject.ImportManager;
				if( publicMember != null ) ImportManagerImportManager(publicMember);
			}
		}
	}
	
	public sealed class ReferentialFeedManager_StateMachine : IReferentialFeedManager_StateMachine
	{
		public event System.Action<XComponent.ReferentialFeedSource.UserObject.ReferentialFeedManager> ReferentialFeedManagerReferentialFeedManager;
		public void OnReferentialFeedManagerReferentialFeedManagerInstanceUpdated(MessageEventArgs busEvent) {
			if( ReferentialFeedManagerReferentialFeedManager != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.ReferentialFeedSource.UserObject.ReferentialFeedManager;
				if( publicMember != null ) ReferentialFeedManagerReferentialFeedManager(publicMember);
			}
		}
	}
	
	public sealed class HeartBeatRequest_StateMachine : IHeartBeatRequest_StateMachine
	{
		public event System.Action<XComponent.FeedSource.UserObject.HeartBeat> HeartBeatHeartBeatRequest;
		public void OnHeartBeatHeartBeatRequestInstanceUpdated(MessageEventArgs busEvent) {
			if( HeartBeatHeartBeatRequest != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.FeedSource.UserObject.HeartBeat;
				if( publicMember != null ) HeartBeatHeartBeatRequest(publicMember);
			}
		}
	}
	
	public sealed class FeedSourceOrchestrator_StateMachine : IFeedSourceOrchestrator_StateMachine
	{
		public event System.Action<XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator> FeedSourceOrchestratorFeedSourceOrchestrator;
		public void OnFeedSourceOrchestratorFeedSourceOrchestratorInstanceUpdated(MessageEventArgs busEvent) {
			if( FeedSourceOrchestratorFeedSourceOrchestrator != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator;
				if( publicMember != null ) FeedSourceOrchestratorFeedSourceOrchestrator(publicMember);
			}
		}
	}
	
	public sealed class ReferentialFeed_StateMachine : IReferentialFeed_StateMachine
	{
		public event System.Action<XComponent.ReferentialFeedSource.UserObject.ReferentialFeed> ReferentialFeedReferentialFeed;
		public void OnReferentialFeedReferentialFeedInstanceUpdated(MessageEventArgs busEvent) {
			if( ReferentialFeedReferentialFeed != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.ReferentialFeedSource.UserObject.ReferentialFeed;
				if( publicMember != null ) ReferentialFeedReferentialFeed(publicMember);
			}
		}
	}
	
	public sealed class ShutDownTimer_StateMachine : IShutDownTimer_StateMachine
	{
		public event System.Action<XComponent.ReferentialFeedSource.UserObject.ShutDownTimer> ShutDownTimerShutDownTimer;
		public void OnShutDownTimerShutDownTimerInstanceUpdated(MessageEventArgs busEvent) {
			if( ShutDownTimerShutDownTimer != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.ReferentialFeedSource.UserObject.ShutDownTimer;
				if( publicMember != null ) ShutDownTimerShutDownTimer(publicMember);
			}
		}
	}
	
	public sealed class ResearchCache_StateMachine : IResearchCache_StateMachine
	{
		public event System.Action<XComponent.Research.UserObject.ResearchCache> ResearchCacheResearchCache;
		public void OnResearchCacheResearchCacheInstanceUpdated(MessageEventArgs busEvent) {
			if( ResearchCacheResearchCache != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Research.UserObject.ResearchCache;
				if( publicMember != null ) ResearchCacheResearchCache(publicMember);
			}
		}
	}
	
	public sealed class ResearchEntity_StateMachine : IResearchEntity_StateMachine
	{
		public event System.Action<XComponent.Research.UserObject.ResearchEntity> ResearchEntityResearchEntity;
		public void OnResearchEntityResearchEntityInstanceUpdated(MessageEventArgs busEvent) {
			if( ResearchEntityResearchEntity != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Research.UserObject.ResearchEntity;
				if( publicMember != null ) ResearchEntityResearchEntity(publicMember);
			}
		}
	}
	
	public sealed class ResearchDocument_StateMachine : IResearchDocument_StateMachine
	{
		public event System.Action<XComponent.Research.UserObject.ResearchDocumentResponse> ResearchDocumentResponseResearchDocument;
		public void OnResearchDocumentResponseResearchDocumentInstanceUpdated(MessageEventArgs busEvent) {
			if( ResearchDocumentResponseResearchDocument != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Research.UserObject.ResearchDocumentResponse;
				if( publicMember != null ) ResearchDocumentResponseResearchDocument(publicMember);
			}
		}
	}
	
	public sealed class CacheUpdater_StateMachine : ICacheUpdater_StateMachine
	{
		public event System.Action<XComponent.Research.UserObject.CacheUpdater> CacheUpdaterCacheUpdater;
		public void OnCacheUpdaterCacheUpdaterInstanceUpdated(MessageEventArgs busEvent) {
			if( CacheUpdaterCacheUpdater != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Research.UserObject.CacheUpdater;
				if( publicMember != null ) CacheUpdaterCacheUpdater(publicMember);
			}
		}
	}
	
	public sealed class ResearchQuery_StateMachine : IResearchQuery_StateMachine
	{
		public event System.Action<XComponent.Research.UserObject.ResearchQueryResult> ResearchQueryResultResearchQuery;
		public void OnResearchQueryResultResearchQueryInstanceUpdated(MessageEventArgs busEvent) {
			if( ResearchQueryResultResearchQuery != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Research.UserObject.ResearchQueryResult;
				if( publicMember != null ) ResearchQueryResultResearchQuery(publicMember);
			}
		}
	}
	
	public sealed class ResearchSuggestQuery_StateMachine : IResearchSuggestQuery_StateMachine
	{
		public event System.Action<XComponent.Research.UserObject.WordSuggested> WordSuggestedResearchSuggestQuery;
		public void OnWordSuggestedResearchSuggestQueryInstanceUpdated(MessageEventArgs busEvent) {
			if( WordSuggestedResearchSuggestQuery != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Research.UserObject.WordSuggested;
				if( publicMember != null ) WordSuggestedResearchSuggestQuery(publicMember);
			}
		}
	}
	
	public sealed class ResearchSettings_StateMachine : IResearchSettings_StateMachine
	{
		public event System.Action<XComponent.Research.UserObject.ResearchSettings> ResearchSettingsResearchSettings;
		public void OnResearchSettingsResearchSettingsInstanceUpdated(MessageEventArgs busEvent) {
			if( ResearchSettingsResearchSettings != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Research.UserObject.ResearchSettings;
				if( publicMember != null ) ResearchSettingsResearchSettings(publicMember);
			}
		}
	}
	
	public sealed class UserManagement_StateMachine : IUserManagement_StateMachine
	{
		public event System.Action<XComponent.UserManagement.UserObject.UserManagement> UserManagementUserManagement;
		public void OnUserManagementUserManagementInstanceUpdated(MessageEventArgs busEvent) {
			if( UserManagementUserManagement != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.UserManagement.UserObject.UserManagement;
				if( publicMember != null ) UserManagementUserManagement(publicMember);
			}
		}
	}
	
	public sealed class UserSession_StateMachine : IUserSession_StateMachine
	{
		public event System.Action<XComponent.UserManagement.UserObject.UserSessionInfo> UserSessionInfoUserSession;
		public void OnUserSessionInfoUserSessionInstanceUpdated(MessageEventArgs busEvent) {
			if( UserSessionInfoUserSession != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.UserManagement.UserObject.UserSessionInfo;
				if( publicMember != null ) UserSessionInfoUserSession(publicMember);
			}
		}
	}
	
	public sealed class GetRight_StateMachine : IGetRight_StateMachine
	{
		public event System.Action<XComponent.UserManagement.UserObject.GetRight> GetRightGetRight;
		public void OnGetRightGetRightInstanceUpdated(MessageEventArgs busEvent) {
			if( GetRightGetRight != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.UserManagement.UserObject.GetRight;
				if( publicMember != null ) GetRightGetRight(publicMember);
			}
		}
	}
	
	public sealed class CachedPermissionChecker_StateMachine : ICachedPermissionChecker_StateMachine
	{
		public event System.Action<XComponent.UserManagement.UserObject.CachedPermissionChecker> CachedPermissionCheckerCachedPermissionChecker;
		public void OnCachedPermissionCheckerCachedPermissionCheckerInstanceUpdated(MessageEventArgs busEvent) {
			if( CachedPermissionCheckerCachedPermissionChecker != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.UserManagement.UserObject.CachedPermissionChecker;
				if( publicMember != null ) CachedPermissionCheckerCachedPermissionChecker(publicMember);
			}
		}
	}
	
	public sealed class ChangePassword_StateMachine : IChangePassword_StateMachine
	{
		public event System.Action<XComponent.UserManagement.UserObject.ChangingPassword> ChangingPasswordChangePassword;
		public void OnChangingPasswordChangePasswordInstanceUpdated(MessageEventArgs busEvent) {
			if( ChangingPasswordChangePassword != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.UserManagement.UserObject.ChangingPassword;
				if( publicMember != null ) ChangingPasswordChangePassword(publicMember);
			}
		}
	}
	
	public sealed class UserEntityInfo_StateMachine : IUserEntityInfo_StateMachine
	{
		public event System.Action<XComponent.UserManagement.UserObject.UserEntityInfo> UserEntityInfoUserEntityInfo;
		public void OnUserEntityInfoUserEntityInfoInstanceUpdated(MessageEventArgs busEvent) {
			if( UserEntityInfoUserEntityInfo != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.UserManagement.UserObject.UserEntityInfo;
				if( publicMember != null ) UserEntityInfoUserEntityInfo(publicMember);
			}
		}
	}
	
	public sealed class BackendInfo_StateMachine : IBackendInfo_StateMachine
	{
		public event System.Action<XComponent.UserManagement.UserObject.BackendInfo> BackendInfoBackendInfo;
		public void OnBackendInfoBackendInfoInstanceUpdated(MessageEventArgs busEvent) {
			if( BackendInfoBackendInfo != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.UserManagement.UserObject.BackendInfo;
				if( publicMember != null ) BackendInfoBackendInfo(publicMember);
			}
		}
	}
}


