// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace XComponentClientApi
{
    using System;
    using System.Xml;
    using System.Linq;
    using System.Collections.Generic;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class XCClientApi : XCClientApiBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@" 
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template T4. 
//     Changes to this file may cause incorrect behavior
// </auto-generated>
// ------------------------------------------------------------------------------
");
            
            #line 15 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

//Open xcApi File 
var doc = new XmlDocument();	
var xmlmanager = new XmlNamespaceManager(doc.NameTable);
xmlmanager.AddNamespace("xc", "http://xcomponent.com/DeploymentConfig.xsd");
doc.Load(_xmlFile);

//Split File in different nodes 
var components = doc.SelectNodes("//xc:component", xmlmanager);
var stateMachines = doc.SelectNodes("//xc:stateMachines", xmlmanager);
var subscribeNodes = doc.SelectNodes("//xc:subscribe[@eventType='UPDATE']", xmlmanager);
var publishNodes = doc.SelectNodes("//xc:publish", xmlmanager);
var states = doc.SelectNodes("//xc:states", xmlmanager);

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 30 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
 /*XCClientApi template*/ 
            
            #line default
            #line hidden
            this.Write(@"using System;
using System.IO;
using ReactiveXComponent;
using ReactiveXComponent.Common;
using ReactiveXComponent.Connection;
using ReactiveXComponent.RabbitMq;

namespace XComponentClientApi
{
	public class XCClientApi
	{
		private IXComponentApi _xcApi;
		private Stream _xcApiStream;
		private IXCSession _xcSession;

");
            
            #line 46 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

string componentType;

foreach(System.Xml.XmlElement component in components)
{
	componentType = component.Attributes["name"].Value + "Component";


            
            #line default
            #line hidden
            this.Write("\t\tpublic ");
            
            #line 53 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(componentType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 53 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(componentType));
            
            #line default
            #line hidden
            this.Write(" { get; private set; }\r\n");
            
            #line 54 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

}

            
            #line default
            #line hidden
            this.Write(@"			
		public void InitApi(string deploymentFile, string privateCommunicationIdentifier = null)
		{
			_xcApiStream = new FileStream(deploymentFile, FileMode.OpenOrCreate, FileAccess.Read, FileShare.Read);
			_xcApi = XComponentApi.CreateFromXCApi(_xcApiStream, privateCommunicationIdentifier);
			_xcSession = _xcApi.CreateSession();

");
            
            #line 63 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

foreach(System.Xml.XmlElement component in components)
{
	componentType = component.Attributes["name"].Value + "Component";

            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 68 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(componentType));
            
            #line default
            #line hidden
            this.Write(" =  new ");
            
            #line 68 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(componentType));
            
            #line default
            #line hidden
            this.Write("(_xcSession);\r\n");
            
            #line 69 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
			
}

            
            #line default
            #line hidden
            this.Write("\t\r\n\r\n\t\t\tvar subscriber = _xcSession.CreateSubscriber();\r\n");
            
            #line 74 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

//State machines by Component repository
Dictionary<System.Xml.XmlElement, List < System.Xml.XmlElement > > stateMachinesByComponent = new Dictionary<XmlElement, List<XmlElement>>();

foreach (System.Xml.XmlElement component in components)
{	
	stateMachinesByComponent.Add(component, new List<System.Xml.XmlElement>());
    foreach (System.Xml.XmlElement stateMachine in component.LastChild)
    {
        stateMachinesByComponent[component].Add(stateMachine);
    }
}
ImplementApiClass(stateMachinesByComponent, subscribeNodes);

            
            #line default
            #line hidden
            this.Write("\t}\t\t\r\n\t\r\n");
            
            #line 90 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

DeclareComponentInterface(stateMachinesByComponent, subscribeNodes); 
DeclareComponentClass(stateMachinesByComponent, subscribeNodes); 
DeclareStateMachineInterface(stateMachinesByComponent, publishNodes,subscribeNodes);
DeclareStateMachineClass(stateMachinesByComponent, publishNodes,subscribeNodes);
EndSpaceBlock(); 

            
            #line default
            #line hidden
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
        
        #line 98 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

private void ImplementApiClass(Dictionary<System.Xml.XmlElement, List < System.Xml.XmlElement > > stateMachinesByComponent, XmlNodeList subscribeNodes)
{		
	foreach (var element in stateMachinesByComponent)
	{
	    var componentName = element.Key.Attributes["name"].Value;
	    var componentType = componentName + "Component";
	    foreach (var stateMachine in element.Value)
	    {
	        var stateMachineName = componentName+"_"+stateMachine.Attributes["name"].Value;
	        var stateMachineType = componentName+"_"+stateMachine.Attributes["name"].Value + "StateMachine";
	        foreach (XmlNode subscribeNode in subscribeNodes)
	        {
	            var communicationType = subscribeNode.Attributes["communicationType"].InnerText;
	            if (communicationType == "IN_MEMORY")
	                continue;
	
	            var eventName = subscribeNode.Attributes["event"].InnerText;
	            var stateMachineCode = subscribeNode.Attributes["stateMachineCode"].Value;
	            if (stateMachineCode == stateMachine.Attributes["id"].Value
	                && eventName != string.Empty)
	            {
	                eventName = eventName.Split('.').Last();
	                var methodName = "On" + stateMachine.Attributes["name"].Value + "InstanceUpdated";

        
        #line default
        #line hidden
        
        #line 122 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\t\t\tsubscriber.Subscribe(\"");

        
        #line default
        #line hidden
        
        #line 122 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(componentName));

        
        #line default
        #line hidden
        
        #line 122 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\",\"");

        
        #line default
        #line hidden
        
        #line 122 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineName));

        
        #line default
        #line hidden
        
        #line 122 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\",");

        
        #line default
        #line hidden
        
        #line 122 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(componentType));

        
        #line default
        #line hidden
        
        #line 122 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(".");

        
        #line default
        #line hidden
        
        #line 122 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineType));

        
        #line default
        #line hidden
        
        #line 122 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(".");

        
        #line default
        #line hidden
        
        #line 122 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(methodName));

        
        #line default
        #line hidden
        
        #line 122 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(");\r\n");

        
        #line default
        #line hidden
        
        #line 123 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
				}
			}
		
		}
	}

        
        #line default
        #line hidden
        
        #line 128 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\t\t}\r\n");

        
        #line default
        #line hidden
        
        #line 130 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

}

private void DeclareComponentInterface(Dictionary<System.Xml.XmlElement, List < System.Xml.XmlElement > > stateMachinesByComponent, XmlNodeList subscribeNodes)
{ 
	foreach (var element in stateMachinesByComponent)
	{
		var componentName = element.Key.Attributes["name"].Value +"Component" ;
		var component = element.Key.Attributes["name"].Value;

        
        #line default
        #line hidden
        
        #line 139 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\t\r\n\tpublic interface I");

        
        #line default
        #line hidden
        
        #line 140 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(componentName));

        
        #line default
        #line hidden
        
        #line 140 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(" \r\n\t{\r\n");

        
        #line default
        #line hidden
        
        #line 142 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

		foreach (var stateMachine in element.Value)
        {
			var stateMachineType = component+"_"+stateMachine.Attributes["name"].Value + "StateMachine";
			
			foreach (XmlNode subscribeNode in subscribeNodes)
			{
				var eventName = subscribeNode.Attributes["event"].InnerText;
				var stateMachineCode = subscribeNode.Attributes["stateMachineCode"].Value;
				if (stateMachineCode == stateMachine.Attributes["id"].Value
					&& eventName != string.Empty) {
				

        
        #line default
        #line hidden
        
        #line 154 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\t\t");

        
        #line default
        #line hidden
        
        #line 154 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineType));

        
        #line default
        #line hidden
        
        #line 154 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 154 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineType));

        
        #line default
        #line hidden
        
        #line 154 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(" { get; set; }\r\n");

        
        #line default
        #line hidden
        
        #line 155 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
			
				}
			}
		}

        
        #line default
        #line hidden
        
        #line 159 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\t}\r\n");

        
        #line default
        #line hidden
        
        #line 160 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

	}
}
private void DeclareComponentClass(Dictionary<System.Xml.XmlElement, List < System.Xml.XmlElement > > stateMachinesByComponent, XmlNodeList subscribeNodes)
{ 

	foreach (var element in stateMachinesByComponent)
	{
		var componentName = element.Key.Attributes["name"].Value +"Component" ;
		var component = element.Key.Attributes["name"].Value;

        
        #line default
        #line hidden
        
        #line 170 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\t\r\n\tpublic class ");

        
        #line default
        #line hidden
        
        #line 171 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(componentName));

        
        #line default
        #line hidden
        
        #line 171 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(" : I");

        
        #line default
        #line hidden
        
        #line 171 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(componentName));

        
        #line default
        #line hidden
        
        #line 171 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(" \r\n\t{\r\n");

        
        #line default
        #line hidden
        
        #line 173 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

		foreach (var stateMachine in element.Value)
        {
			var stateMachineType = component+"_"+stateMachine.Attributes["name"].Value + "StateMachine";
			
			foreach (XmlNode subscribeNode in subscribeNodes)
			{
				var eventName = subscribeNode.Attributes["event"].InnerText;
				var stateMachineCode = subscribeNode.Attributes["stateMachineCode"].Value;
				if (stateMachineCode == stateMachine.Attributes["id"].Value
					&& eventName != string.Empty) 
				{

        
        #line default
        #line hidden
        
        #line 185 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\t\tpublic ");

        
        #line default
        #line hidden
        
        #line 185 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineType));

        
        #line default
        #line hidden
        
        #line 185 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 185 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineType));

        
        #line default
        #line hidden
        
        #line 185 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(" { get; set; }\r\n");

        
        #line default
        #line hidden
        
        #line 186 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
 
				}
			}
		}

        
        #line default
        #line hidden
        
        #line 190 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\r\n\t\tpublic ");

        
        #line default
        #line hidden
        
        #line 192 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(componentName));

        
        #line default
        #line hidden
        
        #line 192 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("(IXCSession xcSession)\r\n\t\t{\r\n\t\t\tvar publisher = xcSession.CreatePublisher(\"");

        
        #line default
        #line hidden
        
        #line 194 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(element.Key.Attributes["name"].Value));

        
        #line default
        #line hidden
        
        #line 194 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\"); \r\n");

        
        #line default
        #line hidden
        
        #line 195 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

		foreach (var stateMachine in element.Value)
        {
			var stateMachineType = component+"_"+stateMachine.Attributes["name"].Value + "StateMachine";
			
			foreach (XmlNode subscribeNode in subscribeNodes)
			{
				var eventName = subscribeNode.Attributes["event"].InnerText;
				var stateMachineCode = subscribeNode.Attributes["stateMachineCode"].Value;
				if (stateMachineCode == stateMachine.Attributes["id"].Value
					&& eventName != string.Empty) 
				{

        
        #line default
        #line hidden
        
        #line 207 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\t\t\t");

        
        #line default
        #line hidden
        
        #line 207 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineType));

        
        #line default
        #line hidden
        
        #line 207 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(" = new ");

        
        #line default
        #line hidden
        
        #line 207 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineType));

        
        #line default
        #line hidden
        
        #line 207 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("(publisher);\r\n");

        
        #line default
        #line hidden
        
        #line 208 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
 
				}
			}		
		}			

        
        #line default
        #line hidden
        
        #line 212 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\t\t}\r\n\t}\r\n");

        
        #line default
        #line hidden
        
        #line 214 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

	}
}

private void DeclareStateMachineInterface(Dictionary<System.Xml.XmlElement, List<System.Xml.XmlElement>> stateMachinesByComponent, XmlNodeList publishNodes, XmlNodeList subscribeNodes)
{ 
	foreach (var element in stateMachinesByComponent)
	{
		var elem = element.Key;
		var component = elem.Attributes["name"].Value;

		foreach (var stateMachine in element.Value)
        {
			var stateMachineType =  component+"_"+stateMachine.Attributes["name"].Value + "StateMachine";
			var stateMachineName = component+"_"+stateMachine.Attributes["name"].Value;

        
        #line default
        #line hidden
        
        #line 229 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\t\r\n\tpublic interface I");

        
        #line default
        #line hidden
        
        #line 230 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineType));

        
        #line default
        #line hidden
        
        #line 230 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(" \r\n\t{\r\n");

        
        #line default
        #line hidden
        
        #line 232 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

			DeclareSendActionInInterface(elem, stateMachine, publishNodes);
			foreach (XmlNode subscribeNode in subscribeNodes)
			{
				var communicationType = subscribeNode.Attributes["communicationType"].InnerText;
				if (communicationType == "IN_MEMORY")
					continue;
				
				var eventName = subscribeNode.Attributes["event"].InnerText;
				var stateMachineCode = subscribeNode.Attributes["stateMachineCode"].Value;
				if (stateMachineCode == stateMachine.Attributes["id"].Value
					&& eventName != string.Empty) 
				{
					var methodName = stateMachine.Attributes["name"].Value; 

        
        #line default
        #line hidden
        
        #line 246 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\t\r\n\t\tevent System.Action<");

        
        #line default
        #line hidden
        
        #line 247 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(eventName));

        
        #line default
        #line hidden
        
        #line 247 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("> ");

        
        #line default
        #line hidden
        
        #line 247 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(methodName));

        
        #line default
        #line hidden
        
        #line 247 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(";\r\n\t\tvoid On");

        
        #line default
        #line hidden
        
        #line 248 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(methodName));

        
        #line default
        #line hidden
        
        #line 248 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("InstanceUpdated(MessageEventArgs busEvent); \r\n");

        
        #line default
        #line hidden
        
        #line 249 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

				}
			}
		endBlock();
		}
	}
}

private void DeclareStateMachineClass(Dictionary<System.Xml.XmlElement, List<System.Xml.XmlElement>> stateMachinesByComponent, XmlNodeList publishNodes, XmlNodeList subscribeNodes)
{
	foreach (var element in stateMachinesByComponent)
	{
		var elem = element.Key;
		var component = elem.Attributes["name"].Value;
		foreach (var stateMachine in element.Value)
        {
			var stateMachineType = component+"_"+stateMachine.Attributes["name"].Value + "StateMachine";
			var stateMachineName = component+"_"+stateMachine.Attributes["name"].Value;

        
        #line default
        #line hidden
        
        #line 267 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\tpublic class ");

        
        #line default
        #line hidden
        
        #line 267 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineType));

        
        #line default
        #line hidden
        
        #line 267 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(" : I");

        
        #line default
        #line hidden
        
        #line 267 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineType));

        
        #line default
        #line hidden
        
        #line 267 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\r\n\t{\r\n");

        
        #line default
        #line hidden
        
        #line 269 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

			DeclareSendActionInClass(elem, stateMachine, publishNodes);

			foreach (XmlNode subscribeNode in subscribeNodes)
			{
				var communicationType = subscribeNode.Attributes["communicationType"].InnerText;
				if (communicationType == "IN_MEMORY")
					continue;
				
				var eventName = subscribeNode.Attributes["event"].InnerText;
				var stateMachineCode = subscribeNode.Attributes["stateMachineCode"].Value;
				if (stateMachineCode == stateMachine.Attributes["id"].Value
					&& eventName != string.Empty) 
				{
					var methodName = stateMachine.Attributes["name"].Value; 

        
        #line default
        #line hidden
        
        #line 284 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\t\r\n\t\tpublic event System.Action<");

        
        #line default
        #line hidden
        
        #line 285 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(eventName));

        
        #line default
        #line hidden
        
        #line 285 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("> ");

        
        #line default
        #line hidden
        
        #line 285 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(methodName));

        
        #line default
        #line hidden
        
        #line 285 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(";\r\n\t\tpublic void On");

        
        #line default
        #line hidden
        
        #line 286 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(methodName));

        
        #line default
        #line hidden
        
        #line 286 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("InstanceUpdated(MessageEventArgs busEvent) {\r\n\t\t\tif( ");

        
        #line default
        #line hidden
        
        #line 287 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(methodName));

        
        #line default
        #line hidden
        
        #line 287 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(" != null ){ \r\n\t\t\t\tvar publicMember = busEvent.MessageReceived as ");

        
        #line default
        #line hidden
        
        #line 288 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(eventName));

        
        #line default
        #line hidden
        
        #line 288 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(";\r\n\t\t\t\tif( publicMember != null ) ");

        
        #line default
        #line hidden
        
        #line 289 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(methodName));

        
        #line default
        #line hidden
        
        #line 289 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("(publicMember);\r\n\t\t\t}\r\n\t\t}\r\n");

        
        #line default
        #line hidden
        
        #line 292 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
					
				}
			}
			endBlock();
		}
	}
}


private void DeclareSendActionInClass(System.Xml.XmlElement element, System.Xml.XmlElement stateMachine, XmlNodeList  publishNodes)
{
	List<string> eventCodes = new List<string>() ;
	var component = element.Attributes["name"].Value;
	var stateMachineType = component+"_"+stateMachine.Attributes["name"].Value + "StateMachine";


        
        #line default
        #line hidden
        
        #line 307 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\t\tprivate readonly IXCPublisher _xcPublisher;\r\n\t\t\r\n\t\tpublic ");

        
        #line default
        #line hidden
        
        #line 309 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineType));

        
        #line default
        #line hidden
        
        #line 309 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("(IXCPublisher publisher)\r\n\t\t{\r\n\t\t\t_xcPublisher = publisher;\r\n\t\t}\r\n");

        
        #line default
        #line hidden
        
        #line 313 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

	foreach (XmlNode publishNode in publishNodes)
	{
		var communicationType = publishNode.Attributes["communicationType"].InnerText;
		if (communicationType == "IN_MEMORY")
			continue;

		if (element.Attributes["id"].Value == publishNode.Attributes["componentCode"].Value)
		{
			var eventName = publishNode.Attributes["event"].InnerText;
			var eventCode = publishNode.Attributes["eventCode"].InnerText;
			var eventNameFirst = (eventName.Split('.')).FirstOrDefault();
			var eventNameSecond = (eventName.Split('.'))[1];
			
			//Check if Event is called once and part of XC.Component.Userobject
			if (!eventCodes.Contains(eventCode) 
				&& eventName != string.Empty 
				&& eventNameFirst == "XComponent" && eventNameSecond != "Common") 
			{
				var eventNameEnd = (eventName.Split('.')).Last();
				eventCodes.Add(eventCode);
				var stateMachineName = stateMachine.Attributes["name"].Value; 

        
        #line default
        #line hidden
        
        #line 335 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\t\tpublic void Send");

        
        #line default
        #line hidden
        
        #line 335 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(eventNameEnd));

        
        #line default
        #line hidden
        
        #line 335 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("(");

        
        #line default
        #line hidden
        
        #line 335 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(eventName));

        
        #line default
        #line hidden
        
        #line 335 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(" obj, Visibility visibility)\r\n\t\t{\r\n\t\t\t_xcPublisher.SendEvent(\"");

        
        #line default
        #line hidden
        
        #line 337 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(stateMachineName));

        
        #line default
        #line hidden
        
        #line 337 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\", obj, visibility);\r\n\t\t}\r\n");

        
        #line default
        #line hidden
        
        #line 339 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

			}
		}
	}

}

private void DeclareSendActionInInterface(System.Xml.XmlElement element, System.Xml.XmlElement stateMachine, XmlNodeList  publishNodes)
{	
	List<string> eventCodes = new List<string>() ;
	var component = element.Attributes["name"].Value;
	var stateMachineType = component+"_"+stateMachine.Attributes["name"].Value + "StateMachine";

	foreach (XmlNode publishNode in publishNodes)
	{
		var communicationType = publishNode.Attributes["communicationType"].InnerText;
		if (communicationType == "IN_MEMORY")
			continue;

		if (element.Attributes["id"].Value == publishNode.Attributes["componentCode"].Value)
		{
			var eventName = publishNode.Attributes["event"].InnerText;
			var eventCode = publishNode.Attributes["eventCode"].InnerText;
			var eventNameFirst = (eventName.Split('.')).FirstOrDefault();
			var eventNameSecond = (eventName.Split('.'))[1];
			
			//Check if Event is called once and part of XC.Component.Userobject
			if (!eventCodes.Contains(eventCode) 
				&& eventName != string.Empty 
				&& eventNameFirst == "XComponent" && eventNameSecond != "Common") 
			{
				var eventNameEnd = (eventName.Split('.')).Last();
				eventCodes.Add(eventCode);
				var stateMachineName = stateMachine.Attributes["name"].Value; 

        
        #line default
        #line hidden
        
        #line 373 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\t\tvoid Send");

        
        #line default
        #line hidden
        
        #line 373 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(eventNameEnd));

        
        #line default
        #line hidden
        
        #line 373 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("(");

        
        #line default
        #line hidden
        
        #line 373 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(eventName));

        
        #line default
        #line hidden
        
        #line 373 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write(" obj, Visibility visibility);\r\n");

        
        #line default
        #line hidden
        
        #line 374 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

			}
		}
	}
}

private void EndSpaceBlock(){

        
        #line default
        #line hidden
        
        #line 381 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("}\r\n");

        
        #line default
        #line hidden
        
        #line 383 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

}
private void endBlock(){

        
        #line default
        #line hidden
        
        #line 386 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"
this.Write("\t}\r\n");

        
        #line default
        #line hidden
        
        #line 388 "C:\Projet\ReactiveXComponent.Net\XComponentClientApi\XCClientApi.tt"

}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class XCClientApiBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
