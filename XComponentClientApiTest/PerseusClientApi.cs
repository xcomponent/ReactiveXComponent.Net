 
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template T4. 
//     Changes to this file may cause incorrect behavior
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.IO;
using ReactiveXComponent;
using ReactiveXComponent.Common;
using ReactiveXComponent.Connection;
using ReactiveXComponent.RabbitMq;

namespace XComponentClientApi
{
	public class XCClientApi
	{
		private IXComponentApi _xcApi;
		private Stream _xcApiStream;
		private IXCSession _xcSession;

		public CheckOrderComponent CheckOrderComponent { get; private set; }
		public ExchangeManagerComponent ExchangeManagerComponent { get; private set; }
		public FeedSourceComponent FeedSourceComponent { get; private set; }
		public OrderDbAccessorComponent OrderDbAccessorComponent { get; private set; }
		public OrderManagementSystemComponent OrderManagementSystemComponent { get; private set; }
		public PricerComponent PricerComponent { get; private set; }
		public ReferentialComponent ReferentialComponent { get; private set; }
		public ReferentialFeedSourceComponent ReferentialFeedSourceComponent { get; private set; }
		public ReportsManagerComponent ReportsManagerComponent { get; private set; }
		public ResearchComponent ResearchComponent { get; private set; }
		public UserManagementComponent UserManagementComponent { get; private set; }
		public XcAppMetricsPublisherComponent XcAppMetricsPublisherComponent { get; private set; }
			
		public void InitApi(string deploymentFile, string privateCommunicationIdentifier = null)
		{
			_xcApiStream = new FileStream(deploymentFile, FileMode.OpenOrCreate, FileAccess.Read, FileShare.Read);
			_xcApi = XComponentApi.CreateFromXCApi(_xcApiStream, privateCommunicationIdentifier);
			_xcSession = _xcApi.CreateSession();

			CheckOrderComponent =  new CheckOrderComponent(_xcSession);
			ExchangeManagerComponent =  new ExchangeManagerComponent(_xcSession);
			FeedSourceComponent =  new FeedSourceComponent(_xcSession);
			OrderDbAccessorComponent =  new OrderDbAccessorComponent(_xcSession);
			OrderManagementSystemComponent =  new OrderManagementSystemComponent(_xcSession);
			PricerComponent =  new PricerComponent(_xcSession);
			ReferentialComponent =  new ReferentialComponent(_xcSession);
			ReferentialFeedSourceComponent =  new ReferentialFeedSourceComponent(_xcSession);
			ReportsManagerComponent =  new ReportsManagerComponent(_xcSession);
			ResearchComponent =  new ResearchComponent(_xcSession);
			UserManagementComponent =  new UserManagementComponent(_xcSession);
			XcAppMetricsPublisherComponent =  new XcAppMetricsPublisherComponent(_xcSession);
	

			var subscriber = _xcSession.CreateSubscriber();
			subscriber.Subscribe("CheckOrder","CheckOrder_CheckComponent",CheckOrderComponent.CheckOrder_CheckComponentStateMachine.OnCheckComponentInstanceUpdated);
			subscriber.Subscribe("ExchangeManager","ExchangeManager_ExchangeManager",ExchangeManagerComponent.ExchangeManager_ExchangeManagerStateMachine.OnExchangeManagerInstanceUpdated);
			subscriber.Subscribe("ExchangeManager","ExchangeManager_Exchange",ExchangeManagerComponent.ExchangeManager_ExchangeStateMachine.OnExchangeInstanceUpdated);
			subscriber.Subscribe("ExchangeManager","ExchangeManager_ExchangeOpening",ExchangeManagerComponent.ExchangeManager_ExchangeOpeningStateMachine.OnExchangeOpeningInstanceUpdated);
			subscriber.Subscribe("ExchangeManager","ExchangeManager_Error",ExchangeManagerComponent.ExchangeManager_ErrorStateMachine.OnErrorInstanceUpdated);
			subscriber.Subscribe("ExchangeManager","ExchangeManager_ExchangeError",ExchangeManagerComponent.ExchangeManager_ExchangeErrorStateMachine.OnExchangeErrorInstanceUpdated);
			subscriber.Subscribe("ExchangeManager","ExchangeManager_ExchangeLoading",ExchangeManagerComponent.ExchangeManager_ExchangeLoadingStateMachine.OnExchangeLoadingInstanceUpdated);
			subscriber.Subscribe("ExchangeManager","ExchangeManager_TimeZone",ExchangeManagerComponent.ExchangeManager_TimeZoneStateMachine.OnTimeZoneInstanceUpdated);
			subscriber.Subscribe("ExchangeManager","ExchangeManager_ExchangeDisabling",ExchangeManagerComponent.ExchangeManager_ExchangeDisablingStateMachine.OnExchangeDisablingInstanceUpdated);
			subscriber.Subscribe("ExchangeManager","ExchangeManager_ExchangeMidnight",ExchangeManagerComponent.ExchangeManager_ExchangeMidnightStateMachine.OnExchangeMidnightInstanceUpdated);
			subscriber.Subscribe("FeedSource","FeedSource_FeedManager",FeedSourceComponent.FeedSource_FeedManagerStateMachine.OnFeedManagerInstanceUpdated);
			subscriber.Subscribe("FeedSource","FeedSource_Gateway",FeedSourceComponent.FeedSource_GatewayStateMachine.OnGatewayInstanceUpdated);
			subscriber.Subscribe("FeedSource","FeedSource_Feed",FeedSourceComponent.FeedSource_FeedStateMachine.OnFeedInstanceUpdated);
			subscriber.Subscribe("FeedSource","FeedSource_DataSubscription",FeedSourceComponent.FeedSource_DataSubscriptionStateMachine.OnDataSubscriptionInstanceUpdated);
			subscriber.Subscribe("FeedSource","FeedSource_FeedSnapshot",FeedSourceComponent.FeedSource_FeedSnapshotStateMachine.OnFeedSnapshotInstanceUpdated);
			subscriber.Subscribe("FeedSource","FeedSource_DataSubscriptionDenial",FeedSourceComponent.FeedSource_DataSubscriptionDenialStateMachine.OnDataSubscriptionDenialInstanceUpdated);
			subscriber.Subscribe("OrderDbAccessor","OrderDbAccessor_OrderSnapshot",OrderDbAccessorComponent.OrderDbAccessor_OrderSnapshotStateMachine.OnOrderSnapshotInstanceUpdated);
			subscriber.Subscribe("OrderDbAccessor","OrderDbAccessor_TradeSnapshot",OrderDbAccessorComponent.OrderDbAccessor_TradeSnapshotStateMachine.OnTradeSnapshotInstanceUpdated);
			subscriber.Subscribe("OrderDbAccessor","OrderDbAccessor_NewTradeAvailable",OrderDbAccessorComponent.OrderDbAccessor_NewTradeAvailableStateMachine.OnNewTradeAvailableInstanceUpdated);
			subscriber.Subscribe("OrderDbAccessor","OrderDbAccessor_OrdersTradesSnapshot",OrderDbAccessorComponent.OrderDbAccessor_OrdersTradesSnapshotStateMachine.OnOrdersTradesSnapshotInstanceUpdated);
			subscriber.Subscribe("OrderManagementSystem","OrderManagementSystem_OrderManagementSystem",OrderManagementSystemComponent.OrderManagementSystem_OrderManagementSystemStateMachine.OnOrderManagementSystemInstanceUpdated);
			subscriber.Subscribe("OrderManagementSystem","OrderManagementSystem_Trade",OrderManagementSystemComponent.OrderManagementSystem_TradeStateMachine.OnTradeInstanceUpdated);
			subscriber.Subscribe("OrderManagementSystem","OrderManagementSystem_Order",OrderManagementSystemComponent.OrderManagementSystem_OrderStateMachine.OnOrderInstanceUpdated);
			subscriber.Subscribe("OrderManagementSystem","OrderManagementSystem_ExchangeMidnightListener",OrderManagementSystemComponent.OrderManagementSystem_ExchangeMidnightListenerStateMachine.OnExchangeMidnightListenerInstanceUpdated);
			subscriber.Subscribe("Pricer","Pricer_Calculation",PricerComponent.Pricer_CalculationStateMachine.OnCalculationInstanceUpdated);
			subscriber.Subscribe("Pricer","Pricer_DetailedCalculation",PricerComponent.Pricer_DetailedCalculationStateMachine.OnDetailedCalculationInstanceUpdated);
			subscriber.Subscribe("Referential","Referential_Referential",ReferentialComponent.Referential_ReferentialStateMachine.OnReferentialInstanceUpdated);
			subscriber.Subscribe("Referential","Referential_FinancialInstrument",ReferentialComponent.Referential_FinancialInstrumentStateMachine.OnFinancialInstrumentInstanceUpdated);
			subscriber.Subscribe("Referential","Referential_InstrumentRequest",ReferentialComponent.Referential_InstrumentRequestStateMachine.OnInstrumentRequestInstanceUpdated);
			subscriber.Subscribe("Referential","Referential_CustomInstrumentRequest",ReferentialComponent.Referential_CustomInstrumentRequestStateMachine.OnCustomInstrumentRequestInstanceUpdated);
			subscriber.Subscribe("Referential","Referential_ExchangeReferentialImport",ReferentialComponent.Referential_ExchangeReferentialImportStateMachine.OnExchangeReferentialImportInstanceUpdated);
			subscriber.Subscribe("Referential","Referential_ExchangeImportError",ReferentialComponent.Referential_ExchangeImportErrorStateMachine.OnExchangeImportErrorInstanceUpdated);
			subscriber.Subscribe("Referential","Referential_QuickSearch",ReferentialComponent.Referential_QuickSearchStateMachine.OnQuickSearchInstanceUpdated);
			subscriber.Subscribe("Referential","Referential_ImportManager",ReferentialComponent.Referential_ImportManagerStateMachine.OnImportManagerInstanceUpdated);
			subscriber.Subscribe("ReferentialFeedSource","ReferentialFeedSource_ReferentialFeedManager",ReferentialFeedSourceComponent.ReferentialFeedSource_ReferentialFeedManagerStateMachine.OnReferentialFeedManagerInstanceUpdated);
			subscriber.Subscribe("ReferentialFeedSource","ReferentialFeedSource_HeartBeatRequest",ReferentialFeedSourceComponent.ReferentialFeedSource_HeartBeatRequestStateMachine.OnHeartBeatRequestInstanceUpdated);
			subscriber.Subscribe("ReferentialFeedSource","ReferentialFeedSource_FeedSourceOrchestrator",ReferentialFeedSourceComponent.ReferentialFeedSource_FeedSourceOrchestratorStateMachine.OnFeedSourceOrchestratorInstanceUpdated);
			subscriber.Subscribe("ReferentialFeedSource","ReferentialFeedSource_ReferentialFeed",ReferentialFeedSourceComponent.ReferentialFeedSource_ReferentialFeedStateMachine.OnReferentialFeedInstanceUpdated);
			subscriber.Subscribe("ReferentialFeedSource","ReferentialFeedSource_ShutDownTimer",ReferentialFeedSourceComponent.ReferentialFeedSource_ShutDownTimerStateMachine.OnShutDownTimerInstanceUpdated);
			subscriber.Subscribe("Research","Research_ResearchCache",ResearchComponent.Research_ResearchCacheStateMachine.OnResearchCacheInstanceUpdated);
			subscriber.Subscribe("Research","Research_ResearchEntity",ResearchComponent.Research_ResearchEntityStateMachine.OnResearchEntityInstanceUpdated);
			subscriber.Subscribe("Research","Research_ResearchDocument",ResearchComponent.Research_ResearchDocumentStateMachine.OnResearchDocumentInstanceUpdated);
			subscriber.Subscribe("Research","Research_CacheUpdater",ResearchComponent.Research_CacheUpdaterStateMachine.OnCacheUpdaterInstanceUpdated);
			subscriber.Subscribe("Research","Research_ResearchQuery",ResearchComponent.Research_ResearchQueryStateMachine.OnResearchQueryInstanceUpdated);
			subscriber.Subscribe("Research","Research_ResearchSuggestQuery",ResearchComponent.Research_ResearchSuggestQueryStateMachine.OnResearchSuggestQueryInstanceUpdated);
			subscriber.Subscribe("Research","Research_ResearchSettings",ResearchComponent.Research_ResearchSettingsStateMachine.OnResearchSettingsInstanceUpdated);
			subscriber.Subscribe("UserManagement","UserManagement_UserManagement",UserManagementComponent.UserManagement_UserManagementStateMachine.OnUserManagementInstanceUpdated);
			subscriber.Subscribe("UserManagement","UserManagement_UserSession",UserManagementComponent.UserManagement_UserSessionStateMachine.OnUserSessionInstanceUpdated);
			subscriber.Subscribe("UserManagement","UserManagement_GetRight",UserManagementComponent.UserManagement_GetRightStateMachine.OnGetRightInstanceUpdated);
			subscriber.Subscribe("UserManagement","UserManagement_CachedPermissionChecker",UserManagementComponent.UserManagement_CachedPermissionCheckerStateMachine.OnCachedPermissionCheckerInstanceUpdated);
			subscriber.Subscribe("UserManagement","UserManagement_ChangePassword",UserManagementComponent.UserManagement_ChangePasswordStateMachine.OnChangePasswordInstanceUpdated);
			subscriber.Subscribe("UserManagement","UserManagement_UserEntityInfo",UserManagementComponent.UserManagement_UserEntityInfoStateMachine.OnUserEntityInfoInstanceUpdated);
			subscriber.Subscribe("UserManagement","UserManagement_BackendInfo",UserManagementComponent.UserManagement_BackendInfoStateMachine.OnBackendInfoInstanceUpdated);
		}
	}		
	
	
	public interface ICheckOrderComponent 
	{
		CheckOrder_CheckComponentStateMachine CheckOrder_CheckComponentStateMachine { get; set; }
	}
	
	public interface IExchangeManagerComponent 
	{
		ExchangeManager_ExchangeManagerStateMachine ExchangeManager_ExchangeManagerStateMachine { get; set; }
		ExchangeManager_ExchangeStateMachine ExchangeManager_ExchangeStateMachine { get; set; }
		ExchangeManager_ExchangeOpeningStateMachine ExchangeManager_ExchangeOpeningStateMachine { get; set; }
		ExchangeManager_ErrorStateMachine ExchangeManager_ErrorStateMachine { get; set; }
		ExchangeManager_ExchangeErrorStateMachine ExchangeManager_ExchangeErrorStateMachine { get; set; }
		ExchangeManager_ExchangeLoadingStateMachine ExchangeManager_ExchangeLoadingStateMachine { get; set; }
		ExchangeManager_TimeZoneStateMachine ExchangeManager_TimeZoneStateMachine { get; set; }
		ExchangeManager_ExchangeDisablingStateMachine ExchangeManager_ExchangeDisablingStateMachine { get; set; }
		ExchangeManager_ExchangeMidnightStateMachine ExchangeManager_ExchangeMidnightStateMachine { get; set; }
	}
	
	public interface IFeedSourceComponent 
	{
		FeedSource_FeedManagerStateMachine FeedSource_FeedManagerStateMachine { get; set; }
		FeedSource_GatewayStateMachine FeedSource_GatewayStateMachine { get; set; }
		FeedSource_FeedStateMachine FeedSource_FeedStateMachine { get; set; }
		FeedSource_DataSubscriptionStateMachine FeedSource_DataSubscriptionStateMachine { get; set; }
		FeedSource_FeedSnapshotStateMachine FeedSource_FeedSnapshotStateMachine { get; set; }
		FeedSource_DataSubscriptionDenialStateMachine FeedSource_DataSubscriptionDenialStateMachine { get; set; }
	}
	
	public interface IOrderDbAccessorComponent 
	{
		OrderDbAccessor_OrderSnapshotStateMachine OrderDbAccessor_OrderSnapshotStateMachine { get; set; }
		OrderDbAccessor_TradeSnapshotStateMachine OrderDbAccessor_TradeSnapshotStateMachine { get; set; }
		OrderDbAccessor_NewTradeAvailableStateMachine OrderDbAccessor_NewTradeAvailableStateMachine { get; set; }
		OrderDbAccessor_OrdersTradesSnapshotStateMachine OrderDbAccessor_OrdersTradesSnapshotStateMachine { get; set; }
	}
	
	public interface IOrderManagementSystemComponent 
	{
		OrderManagementSystem_OrderManagementSystemStateMachine OrderManagementSystem_OrderManagementSystemStateMachine { get; set; }
		OrderManagementSystem_TradeStateMachine OrderManagementSystem_TradeStateMachine { get; set; }
		OrderManagementSystem_OrderStateMachine OrderManagementSystem_OrderStateMachine { get; set; }
		OrderManagementSystem_ExchangeMidnightListenerStateMachine OrderManagementSystem_ExchangeMidnightListenerStateMachine { get; set; }
	}
	
	public interface IPricerComponent 
	{
		Pricer_CalculationStateMachine Pricer_CalculationStateMachine { get; set; }
		Pricer_DetailedCalculationStateMachine Pricer_DetailedCalculationStateMachine { get; set; }
	}
	
	public interface IReferentialComponent 
	{
		Referential_ReferentialStateMachine Referential_ReferentialStateMachine { get; set; }
		Referential_FinancialInstrumentStateMachine Referential_FinancialInstrumentStateMachine { get; set; }
		Referential_InstrumentRequestStateMachine Referential_InstrumentRequestStateMachine { get; set; }
		Referential_CustomInstrumentRequestStateMachine Referential_CustomInstrumentRequestStateMachine { get; set; }
		Referential_ExchangeReferentialImportStateMachine Referential_ExchangeReferentialImportStateMachine { get; set; }
		Referential_ExchangeImportErrorStateMachine Referential_ExchangeImportErrorStateMachine { get; set; }
		Referential_QuickSearchStateMachine Referential_QuickSearchStateMachine { get; set; }
		Referential_ImportManagerStateMachine Referential_ImportManagerStateMachine { get; set; }
	}
	
	public interface IReferentialFeedSourceComponent 
	{
		ReferentialFeedSource_ReferentialFeedManagerStateMachine ReferentialFeedSource_ReferentialFeedManagerStateMachine { get; set; }
		ReferentialFeedSource_HeartBeatRequestStateMachine ReferentialFeedSource_HeartBeatRequestStateMachine { get; set; }
		ReferentialFeedSource_FeedSourceOrchestratorStateMachine ReferentialFeedSource_FeedSourceOrchestratorStateMachine { get; set; }
		ReferentialFeedSource_ReferentialFeedStateMachine ReferentialFeedSource_ReferentialFeedStateMachine { get; set; }
		ReferentialFeedSource_ShutDownTimerStateMachine ReferentialFeedSource_ShutDownTimerStateMachine { get; set; }
	}
	
	public interface IReportsManagerComponent 
	{
	}
	
	public interface IResearchComponent 
	{
		Research_ResearchCacheStateMachine Research_ResearchCacheStateMachine { get; set; }
		Research_ResearchEntityStateMachine Research_ResearchEntityStateMachine { get; set; }
		Research_ResearchDocumentStateMachine Research_ResearchDocumentStateMachine { get; set; }
		Research_CacheUpdaterStateMachine Research_CacheUpdaterStateMachine { get; set; }
		Research_ResearchQueryStateMachine Research_ResearchQueryStateMachine { get; set; }
		Research_ResearchSuggestQueryStateMachine Research_ResearchSuggestQueryStateMachine { get; set; }
		Research_ResearchSettingsStateMachine Research_ResearchSettingsStateMachine { get; set; }
	}
	
	public interface IUserManagementComponent 
	{
		UserManagement_UserManagementStateMachine UserManagement_UserManagementStateMachine { get; set; }
		UserManagement_UserSessionStateMachine UserManagement_UserSessionStateMachine { get; set; }
		UserManagement_GetRightStateMachine UserManagement_GetRightStateMachine { get; set; }
		UserManagement_CachedPermissionCheckerStateMachine UserManagement_CachedPermissionCheckerStateMachine { get; set; }
		UserManagement_ChangePasswordStateMachine UserManagement_ChangePasswordStateMachine { get; set; }
		UserManagement_UserEntityInfoStateMachine UserManagement_UserEntityInfoStateMachine { get; set; }
		UserManagement_BackendInfoStateMachine UserManagement_BackendInfoStateMachine { get; set; }
	}
	
	public interface IXcAppMetricsPublisherComponent 
	{
	}
	
	public class CheckOrderComponent : ICheckOrderComponent 
	{
		public CheckOrder_CheckComponentStateMachine CheckOrder_CheckComponentStateMachine { get; set; }

		public CheckOrderComponent(IXCSession xcSession)
		{
			var publisher = xcSession.CreatePublisher("CheckOrder"); 
			CheckOrder_CheckComponentStateMachine = new CheckOrder_CheckComponentStateMachine(publisher);
		}
	}
	
	public class ExchangeManagerComponent : IExchangeManagerComponent 
	{
		public ExchangeManager_ExchangeManagerStateMachine ExchangeManager_ExchangeManagerStateMachine { get; set; }
		public ExchangeManager_ExchangeStateMachine ExchangeManager_ExchangeStateMachine { get; set; }
		public ExchangeManager_ExchangeOpeningStateMachine ExchangeManager_ExchangeOpeningStateMachine { get; set; }
		public ExchangeManager_ErrorStateMachine ExchangeManager_ErrorStateMachine { get; set; }
		public ExchangeManager_ExchangeErrorStateMachine ExchangeManager_ExchangeErrorStateMachine { get; set; }
		public ExchangeManager_ExchangeLoadingStateMachine ExchangeManager_ExchangeLoadingStateMachine { get; set; }
		public ExchangeManager_TimeZoneStateMachine ExchangeManager_TimeZoneStateMachine { get; set; }
		public ExchangeManager_ExchangeDisablingStateMachine ExchangeManager_ExchangeDisablingStateMachine { get; set; }
		public ExchangeManager_ExchangeMidnightStateMachine ExchangeManager_ExchangeMidnightStateMachine { get; set; }

		public ExchangeManagerComponent(IXCSession xcSession)
		{
			var publisher = xcSession.CreatePublisher("ExchangeManager"); 
			ExchangeManager_ExchangeManagerStateMachine = new ExchangeManager_ExchangeManagerStateMachine(publisher);
			ExchangeManager_ExchangeStateMachine = new ExchangeManager_ExchangeStateMachine(publisher);
			ExchangeManager_ExchangeOpeningStateMachine = new ExchangeManager_ExchangeOpeningStateMachine(publisher);
			ExchangeManager_ErrorStateMachine = new ExchangeManager_ErrorStateMachine(publisher);
			ExchangeManager_ExchangeErrorStateMachine = new ExchangeManager_ExchangeErrorStateMachine(publisher);
			ExchangeManager_ExchangeLoadingStateMachine = new ExchangeManager_ExchangeLoadingStateMachine(publisher);
			ExchangeManager_TimeZoneStateMachine = new ExchangeManager_TimeZoneStateMachine(publisher);
			ExchangeManager_ExchangeDisablingStateMachine = new ExchangeManager_ExchangeDisablingStateMachine(publisher);
			ExchangeManager_ExchangeMidnightStateMachine = new ExchangeManager_ExchangeMidnightStateMachine(publisher);
		}
	}
	
	public class FeedSourceComponent : IFeedSourceComponent 
	{
		public FeedSource_FeedManagerStateMachine FeedSource_FeedManagerStateMachine { get; set; }
		public FeedSource_GatewayStateMachine FeedSource_GatewayStateMachine { get; set; }
		public FeedSource_FeedStateMachine FeedSource_FeedStateMachine { get; set; }
		public FeedSource_DataSubscriptionStateMachine FeedSource_DataSubscriptionStateMachine { get; set; }
		public FeedSource_FeedSnapshotStateMachine FeedSource_FeedSnapshotStateMachine { get; set; }
		public FeedSource_DataSubscriptionDenialStateMachine FeedSource_DataSubscriptionDenialStateMachine { get; set; }

		public FeedSourceComponent(IXCSession xcSession)
		{
			var publisher = xcSession.CreatePublisher("FeedSource"); 
			FeedSource_FeedManagerStateMachine = new FeedSource_FeedManagerStateMachine(publisher);
			FeedSource_GatewayStateMachine = new FeedSource_GatewayStateMachine(publisher);
			FeedSource_FeedStateMachine = new FeedSource_FeedStateMachine(publisher);
			FeedSource_DataSubscriptionStateMachine = new FeedSource_DataSubscriptionStateMachine(publisher);
			FeedSource_FeedSnapshotStateMachine = new FeedSource_FeedSnapshotStateMachine(publisher);
			FeedSource_DataSubscriptionDenialStateMachine = new FeedSource_DataSubscriptionDenialStateMachine(publisher);
		}
	}
	
	public class OrderDbAccessorComponent : IOrderDbAccessorComponent 
	{
		public OrderDbAccessor_OrderSnapshotStateMachine OrderDbAccessor_OrderSnapshotStateMachine { get; set; }
		public OrderDbAccessor_TradeSnapshotStateMachine OrderDbAccessor_TradeSnapshotStateMachine { get; set; }
		public OrderDbAccessor_NewTradeAvailableStateMachine OrderDbAccessor_NewTradeAvailableStateMachine { get; set; }
		public OrderDbAccessor_OrdersTradesSnapshotStateMachine OrderDbAccessor_OrdersTradesSnapshotStateMachine { get; set; }

		public OrderDbAccessorComponent(IXCSession xcSession)
		{
			var publisher = xcSession.CreatePublisher("OrderDbAccessor"); 
			OrderDbAccessor_OrderSnapshotStateMachine = new OrderDbAccessor_OrderSnapshotStateMachine(publisher);
			OrderDbAccessor_TradeSnapshotStateMachine = new OrderDbAccessor_TradeSnapshotStateMachine(publisher);
			OrderDbAccessor_NewTradeAvailableStateMachine = new OrderDbAccessor_NewTradeAvailableStateMachine(publisher);
			OrderDbAccessor_OrdersTradesSnapshotStateMachine = new OrderDbAccessor_OrdersTradesSnapshotStateMachine(publisher);
		}
	}
	
	public class OrderManagementSystemComponent : IOrderManagementSystemComponent 
	{
		public OrderManagementSystem_OrderManagementSystemStateMachine OrderManagementSystem_OrderManagementSystemStateMachine { get; set; }
		public OrderManagementSystem_TradeStateMachine OrderManagementSystem_TradeStateMachine { get; set; }
		public OrderManagementSystem_OrderStateMachine OrderManagementSystem_OrderStateMachine { get; set; }
		public OrderManagementSystem_ExchangeMidnightListenerStateMachine OrderManagementSystem_ExchangeMidnightListenerStateMachine { get; set; }

		public OrderManagementSystemComponent(IXCSession xcSession)
		{
			var publisher = xcSession.CreatePublisher("OrderManagementSystem"); 
			OrderManagementSystem_OrderManagementSystemStateMachine = new OrderManagementSystem_OrderManagementSystemStateMachine(publisher);
			OrderManagementSystem_TradeStateMachine = new OrderManagementSystem_TradeStateMachine(publisher);
			OrderManagementSystem_OrderStateMachine = new OrderManagementSystem_OrderStateMachine(publisher);
			OrderManagementSystem_ExchangeMidnightListenerStateMachine = new OrderManagementSystem_ExchangeMidnightListenerStateMachine(publisher);
		}
	}
	
	public class PricerComponent : IPricerComponent 
	{
		public Pricer_CalculationStateMachine Pricer_CalculationStateMachine { get; set; }
		public Pricer_DetailedCalculationStateMachine Pricer_DetailedCalculationStateMachine { get; set; }

		public PricerComponent(IXCSession xcSession)
		{
			var publisher = xcSession.CreatePublisher("Pricer"); 
			Pricer_CalculationStateMachine = new Pricer_CalculationStateMachine(publisher);
			Pricer_DetailedCalculationStateMachine = new Pricer_DetailedCalculationStateMachine(publisher);
		}
	}
	
	public class ReferentialComponent : IReferentialComponent 
	{
		public Referential_ReferentialStateMachine Referential_ReferentialStateMachine { get; set; }
		public Referential_FinancialInstrumentStateMachine Referential_FinancialInstrumentStateMachine { get; set; }
		public Referential_InstrumentRequestStateMachine Referential_InstrumentRequestStateMachine { get; set; }
		public Referential_CustomInstrumentRequestStateMachine Referential_CustomInstrumentRequestStateMachine { get; set; }
		public Referential_ExchangeReferentialImportStateMachine Referential_ExchangeReferentialImportStateMachine { get; set; }
		public Referential_ExchangeImportErrorStateMachine Referential_ExchangeImportErrorStateMachine { get; set; }
		public Referential_QuickSearchStateMachine Referential_QuickSearchStateMachine { get; set; }
		public Referential_ImportManagerStateMachine Referential_ImportManagerStateMachine { get; set; }

		public ReferentialComponent(IXCSession xcSession)
		{
			var publisher = xcSession.CreatePublisher("Referential"); 
			Referential_ReferentialStateMachine = new Referential_ReferentialStateMachine(publisher);
			Referential_FinancialInstrumentStateMachine = new Referential_FinancialInstrumentStateMachine(publisher);
			Referential_InstrumentRequestStateMachine = new Referential_InstrumentRequestStateMachine(publisher);
			Referential_CustomInstrumentRequestStateMachine = new Referential_CustomInstrumentRequestStateMachine(publisher);
			Referential_ExchangeReferentialImportStateMachine = new Referential_ExchangeReferentialImportStateMachine(publisher);
			Referential_ExchangeImportErrorStateMachine = new Referential_ExchangeImportErrorStateMachine(publisher);
			Referential_QuickSearchStateMachine = new Referential_QuickSearchStateMachine(publisher);
			Referential_ImportManagerStateMachine = new Referential_ImportManagerStateMachine(publisher);
		}
	}
	
	public class ReferentialFeedSourceComponent : IReferentialFeedSourceComponent 
	{
		public ReferentialFeedSource_ReferentialFeedManagerStateMachine ReferentialFeedSource_ReferentialFeedManagerStateMachine { get; set; }
		public ReferentialFeedSource_HeartBeatRequestStateMachine ReferentialFeedSource_HeartBeatRequestStateMachine { get; set; }
		public ReferentialFeedSource_FeedSourceOrchestratorStateMachine ReferentialFeedSource_FeedSourceOrchestratorStateMachine { get; set; }
		public ReferentialFeedSource_ReferentialFeedStateMachine ReferentialFeedSource_ReferentialFeedStateMachine { get; set; }
		public ReferentialFeedSource_ShutDownTimerStateMachine ReferentialFeedSource_ShutDownTimerStateMachine { get; set; }

		public ReferentialFeedSourceComponent(IXCSession xcSession)
		{
			var publisher = xcSession.CreatePublisher("ReferentialFeedSource"); 
			ReferentialFeedSource_ReferentialFeedManagerStateMachine = new ReferentialFeedSource_ReferentialFeedManagerStateMachine(publisher);
			ReferentialFeedSource_HeartBeatRequestStateMachine = new ReferentialFeedSource_HeartBeatRequestStateMachine(publisher);
			ReferentialFeedSource_FeedSourceOrchestratorStateMachine = new ReferentialFeedSource_FeedSourceOrchestratorStateMachine(publisher);
			ReferentialFeedSource_ReferentialFeedStateMachine = new ReferentialFeedSource_ReferentialFeedStateMachine(publisher);
			ReferentialFeedSource_ShutDownTimerStateMachine = new ReferentialFeedSource_ShutDownTimerStateMachine(publisher);
		}
	}
	
	public class ReportsManagerComponent : IReportsManagerComponent 
	{

		public ReportsManagerComponent(IXCSession xcSession)
		{
			var publisher = xcSession.CreatePublisher("ReportsManager"); 
		}
	}
	
	public class ResearchComponent : IResearchComponent 
	{
		public Research_ResearchCacheStateMachine Research_ResearchCacheStateMachine { get; set; }
		public Research_ResearchEntityStateMachine Research_ResearchEntityStateMachine { get; set; }
		public Research_ResearchDocumentStateMachine Research_ResearchDocumentStateMachine { get; set; }
		public Research_CacheUpdaterStateMachine Research_CacheUpdaterStateMachine { get; set; }
		public Research_ResearchQueryStateMachine Research_ResearchQueryStateMachine { get; set; }
		public Research_ResearchSuggestQueryStateMachine Research_ResearchSuggestQueryStateMachine { get; set; }
		public Research_ResearchSettingsStateMachine Research_ResearchSettingsStateMachine { get; set; }

		public ResearchComponent(IXCSession xcSession)
		{
			var publisher = xcSession.CreatePublisher("Research"); 
			Research_ResearchCacheStateMachine = new Research_ResearchCacheStateMachine(publisher);
			Research_ResearchEntityStateMachine = new Research_ResearchEntityStateMachine(publisher);
			Research_ResearchDocumentStateMachine = new Research_ResearchDocumentStateMachine(publisher);
			Research_CacheUpdaterStateMachine = new Research_CacheUpdaterStateMachine(publisher);
			Research_ResearchQueryStateMachine = new Research_ResearchQueryStateMachine(publisher);
			Research_ResearchSuggestQueryStateMachine = new Research_ResearchSuggestQueryStateMachine(publisher);
			Research_ResearchSettingsStateMachine = new Research_ResearchSettingsStateMachine(publisher);
		}
	}
	
	public class UserManagementComponent : IUserManagementComponent 
	{
		public UserManagement_UserManagementStateMachine UserManagement_UserManagementStateMachine { get; set; }
		public UserManagement_UserSessionStateMachine UserManagement_UserSessionStateMachine { get; set; }
		public UserManagement_GetRightStateMachine UserManagement_GetRightStateMachine { get; set; }
		public UserManagement_CachedPermissionCheckerStateMachine UserManagement_CachedPermissionCheckerStateMachine { get; set; }
		public UserManagement_ChangePasswordStateMachine UserManagement_ChangePasswordStateMachine { get; set; }
		public UserManagement_UserEntityInfoStateMachine UserManagement_UserEntityInfoStateMachine { get; set; }
		public UserManagement_BackendInfoStateMachine UserManagement_BackendInfoStateMachine { get; set; }

		public UserManagementComponent(IXCSession xcSession)
		{
			var publisher = xcSession.CreatePublisher("UserManagement"); 
			UserManagement_UserManagementStateMachine = new UserManagement_UserManagementStateMachine(publisher);
			UserManagement_UserSessionStateMachine = new UserManagement_UserSessionStateMachine(publisher);
			UserManagement_GetRightStateMachine = new UserManagement_GetRightStateMachine(publisher);
			UserManagement_CachedPermissionCheckerStateMachine = new UserManagement_CachedPermissionCheckerStateMachine(publisher);
			UserManagement_ChangePasswordStateMachine = new UserManagement_ChangePasswordStateMachine(publisher);
			UserManagement_UserEntityInfoStateMachine = new UserManagement_UserEntityInfoStateMachine(publisher);
			UserManagement_BackendInfoStateMachine = new UserManagement_BackendInfoStateMachine(publisher);
		}
	}
	
	public class XcAppMetricsPublisherComponent : IXcAppMetricsPublisherComponent 
	{

		public XcAppMetricsPublisherComponent(IXCSession xcSession)
		{
			var publisher = xcSession.CreatePublisher("XcAppMetricsPublisher"); 
		}
	}
	
	public interface ICheckOrder_CheckComponentStateMachine 
	{
	
		event System.Action<XComponent.CheckOrder.CheckComponentNode> CheckComponent;
		void OnCheckComponentInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface ICheckOrder_GenericConnectedRuleStateMachine 
	{
	}
	
	public interface ICheckOrder_ConnectedRuleStateMachine 
	{
	}
	
	public interface ICheckOrder_FeedSubscriptionStateMachine 
	{
	}
	
	public interface ICheckOrder_RuleResultStateMachine 
	{
	}
	
	public interface ICheckOrder_StandardRuleStateMachine 
	{
	}
	
	public interface ICheckOrder_RuleFilterStateMachine 
	{
	}
	
	public interface ICheckOrder_RuleSetStateMachine 
	{
	}
	
	public interface ICheckOrder_OrderLifeStateMachine 
	{
	}
	
	public interface ICheckOrder_RejectOrderStateMachine 
	{
	}
	
	public interface ICheckOrder_AcceptOrderStateMachine 
	{
	}
	
	public interface IExchangeManager_ExchangeManagerStateMachine 
	{
		void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility);
		void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility);
	
		event System.Action<XComponent.ExchangeManager.UserObject.ExchangeManager> ExchangeManager;
		void OnExchangeManagerInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IExchangeManager_ExchangeStateMachine 
	{
		void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility);
		void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility);
	
		event System.Action<PerseusLib.Common.Dto.Referential.ExchangeInfo> Exchange;
		void OnExchangeInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IExchangeManager_ExchangeOpeningStateMachine 
	{
		void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility);
		void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility);
	
		event System.Action<PerseusLib.Common.Dto.Referential.ExchangeInfo> ExchangeOpening;
		void OnExchangeOpeningInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IExchangeManager_ErrorStateMachine 
	{
		void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility);
		void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility);
	
		event System.Action<XComponent.ExchangeManager.UserObject.Error> Error;
		void OnErrorInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IExchangeManager_ReferentialUpQueryStateMachine 
	{
		void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility);
		void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility);
	}
	
	public interface IExchangeManager_RightRequestStateMachine 
	{
		void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility);
		void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility);
	}
	
	public interface IExchangeManager_ExchangeErrorStateMachine 
	{
		void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility);
		void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility);
	
		event System.Action<XComponent.ExchangeManager.UserObject.ExchangeError> ExchangeError;
		void OnExchangeErrorInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IExchangeManager_ExchangeLoadingStateMachine 
	{
		void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility);
		void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility);
	
		event System.Action<PerseusLib.Common.Dto.Referential.ExchangeInfo> ExchangeLoading;
		void OnExchangeLoadingInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IExchangeManager_TimeZoneStateMachine 
	{
		void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility);
		void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility);
	
		event System.Action<PerseusLib.Common.Dto.Referential.TimeZoneDefinition> TimeZone;
		void OnTimeZoneInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IExchangeManager_ExchangeDisablingStateMachine 
	{
		void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility);
		void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility);
	
		event System.Action<PerseusLib.Common.Dto.Referential.ExchangeInfo> ExchangeDisabling;
		void OnExchangeDisablingInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IExchangeManager_ExchangeQueryReplyStateMachine 
	{
		void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility);
		void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility);
	}
	
	public interface IExchangeManager_ExchangeMidnightStateMachine 
	{
		void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility);
		void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility);
	
		event System.Action<PerseusLib.Common.Dto.Referential.ExchangeInfo> ExchangeMidnight;
		void OnExchangeMidnightInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IExchangeManager_MidnightCheckerStateMachine 
	{
		void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility);
		void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility);
	}
	
	public interface IFeedSource_FeedManagerStateMachine 
	{
		void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility);
		void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility);
		void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility);
		void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility);
		void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility);
		void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility);
		void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility);
	
		event System.Action<XComponent.FeedSource.UserObject.FeedManager> FeedManager;
		void OnFeedManagerInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IFeedSource_GatewayStateMachine 
	{
		void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility);
		void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility);
		void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility);
		void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility);
		void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility);
		void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility);
		void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility);
	
		event System.Action<XComponent.FeedSource.UserObject.Gateway> Gateway;
		void OnGatewayInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IFeedSource_FeedStateMachine 
	{
		void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility);
		void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility);
		void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility);
		void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility);
		void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility);
		void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility);
		void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility);
	
		event System.Action<XComponent.FeedSource.UserObject.Feed> Feed;
		void OnFeedInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IFeedSource_DataSubscriptionStateMachine 
	{
		void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility);
		void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility);
		void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility);
		void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility);
		void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility);
		void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility);
		void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility);
	
		event System.Action<XComponent.FeedSource.UserObject.DataSubscription> DataSubscription;
		void OnDataSubscriptionInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IFeedSource_InstrumentQueryStateMachine 
	{
		void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility);
		void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility);
		void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility);
		void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility);
		void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility);
		void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility);
		void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility);
	}
	
	public interface IFeedSource_ReferentialUpQueryStateMachine 
	{
		void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility);
		void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility);
		void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility);
		void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility);
		void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility);
		void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility);
		void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility);
	}
	
	public interface IFeedSource_FeedSnapshotStateMachine 
	{
		void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility);
		void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility);
		void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility);
		void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility);
		void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility);
		void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility);
		void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility);
	
		event System.Action<XComponent.FeedSource.UserObject.FeedSnapshot> FeedSnapshot;
		void OnFeedSnapshotInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IFeedSource_GatewaySettingsStateMachine 
	{
		void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility);
		void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility);
		void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility);
		void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility);
		void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility);
		void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility);
		void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility);
	}
	
	public interface IFeedSource_SubscriptionPreprocessorStateMachine 
	{
		void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility);
		void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility);
		void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility);
		void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility);
		void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility);
		void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility);
		void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility);
	}
	
	public interface IFeedSource_DataSubscriptionDenialStateMachine 
	{
		void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility);
		void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility);
		void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility);
		void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility);
		void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility);
		void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility);
		void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility);
	
		event System.Action<XComponent.FeedSource.UserObject.DataSubscriptionDenial> DataSubscriptionDenial;
		void OnDataSubscriptionDenialInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IFeedSource_RightRequestStateMachine 
	{
		void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility);
		void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility);
		void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility);
		void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility);
		void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility);
		void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility);
		void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility);
	}
	
	public interface IFeedSource_GetSessionRequestStateMachine 
	{
		void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility);
		void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility);
		void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility);
		void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility);
		void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility);
		void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility);
		void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility);
	}
	
	public interface IFeedSource_GetSessionRequestByDbIdStateMachine 
	{
		void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility);
		void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility);
		void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility);
		void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility);
		void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility);
		void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility);
		void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility);
	}
	
	public interface IFeedSource_LoadInstrumentsQueryStateMachine 
	{
		void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility);
		void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility);
		void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility);
		void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility);
		void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility);
		void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility);
		void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility);
	}
	
	public interface IOrderDbAccessor_OrderDbAccessorStateMachine 
	{
		void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility);
		void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility);
		void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility);
		void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility);
		void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility);
		void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility);
		void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility);
		void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility);
		void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility);
		void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility);
		void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility);
	}
	
	public interface IOrderDbAccessor_UpdateOperationErrorStateMachine 
	{
		void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility);
		void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility);
		void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility);
		void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility);
		void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility);
		void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility);
		void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility);
		void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility);
		void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility);
		void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility);
		void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility);
	}
	
	public interface IOrderDbAccessor_OrderSnapshotStateMachine 
	{
		void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility);
		void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility);
		void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility);
		void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility);
		void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility);
		void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility);
		void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility);
		void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility);
		void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility);
		void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility);
		void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility);
	
		event System.Action<XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult> OrderSnapshot;
		void OnOrderSnapshotInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IOrderDbAccessor_OrderSnapshotErrorStateMachine 
	{
		void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility);
		void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility);
		void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility);
		void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility);
		void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility);
		void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility);
		void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility);
		void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility);
		void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility);
		void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility);
		void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility);
	}
	
	public interface IOrderDbAccessor_TradeSnapshotStateMachine 
	{
		void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility);
		void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility);
		void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility);
		void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility);
		void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility);
		void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility);
		void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility);
		void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility);
		void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility);
		void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility);
		void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility);
	
		event System.Action<XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult> TradeSnapshot;
		void OnTradeSnapshotInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IOrderDbAccessor_TradeSnapshotErrorStateMachine 
	{
		void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility);
		void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility);
		void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility);
		void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility);
		void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility);
		void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility);
		void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility);
		void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility);
		void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility);
		void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility);
		void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility);
	}
	
	public interface IOrderDbAccessor_NewTradeAvailableStateMachine 
	{
		void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility);
		void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility);
		void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility);
		void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility);
		void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility);
		void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility);
		void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility);
		void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility);
		void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility);
		void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility);
		void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility);
	
		event System.Action<PerseusLib.Common.Dto.Orders.Trade> NewTradeAvailable;
		void OnNewTradeAvailableInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IOrderDbAccessor_TradeReportGeneratorStateMachine 
	{
		void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility);
		void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility);
		void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility);
		void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility);
		void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility);
		void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility);
		void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility);
		void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility);
		void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility);
		void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility);
		void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility);
	}
	
	public interface IOrderDbAccessor_ReportGenerationErrorStateMachine 
	{
		void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility);
		void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility);
		void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility);
		void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility);
		void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility);
		void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility);
		void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility);
		void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility);
		void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility);
		void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility);
		void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility);
	}
	
	public interface IOrderDbAccessor_GeneratedReportStateMachine 
	{
		void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility);
		void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility);
		void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility);
		void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility);
		void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility);
		void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility);
		void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility);
		void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility);
		void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility);
		void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility);
		void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility);
	}
	
	public interface IOrderDbAccessor_OrdersTradesSnapshotStateMachine 
	{
		void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility);
		void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility);
		void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility);
		void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility);
		void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility);
		void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility);
		void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility);
		void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility);
		void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility);
		void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility);
		void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility);
	
		event System.Action<XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult> OrdersTradesSnapshot;
		void OnOrdersTradesSnapshotInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IOrderManagementSystem_OrderManagementSystemStateMachine 
	{
		void SendRestore(XComponent.OrderManagementSystem.UserObject.Restore obj, Visibility visibility);
		void SendModify(XComponent.OrderManagementSystem.UserObject.Modify obj, Visibility visibility);
		void SendCancelOrder(XComponent.OrderManagementSystem.UserObject.CancelOrder obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendCancellationAcceptance(XComponent.OrderManagementSystem.UserObject.CancellationAcceptance obj, Visibility visibility);
		void SendCancelRequest(XComponent.OrderManagementSystem.UserObject.CancelRequest obj, Visibility visibility);
		void SendPartialExecutionInput(XComponent.OrderManagementSystem.UserObject.PartialExecutionInput obj, Visibility visibility);
		void SendCancelAcked(XComponent.OrderManagementSystem.UserObject.CancelAcked obj, Visibility visibility);
		void SendExecutionInput(XComponent.OrderManagementSystem.UserObject.ExecutionInput obj, Visibility visibility);
		void SendRejectCancel(XComponent.OrderManagementSystem.UserObject.RejectCancel obj, Visibility visibility);
		void SendCreateTrade(XComponent.OrderManagementSystem.UserObject.CreateTrade obj, Visibility visibility);
		void SendExpireOrders(XComponent.OrderManagementSystem.UserObject.ExpireOrders obj, Visibility visibility);
		void SendAcknowledgement(XComponent.OrderManagementSystem.UserObject.Acknowledgement obj, Visibility visibility);
		void SendRejectOrder(XComponent.OrderManagementSystem.UserObject.RejectOrder obj, Visibility visibility);
		void SendRejectModification(XComponent.OrderManagementSystem.UserObject.RejectModification obj, Visibility visibility);
		void SendAcceptModification(XComponent.OrderManagementSystem.UserObject.AcceptModification obj, Visibility visibility);
		void SendModifyAcked(XComponent.OrderManagementSystem.UserObject.ModifyAcked obj, Visibility visibility);
		void SendShutDown(XComponent.OrderManagementSystem.UserObject.ShutDown obj, Visibility visibility);
		void SendCreateExchangeListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeListener obj, Visibility visibility);
		void SendCreateExchangeMidnightListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeMidnightListener obj, Visibility visibility);
		void SendDisconnected(XComponent.OrderManagementSystem.UserObject.Disconnected obj, Visibility visibility);
	
		event System.Action<XComponent.OrderManagementSystem.UserObject.OrderManagementSystem> OrderManagementSystem;
		void OnOrderManagementSystemInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IOrderManagementSystem_TradeStateMachine 
	{
		void SendRestore(XComponent.OrderManagementSystem.UserObject.Restore obj, Visibility visibility);
		void SendModify(XComponent.OrderManagementSystem.UserObject.Modify obj, Visibility visibility);
		void SendCancelOrder(XComponent.OrderManagementSystem.UserObject.CancelOrder obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendCancellationAcceptance(XComponent.OrderManagementSystem.UserObject.CancellationAcceptance obj, Visibility visibility);
		void SendCancelRequest(XComponent.OrderManagementSystem.UserObject.CancelRequest obj, Visibility visibility);
		void SendPartialExecutionInput(XComponent.OrderManagementSystem.UserObject.PartialExecutionInput obj, Visibility visibility);
		void SendCancelAcked(XComponent.OrderManagementSystem.UserObject.CancelAcked obj, Visibility visibility);
		void SendExecutionInput(XComponent.OrderManagementSystem.UserObject.ExecutionInput obj, Visibility visibility);
		void SendRejectCancel(XComponent.OrderManagementSystem.UserObject.RejectCancel obj, Visibility visibility);
		void SendCreateTrade(XComponent.OrderManagementSystem.UserObject.CreateTrade obj, Visibility visibility);
		void SendExpireOrders(XComponent.OrderManagementSystem.UserObject.ExpireOrders obj, Visibility visibility);
		void SendAcknowledgement(XComponent.OrderManagementSystem.UserObject.Acknowledgement obj, Visibility visibility);
		void SendRejectOrder(XComponent.OrderManagementSystem.UserObject.RejectOrder obj, Visibility visibility);
		void SendRejectModification(XComponent.OrderManagementSystem.UserObject.RejectModification obj, Visibility visibility);
		void SendAcceptModification(XComponent.OrderManagementSystem.UserObject.AcceptModification obj, Visibility visibility);
		void SendModifyAcked(XComponent.OrderManagementSystem.UserObject.ModifyAcked obj, Visibility visibility);
		void SendShutDown(XComponent.OrderManagementSystem.UserObject.ShutDown obj, Visibility visibility);
		void SendCreateExchangeListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeListener obj, Visibility visibility);
		void SendCreateExchangeMidnightListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeMidnightListener obj, Visibility visibility);
		void SendDisconnected(XComponent.OrderManagementSystem.UserObject.Disconnected obj, Visibility visibility);
	
		event System.Action<PerseusLib.Common.Dto.Orders.Trade> Trade;
		void OnTradeInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IOrderManagementSystem_OrderStateMachine 
	{
		void SendRestore(XComponent.OrderManagementSystem.UserObject.Restore obj, Visibility visibility);
		void SendModify(XComponent.OrderManagementSystem.UserObject.Modify obj, Visibility visibility);
		void SendCancelOrder(XComponent.OrderManagementSystem.UserObject.CancelOrder obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendCancellationAcceptance(XComponent.OrderManagementSystem.UserObject.CancellationAcceptance obj, Visibility visibility);
		void SendCancelRequest(XComponent.OrderManagementSystem.UserObject.CancelRequest obj, Visibility visibility);
		void SendPartialExecutionInput(XComponent.OrderManagementSystem.UserObject.PartialExecutionInput obj, Visibility visibility);
		void SendCancelAcked(XComponent.OrderManagementSystem.UserObject.CancelAcked obj, Visibility visibility);
		void SendExecutionInput(XComponent.OrderManagementSystem.UserObject.ExecutionInput obj, Visibility visibility);
		void SendRejectCancel(XComponent.OrderManagementSystem.UserObject.RejectCancel obj, Visibility visibility);
		void SendCreateTrade(XComponent.OrderManagementSystem.UserObject.CreateTrade obj, Visibility visibility);
		void SendExpireOrders(XComponent.OrderManagementSystem.UserObject.ExpireOrders obj, Visibility visibility);
		void SendAcknowledgement(XComponent.OrderManagementSystem.UserObject.Acknowledgement obj, Visibility visibility);
		void SendRejectOrder(XComponent.OrderManagementSystem.UserObject.RejectOrder obj, Visibility visibility);
		void SendRejectModification(XComponent.OrderManagementSystem.UserObject.RejectModification obj, Visibility visibility);
		void SendAcceptModification(XComponent.OrderManagementSystem.UserObject.AcceptModification obj, Visibility visibility);
		void SendModifyAcked(XComponent.OrderManagementSystem.UserObject.ModifyAcked obj, Visibility visibility);
		void SendShutDown(XComponent.OrderManagementSystem.UserObject.ShutDown obj, Visibility visibility);
		void SendCreateExchangeListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeListener obj, Visibility visibility);
		void SendCreateExchangeMidnightListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeMidnightListener obj, Visibility visibility);
		void SendDisconnected(XComponent.OrderManagementSystem.UserObject.Disconnected obj, Visibility visibility);
	
		event System.Action<PerseusLib.Common.Dto.Orders.XCOrder> Order;
		void OnOrderInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IOrderManagementSystem_OmsSettingsStateMachine 
	{
		void SendRestore(XComponent.OrderManagementSystem.UserObject.Restore obj, Visibility visibility);
		void SendModify(XComponent.OrderManagementSystem.UserObject.Modify obj, Visibility visibility);
		void SendCancelOrder(XComponent.OrderManagementSystem.UserObject.CancelOrder obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendCancellationAcceptance(XComponent.OrderManagementSystem.UserObject.CancellationAcceptance obj, Visibility visibility);
		void SendCancelRequest(XComponent.OrderManagementSystem.UserObject.CancelRequest obj, Visibility visibility);
		void SendPartialExecutionInput(XComponent.OrderManagementSystem.UserObject.PartialExecutionInput obj, Visibility visibility);
		void SendCancelAcked(XComponent.OrderManagementSystem.UserObject.CancelAcked obj, Visibility visibility);
		void SendExecutionInput(XComponent.OrderManagementSystem.UserObject.ExecutionInput obj, Visibility visibility);
		void SendRejectCancel(XComponent.OrderManagementSystem.UserObject.RejectCancel obj, Visibility visibility);
		void SendCreateTrade(XComponent.OrderManagementSystem.UserObject.CreateTrade obj, Visibility visibility);
		void SendExpireOrders(XComponent.OrderManagementSystem.UserObject.ExpireOrders obj, Visibility visibility);
		void SendAcknowledgement(XComponent.OrderManagementSystem.UserObject.Acknowledgement obj, Visibility visibility);
		void SendRejectOrder(XComponent.OrderManagementSystem.UserObject.RejectOrder obj, Visibility visibility);
		void SendRejectModification(XComponent.OrderManagementSystem.UserObject.RejectModification obj, Visibility visibility);
		void SendAcceptModification(XComponent.OrderManagementSystem.UserObject.AcceptModification obj, Visibility visibility);
		void SendModifyAcked(XComponent.OrderManagementSystem.UserObject.ModifyAcked obj, Visibility visibility);
		void SendShutDown(XComponent.OrderManagementSystem.UserObject.ShutDown obj, Visibility visibility);
		void SendCreateExchangeListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeListener obj, Visibility visibility);
		void SendCreateExchangeMidnightListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeMidnightListener obj, Visibility visibility);
		void SendDisconnected(XComponent.OrderManagementSystem.UserObject.Disconnected obj, Visibility visibility);
	}
	
	public interface IOrderManagementSystem_LoadableOrderStateMachine 
	{
		void SendRestore(XComponent.OrderManagementSystem.UserObject.Restore obj, Visibility visibility);
		void SendModify(XComponent.OrderManagementSystem.UserObject.Modify obj, Visibility visibility);
		void SendCancelOrder(XComponent.OrderManagementSystem.UserObject.CancelOrder obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendCancellationAcceptance(XComponent.OrderManagementSystem.UserObject.CancellationAcceptance obj, Visibility visibility);
		void SendCancelRequest(XComponent.OrderManagementSystem.UserObject.CancelRequest obj, Visibility visibility);
		void SendPartialExecutionInput(XComponent.OrderManagementSystem.UserObject.PartialExecutionInput obj, Visibility visibility);
		void SendCancelAcked(XComponent.OrderManagementSystem.UserObject.CancelAcked obj, Visibility visibility);
		void SendExecutionInput(XComponent.OrderManagementSystem.UserObject.ExecutionInput obj, Visibility visibility);
		void SendRejectCancel(XComponent.OrderManagementSystem.UserObject.RejectCancel obj, Visibility visibility);
		void SendCreateTrade(XComponent.OrderManagementSystem.UserObject.CreateTrade obj, Visibility visibility);
		void SendExpireOrders(XComponent.OrderManagementSystem.UserObject.ExpireOrders obj, Visibility visibility);
		void SendAcknowledgement(XComponent.OrderManagementSystem.UserObject.Acknowledgement obj, Visibility visibility);
		void SendRejectOrder(XComponent.OrderManagementSystem.UserObject.RejectOrder obj, Visibility visibility);
		void SendRejectModification(XComponent.OrderManagementSystem.UserObject.RejectModification obj, Visibility visibility);
		void SendAcceptModification(XComponent.OrderManagementSystem.UserObject.AcceptModification obj, Visibility visibility);
		void SendModifyAcked(XComponent.OrderManagementSystem.UserObject.ModifyAcked obj, Visibility visibility);
		void SendShutDown(XComponent.OrderManagementSystem.UserObject.ShutDown obj, Visibility visibility);
		void SendCreateExchangeListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeListener obj, Visibility visibility);
		void SendCreateExchangeMidnightListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeMidnightListener obj, Visibility visibility);
		void SendDisconnected(XComponent.OrderManagementSystem.UserObject.Disconnected obj, Visibility visibility);
	}
	
	public interface IOrderManagementSystem_OrderLoadNotificationStateMachine 
	{
		void SendRestore(XComponent.OrderManagementSystem.UserObject.Restore obj, Visibility visibility);
		void SendModify(XComponent.OrderManagementSystem.UserObject.Modify obj, Visibility visibility);
		void SendCancelOrder(XComponent.OrderManagementSystem.UserObject.CancelOrder obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendCancellationAcceptance(XComponent.OrderManagementSystem.UserObject.CancellationAcceptance obj, Visibility visibility);
		void SendCancelRequest(XComponent.OrderManagementSystem.UserObject.CancelRequest obj, Visibility visibility);
		void SendPartialExecutionInput(XComponent.OrderManagementSystem.UserObject.PartialExecutionInput obj, Visibility visibility);
		void SendCancelAcked(XComponent.OrderManagementSystem.UserObject.CancelAcked obj, Visibility visibility);
		void SendExecutionInput(XComponent.OrderManagementSystem.UserObject.ExecutionInput obj, Visibility visibility);
		void SendRejectCancel(XComponent.OrderManagementSystem.UserObject.RejectCancel obj, Visibility visibility);
		void SendCreateTrade(XComponent.OrderManagementSystem.UserObject.CreateTrade obj, Visibility visibility);
		void SendExpireOrders(XComponent.OrderManagementSystem.UserObject.ExpireOrders obj, Visibility visibility);
		void SendAcknowledgement(XComponent.OrderManagementSystem.UserObject.Acknowledgement obj, Visibility visibility);
		void SendRejectOrder(XComponent.OrderManagementSystem.UserObject.RejectOrder obj, Visibility visibility);
		void SendRejectModification(XComponent.OrderManagementSystem.UserObject.RejectModification obj, Visibility visibility);
		void SendAcceptModification(XComponent.OrderManagementSystem.UserObject.AcceptModification obj, Visibility visibility);
		void SendModifyAcked(XComponent.OrderManagementSystem.UserObject.ModifyAcked obj, Visibility visibility);
		void SendShutDown(XComponent.OrderManagementSystem.UserObject.ShutDown obj, Visibility visibility);
		void SendCreateExchangeListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeListener obj, Visibility visibility);
		void SendCreateExchangeMidnightListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeMidnightListener obj, Visibility visibility);
		void SendDisconnected(XComponent.OrderManagementSystem.UserObject.Disconnected obj, Visibility visibility);
	}
	
	public interface IOrderManagementSystem_ExchangeListenerStateMachine 
	{
		void SendRestore(XComponent.OrderManagementSystem.UserObject.Restore obj, Visibility visibility);
		void SendModify(XComponent.OrderManagementSystem.UserObject.Modify obj, Visibility visibility);
		void SendCancelOrder(XComponent.OrderManagementSystem.UserObject.CancelOrder obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendCancellationAcceptance(XComponent.OrderManagementSystem.UserObject.CancellationAcceptance obj, Visibility visibility);
		void SendCancelRequest(XComponent.OrderManagementSystem.UserObject.CancelRequest obj, Visibility visibility);
		void SendPartialExecutionInput(XComponent.OrderManagementSystem.UserObject.PartialExecutionInput obj, Visibility visibility);
		void SendCancelAcked(XComponent.OrderManagementSystem.UserObject.CancelAcked obj, Visibility visibility);
		void SendExecutionInput(XComponent.OrderManagementSystem.UserObject.ExecutionInput obj, Visibility visibility);
		void SendRejectCancel(XComponent.OrderManagementSystem.UserObject.RejectCancel obj, Visibility visibility);
		void SendCreateTrade(XComponent.OrderManagementSystem.UserObject.CreateTrade obj, Visibility visibility);
		void SendExpireOrders(XComponent.OrderManagementSystem.UserObject.ExpireOrders obj, Visibility visibility);
		void SendAcknowledgement(XComponent.OrderManagementSystem.UserObject.Acknowledgement obj, Visibility visibility);
		void SendRejectOrder(XComponent.OrderManagementSystem.UserObject.RejectOrder obj, Visibility visibility);
		void SendRejectModification(XComponent.OrderManagementSystem.UserObject.RejectModification obj, Visibility visibility);
		void SendAcceptModification(XComponent.OrderManagementSystem.UserObject.AcceptModification obj, Visibility visibility);
		void SendModifyAcked(XComponent.OrderManagementSystem.UserObject.ModifyAcked obj, Visibility visibility);
		void SendShutDown(XComponent.OrderManagementSystem.UserObject.ShutDown obj, Visibility visibility);
		void SendCreateExchangeListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeListener obj, Visibility visibility);
		void SendCreateExchangeMidnightListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeMidnightListener obj, Visibility visibility);
		void SendDisconnected(XComponent.OrderManagementSystem.UserObject.Disconnected obj, Visibility visibility);
	}
	
	public interface IOrderManagementSystem_ExchangeMidnightListenerStateMachine 
	{
		void SendRestore(XComponent.OrderManagementSystem.UserObject.Restore obj, Visibility visibility);
		void SendModify(XComponent.OrderManagementSystem.UserObject.Modify obj, Visibility visibility);
		void SendCancelOrder(XComponent.OrderManagementSystem.UserObject.CancelOrder obj, Visibility visibility);
		void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility);
		void SendCancellationAcceptance(XComponent.OrderManagementSystem.UserObject.CancellationAcceptance obj, Visibility visibility);
		void SendCancelRequest(XComponent.OrderManagementSystem.UserObject.CancelRequest obj, Visibility visibility);
		void SendPartialExecutionInput(XComponent.OrderManagementSystem.UserObject.PartialExecutionInput obj, Visibility visibility);
		void SendCancelAcked(XComponent.OrderManagementSystem.UserObject.CancelAcked obj, Visibility visibility);
		void SendExecutionInput(XComponent.OrderManagementSystem.UserObject.ExecutionInput obj, Visibility visibility);
		void SendRejectCancel(XComponent.OrderManagementSystem.UserObject.RejectCancel obj, Visibility visibility);
		void SendCreateTrade(XComponent.OrderManagementSystem.UserObject.CreateTrade obj, Visibility visibility);
		void SendExpireOrders(XComponent.OrderManagementSystem.UserObject.ExpireOrders obj, Visibility visibility);
		void SendAcknowledgement(XComponent.OrderManagementSystem.UserObject.Acknowledgement obj, Visibility visibility);
		void SendRejectOrder(XComponent.OrderManagementSystem.UserObject.RejectOrder obj, Visibility visibility);
		void SendRejectModification(XComponent.OrderManagementSystem.UserObject.RejectModification obj, Visibility visibility);
		void SendAcceptModification(XComponent.OrderManagementSystem.UserObject.AcceptModification obj, Visibility visibility);
		void SendModifyAcked(XComponent.OrderManagementSystem.UserObject.ModifyAcked obj, Visibility visibility);
		void SendShutDown(XComponent.OrderManagementSystem.UserObject.ShutDown obj, Visibility visibility);
		void SendCreateExchangeListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeListener obj, Visibility visibility);
		void SendCreateExchangeMidnightListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeMidnightListener obj, Visibility visibility);
		void SendDisconnected(XComponent.OrderManagementSystem.UserObject.Disconnected obj, Visibility visibility);
	
		event System.Action<XComponent.OrderManagementSystem.UserObject.ExchangeMidnightListener> ExchangeMidnightListener;
		void OnExchangeMidnightListenerInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IPricer_PricerStateMachine 
	{
		void SendRequestCalculation(XComponent.Pricer.UserObject.RequestCalculation obj, Visibility visibility);
		void SendRequestDetailedCalculation(XComponent.Pricer.UserObject.RequestDetailedCalculation obj, Visibility visibility);
	}
	
	public interface IPricer_CalculationStateMachine 
	{
		void SendRequestCalculation(XComponent.Pricer.UserObject.RequestCalculation obj, Visibility visibility);
		void SendRequestDetailedCalculation(XComponent.Pricer.UserObject.RequestDetailedCalculation obj, Visibility visibility);
	
		event System.Action<XComponent.Pricer.UserObject.Calculation> Calculation;
		void OnCalculationInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IPricer_DetailedCalculationStateMachine 
	{
		void SendRequestCalculation(XComponent.Pricer.UserObject.RequestCalculation obj, Visibility visibility);
		void SendRequestDetailedCalculation(XComponent.Pricer.UserObject.RequestDetailedCalculation obj, Visibility visibility);
	
		event System.Action<XComponent.Pricer.UserObject.DetailedCalculation> DetailedCalculation;
		void OnDetailedCalculationInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IReferential_ReferentialStateMachine 
	{
		void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility);
		void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility);
		void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility);
		void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility);
		void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility);
		void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility);
		void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility);
		void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility);
		void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility);
		void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility);
		void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility);
		void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility);
		void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility);
		void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility);
		void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility);
		void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility);
		void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility);
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
		void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility);
		void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility);
		void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility);
		void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility);
		void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility);
		void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility);
		void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility);
		void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility);
		void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility);
	
		event System.Action<XComponent.Referential.UserObject.Referential> Referential;
		void OnReferentialInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IReferential_FinancialInstrumentStateMachine 
	{
		void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility);
		void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility);
		void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility);
		void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility);
		void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility);
		void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility);
		void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility);
		void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility);
		void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility);
		void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility);
		void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility);
		void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility);
		void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility);
		void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility);
		void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility);
		void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility);
		void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility);
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
		void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility);
		void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility);
		void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility);
		void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility);
		void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility);
		void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility);
		void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility);
		void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility);
		void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility);
	
		event System.Action<PerseusLib.Common.Dto.Referential.FinancialInstrument> FinancialInstrument;
		void OnFinancialInstrumentInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IReferential_InstrumentRequestStateMachine 
	{
		void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility);
		void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility);
		void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility);
		void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility);
		void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility);
		void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility);
		void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility);
		void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility);
		void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility);
		void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility);
		void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility);
		void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility);
		void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility);
		void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility);
		void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility);
		void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility);
		void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility);
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
		void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility);
		void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility);
		void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility);
		void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility);
		void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility);
		void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility);
		void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility);
		void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility);
		void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility);
	
		event System.Action<XComponent.Referential.UserObject.InstrumentRequest> InstrumentRequest;
		void OnInstrumentRequestInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IReferential_CustomInstrumentRequestStateMachine 
	{
		void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility);
		void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility);
		void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility);
		void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility);
		void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility);
		void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility);
		void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility);
		void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility);
		void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility);
		void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility);
		void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility);
		void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility);
		void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility);
		void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility);
		void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility);
		void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility);
		void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility);
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
		void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility);
		void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility);
		void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility);
		void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility);
		void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility);
		void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility);
		void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility);
		void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility);
		void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility);
	
		event System.Action<XComponent.Referential.UserObject.CustomInstrumentRequestResult> CustomInstrumentRequest;
		void OnCustomInstrumentRequestInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IReferential_ReferentialImportStateMachine 
	{
		void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility);
		void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility);
		void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility);
		void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility);
		void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility);
		void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility);
		void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility);
		void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility);
		void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility);
		void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility);
		void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility);
		void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility);
		void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility);
		void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility);
		void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility);
		void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility);
		void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility);
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
		void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility);
		void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility);
		void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility);
		void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility);
		void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility);
		void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility);
		void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility);
		void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility);
		void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility);
	}
	
	public interface IReferential_ImportSourceErrorStateMachine 
	{
		void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility);
		void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility);
		void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility);
		void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility);
		void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility);
		void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility);
		void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility);
		void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility);
		void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility);
		void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility);
		void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility);
		void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility);
		void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility);
		void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility);
		void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility);
		void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility);
		void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility);
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
		void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility);
		void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility);
		void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility);
		void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility);
		void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility);
		void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility);
		void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility);
		void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility);
		void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility);
	}
	
	public interface IReferential_RightRequestStateMachine 
	{
		void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility);
		void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility);
		void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility);
		void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility);
		void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility);
		void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility);
		void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility);
		void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility);
		void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility);
		void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility);
		void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility);
		void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility);
		void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility);
		void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility);
		void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility);
		void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility);
		void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility);
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
		void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility);
		void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility);
		void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility);
		void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility);
		void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility);
		void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility);
		void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility);
		void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility);
		void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility);
	}
	
	public interface IReferential_ErrorReportStateMachine 
	{
		void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility);
		void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility);
		void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility);
		void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility);
		void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility);
		void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility);
		void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility);
		void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility);
		void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility);
		void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility);
		void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility);
		void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility);
		void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility);
		void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility);
		void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility);
		void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility);
		void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility);
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
		void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility);
		void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility);
		void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility);
		void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility);
		void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility);
		void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility);
		void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility);
		void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility);
		void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility);
	}
	
	public interface IReferential_ExchangeReferentialImportStateMachine 
	{
		void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility);
		void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility);
		void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility);
		void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility);
		void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility);
		void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility);
		void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility);
		void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility);
		void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility);
		void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility);
		void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility);
		void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility);
		void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility);
		void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility);
		void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility);
		void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility);
		void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility);
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
		void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility);
		void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility);
		void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility);
		void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility);
		void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility);
		void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility);
		void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility);
		void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility);
		void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility);
	
		event System.Action<PerseusLib.Common.Dto.Referential.ExchangeReferentialImport> ExchangeReferentialImport;
		void OnExchangeReferentialImportInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IReferential_ReferentialFeedQueryStateMachine 
	{
		void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility);
		void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility);
		void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility);
		void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility);
		void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility);
		void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility);
		void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility);
		void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility);
		void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility);
		void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility);
		void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility);
		void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility);
		void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility);
		void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility);
		void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility);
		void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility);
		void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility);
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
		void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility);
		void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility);
		void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility);
		void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility);
		void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility);
		void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility);
		void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility);
		void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility);
		void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility);
	}
	
	public interface IReferential_ExchangeImportErrorStateMachine 
	{
		void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility);
		void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility);
		void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility);
		void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility);
		void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility);
		void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility);
		void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility);
		void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility);
		void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility);
		void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility);
		void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility);
		void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility);
		void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility);
		void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility);
		void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility);
		void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility);
		void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility);
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
		void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility);
		void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility);
		void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility);
		void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility);
		void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility);
		void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility);
		void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility);
		void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility);
		void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility);
	
		event System.Action<XComponent.Referential.UserObject.MinorError> ExchangeImportError;
		void OnExchangeImportErrorInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IReferential_UserSessionHeartbeatStateMachine 
	{
		void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility);
		void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility);
		void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility);
		void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility);
		void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility);
		void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility);
		void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility);
		void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility);
		void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility);
		void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility);
		void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility);
		void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility);
		void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility);
		void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility);
		void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility);
		void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility);
		void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility);
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
		void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility);
		void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility);
		void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility);
		void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility);
		void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility);
		void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility);
		void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility);
		void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility);
		void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility);
	}
	
	public interface IReferential_UMUpQueryStateMachine 
	{
		void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility);
		void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility);
		void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility);
		void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility);
		void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility);
		void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility);
		void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility);
		void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility);
		void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility);
		void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility);
		void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility);
		void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility);
		void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility);
		void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility);
		void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility);
		void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility);
		void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility);
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
		void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility);
		void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility);
		void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility);
		void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility);
		void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility);
		void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility);
		void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility);
		void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility);
		void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility);
	}
	
	public interface IReferential_OpenSessionQueryStateMachine 
	{
		void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility);
		void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility);
		void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility);
		void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility);
		void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility);
		void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility);
		void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility);
		void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility);
		void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility);
		void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility);
		void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility);
		void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility);
		void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility);
		void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility);
		void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility);
		void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility);
		void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility);
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
		void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility);
		void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility);
		void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility);
		void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility);
		void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility);
		void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility);
		void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility);
		void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility);
		void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility);
	}
	
	public interface IReferential_QuickSearchStateMachine 
	{
		void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility);
		void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility);
		void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility);
		void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility);
		void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility);
		void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility);
		void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility);
		void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility);
		void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility);
		void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility);
		void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility);
		void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility);
		void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility);
		void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility);
		void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility);
		void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility);
		void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility);
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
		void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility);
		void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility);
		void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility);
		void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility);
		void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility);
		void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility);
		void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility);
		void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility);
		void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility);
	
		event System.Action<XComponent.Referential.UserObject.QuickSearch> QuickSearch;
		void OnQuickSearchInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IReferential_ImportManagerStateMachine 
	{
		void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility);
		void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility);
		void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility);
		void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility);
		void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility);
		void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility);
		void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility);
		void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility);
		void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility);
		void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility);
		void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility);
		void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility);
		void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility);
		void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility);
		void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility);
		void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility);
		void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility);
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
		void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility);
		void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility);
		void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility);
		void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility);
		void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility);
		void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility);
		void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility);
		void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility);
		void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility);
	
		event System.Action<XComponent.Referential.UserObject.ImportManager> ImportManager;
		void OnImportManagerInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IReferential_ExchangeQueryStateMachine 
	{
		void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility);
		void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility);
		void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility);
		void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility);
		void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility);
		void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility);
		void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility);
		void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility);
		void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility);
		void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility);
		void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility);
		void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility);
		void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility);
		void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility);
		void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility);
		void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility);
		void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility);
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
		void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility);
		void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility);
		void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility);
		void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility);
		void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility);
		void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility);
		void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility);
		void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility);
		void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility);
	}
	
	public interface IReferential_CsvDirectoryWatcherStateMachine 
	{
		void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility);
		void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility);
		void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility);
		void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility);
		void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility);
		void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility);
		void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility);
		void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility);
		void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility);
		void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility);
		void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility);
		void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility);
		void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility);
		void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility);
		void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility);
		void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility);
		void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility);
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
		void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility);
		void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility);
		void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility);
		void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility);
		void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility);
		void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility);
		void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility);
		void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility);
		void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility);
	}
	
	public interface IReferential_AllInstrumentsRequestStateMachine 
	{
		void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility);
		void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility);
		void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility);
		void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility);
		void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility);
		void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility);
		void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility);
		void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility);
		void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility);
		void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility);
		void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility);
		void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility);
		void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility);
		void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility);
		void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility);
		void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility);
		void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility);
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
		void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility);
		void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility);
		void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility);
		void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility);
		void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility);
		void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility);
		void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility);
		void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility);
		void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility);
	}
	
	public interface IReferentialFeedSource_ReferentialFeedManagerStateMachine 
	{
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
	
		event System.Action<XComponent.ReferentialFeedSource.UserObject.ReferentialFeedManager> ReferentialFeedManager;
		void OnReferentialFeedManagerInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IReferentialFeedSource_HeartBeatRequestStateMachine 
	{
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
	
		event System.Action<XComponent.FeedSource.UserObject.HeartBeat> HeartBeatRequest;
		void OnHeartBeatRequestInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IReferentialFeedSource_TimerStateMachine 
	{
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
	}
	
	public interface IReferentialFeedSource_FeedSourceOrchestratorStateMachine 
	{
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
	
		event System.Action<XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator> FeedSourceOrchestrator;
		void OnFeedSourceOrchestratorInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IReferentialFeedSource_DictionaryRequestStateMachine 
	{
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
	}
	
	public interface IReferentialFeedSource_TickSizeRequestStateMachine 
	{
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
	}
	
	public interface IReferentialFeedSource_StockWatchRequestStateMachine 
	{
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
	}
	
	public interface IReferentialFeedSource_ReferentialFeedStateMachine 
	{
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
	
		event System.Action<XComponent.ReferentialFeedSource.UserObject.ReferentialFeed> ReferentialFeed;
		void OnReferentialFeedInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IReferentialFeedSource_ShutDownTimerStateMachine 
	{
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
	
		event System.Action<XComponent.ReferentialFeedSource.UserObject.ShutDownTimer> ShutDownTimer;
		void OnShutDownTimerInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IReferentialFeedSource_TickSizeFeedStateMachine 
	{
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
	}
	
	public interface IReferentialFeedSource_DictionaryFeedStateMachine 
	{
		void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility);
	}
	
	public interface IReportsManager_ReportsManagerStateMachine 
	{
	}
	
	public interface IReportsManager_ReportsListStateMachine 
	{
	}
	
	public interface IReportsManager_RightRequestStateMachine 
	{
	}
	
	public interface IReportsManager_ReportUpdateStateMachine 
	{
	}
	
	public interface IResearch_ResearchCacheStateMachine 
	{
		void SendFindResearch(XComponent.Research.UserObject.FindResearch obj, Visibility visibility);
		void SendGetResearchEntity(XComponent.Research.UserObject.GetResearchEntity obj, Visibility visibility);
		void SendInitFailed(XComponent.Research.UserObject.InitFailed obj, Visibility visibility);
		void SendGetResearchDocument(XComponent.Research.UserObject.GetResearchDocument obj, Visibility visibility);
		void SendSuggestQuery(XComponent.Research.UserObject.SuggestQuery obj, Visibility visibility);
		void SendGetLatestResearch(XComponent.Research.UserObject.GetLatestResearch obj, Visibility visibility);
		void SendInitOk(XComponent.Research.UserObject.InitOk obj, Visibility visibility);
		void SendRebuildIndex(XComponent.Research.UserObject.RebuildIndex obj, Visibility visibility);
		void SendUpdate(XComponent.Research.UserObject.Update obj, Visibility visibility);
	
		event System.Action<XComponent.Research.UserObject.ResearchCache> ResearchCache;
		void OnResearchCacheInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IResearch_ResearchEntityStateMachine 
	{
		void SendFindResearch(XComponent.Research.UserObject.FindResearch obj, Visibility visibility);
		void SendGetResearchEntity(XComponent.Research.UserObject.GetResearchEntity obj, Visibility visibility);
		void SendInitFailed(XComponent.Research.UserObject.InitFailed obj, Visibility visibility);
		void SendGetResearchDocument(XComponent.Research.UserObject.GetResearchDocument obj, Visibility visibility);
		void SendSuggestQuery(XComponent.Research.UserObject.SuggestQuery obj, Visibility visibility);
		void SendGetLatestResearch(XComponent.Research.UserObject.GetLatestResearch obj, Visibility visibility);
		void SendInitOk(XComponent.Research.UserObject.InitOk obj, Visibility visibility);
		void SendRebuildIndex(XComponent.Research.UserObject.RebuildIndex obj, Visibility visibility);
		void SendUpdate(XComponent.Research.UserObject.Update obj, Visibility visibility);
	
		event System.Action<XComponent.Research.UserObject.ResearchEntity> ResearchEntity;
		void OnResearchEntityInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IResearch_ResearchDocumentStateMachine 
	{
		void SendFindResearch(XComponent.Research.UserObject.FindResearch obj, Visibility visibility);
		void SendGetResearchEntity(XComponent.Research.UserObject.GetResearchEntity obj, Visibility visibility);
		void SendInitFailed(XComponent.Research.UserObject.InitFailed obj, Visibility visibility);
		void SendGetResearchDocument(XComponent.Research.UserObject.GetResearchDocument obj, Visibility visibility);
		void SendSuggestQuery(XComponent.Research.UserObject.SuggestQuery obj, Visibility visibility);
		void SendGetLatestResearch(XComponent.Research.UserObject.GetLatestResearch obj, Visibility visibility);
		void SendInitOk(XComponent.Research.UserObject.InitOk obj, Visibility visibility);
		void SendRebuildIndex(XComponent.Research.UserObject.RebuildIndex obj, Visibility visibility);
		void SendUpdate(XComponent.Research.UserObject.Update obj, Visibility visibility);
	
		event System.Action<XComponent.Research.UserObject.ResearchDocumentResponse> ResearchDocument;
		void OnResearchDocumentInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IResearch_CacheUpdaterStateMachine 
	{
		void SendFindResearch(XComponent.Research.UserObject.FindResearch obj, Visibility visibility);
		void SendGetResearchEntity(XComponent.Research.UserObject.GetResearchEntity obj, Visibility visibility);
		void SendInitFailed(XComponent.Research.UserObject.InitFailed obj, Visibility visibility);
		void SendGetResearchDocument(XComponent.Research.UserObject.GetResearchDocument obj, Visibility visibility);
		void SendSuggestQuery(XComponent.Research.UserObject.SuggestQuery obj, Visibility visibility);
		void SendGetLatestResearch(XComponent.Research.UserObject.GetLatestResearch obj, Visibility visibility);
		void SendInitOk(XComponent.Research.UserObject.InitOk obj, Visibility visibility);
		void SendRebuildIndex(XComponent.Research.UserObject.RebuildIndex obj, Visibility visibility);
		void SendUpdate(XComponent.Research.UserObject.Update obj, Visibility visibility);
	
		event System.Action<XComponent.Research.UserObject.CacheUpdater> CacheUpdater;
		void OnCacheUpdaterInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IResearch_ResearchQueryStateMachine 
	{
		void SendFindResearch(XComponent.Research.UserObject.FindResearch obj, Visibility visibility);
		void SendGetResearchEntity(XComponent.Research.UserObject.GetResearchEntity obj, Visibility visibility);
		void SendInitFailed(XComponent.Research.UserObject.InitFailed obj, Visibility visibility);
		void SendGetResearchDocument(XComponent.Research.UserObject.GetResearchDocument obj, Visibility visibility);
		void SendSuggestQuery(XComponent.Research.UserObject.SuggestQuery obj, Visibility visibility);
		void SendGetLatestResearch(XComponent.Research.UserObject.GetLatestResearch obj, Visibility visibility);
		void SendInitOk(XComponent.Research.UserObject.InitOk obj, Visibility visibility);
		void SendRebuildIndex(XComponent.Research.UserObject.RebuildIndex obj, Visibility visibility);
		void SendUpdate(XComponent.Research.UserObject.Update obj, Visibility visibility);
	
		event System.Action<XComponent.Research.UserObject.ResearchQueryResult> ResearchQuery;
		void OnResearchQueryInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IResearch_ResearchSuggestQueryStateMachine 
	{
		void SendFindResearch(XComponent.Research.UserObject.FindResearch obj, Visibility visibility);
		void SendGetResearchEntity(XComponent.Research.UserObject.GetResearchEntity obj, Visibility visibility);
		void SendInitFailed(XComponent.Research.UserObject.InitFailed obj, Visibility visibility);
		void SendGetResearchDocument(XComponent.Research.UserObject.GetResearchDocument obj, Visibility visibility);
		void SendSuggestQuery(XComponent.Research.UserObject.SuggestQuery obj, Visibility visibility);
		void SendGetLatestResearch(XComponent.Research.UserObject.GetLatestResearch obj, Visibility visibility);
		void SendInitOk(XComponent.Research.UserObject.InitOk obj, Visibility visibility);
		void SendRebuildIndex(XComponent.Research.UserObject.RebuildIndex obj, Visibility visibility);
		void SendUpdate(XComponent.Research.UserObject.Update obj, Visibility visibility);
	
		event System.Action<XComponent.Research.UserObject.WordSuggested> ResearchSuggestQuery;
		void OnResearchSuggestQueryInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IResearch_InstrumentDetailsStateMachine 
	{
		void SendFindResearch(XComponent.Research.UserObject.FindResearch obj, Visibility visibility);
		void SendGetResearchEntity(XComponent.Research.UserObject.GetResearchEntity obj, Visibility visibility);
		void SendInitFailed(XComponent.Research.UserObject.InitFailed obj, Visibility visibility);
		void SendGetResearchDocument(XComponent.Research.UserObject.GetResearchDocument obj, Visibility visibility);
		void SendSuggestQuery(XComponent.Research.UserObject.SuggestQuery obj, Visibility visibility);
		void SendGetLatestResearch(XComponent.Research.UserObject.GetLatestResearch obj, Visibility visibility);
		void SendInitOk(XComponent.Research.UserObject.InitOk obj, Visibility visibility);
		void SendRebuildIndex(XComponent.Research.UserObject.RebuildIndex obj, Visibility visibility);
		void SendUpdate(XComponent.Research.UserObject.Update obj, Visibility visibility);
	}
	
	public interface IResearch_ResearchSettingsStateMachine 
	{
		void SendFindResearch(XComponent.Research.UserObject.FindResearch obj, Visibility visibility);
		void SendGetResearchEntity(XComponent.Research.UserObject.GetResearchEntity obj, Visibility visibility);
		void SendInitFailed(XComponent.Research.UserObject.InitFailed obj, Visibility visibility);
		void SendGetResearchDocument(XComponent.Research.UserObject.GetResearchDocument obj, Visibility visibility);
		void SendSuggestQuery(XComponent.Research.UserObject.SuggestQuery obj, Visibility visibility);
		void SendGetLatestResearch(XComponent.Research.UserObject.GetLatestResearch obj, Visibility visibility);
		void SendInitOk(XComponent.Research.UserObject.InitOk obj, Visibility visibility);
		void SendRebuildIndex(XComponent.Research.UserObject.RebuildIndex obj, Visibility visibility);
		void SendUpdate(XComponent.Research.UserObject.Update obj, Visibility visibility);
	
		event System.Action<XComponent.Research.UserObject.ResearchSettings> ResearchSettings;
		void OnResearchSettingsInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IUserManagement_UserManagementStateMachine 
	{
		void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility);
		void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility);
		void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility);
		void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility);
		void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility);
		void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility);
		void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility);
		void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility);
		void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility);
		void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility);
		void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility);
		void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility);
		void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility);
		void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility);
		void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility);
		void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility);
		void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility);
		void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility);
	
		event System.Action<XComponent.UserManagement.UserObject.UserManagement> UserManagement;
		void OnUserManagementInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IUserManagement_UserSessionStateMachine 
	{
		void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility);
		void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility);
		void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility);
		void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility);
		void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility);
		void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility);
		void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility);
		void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility);
		void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility);
		void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility);
		void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility);
		void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility);
		void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility);
		void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility);
		void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility);
		void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility);
		void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility);
		void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility);
	
		event System.Action<XComponent.UserManagement.UserObject.UserSessionInfo> UserSession;
		void OnUserSessionInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IUserManagement_ManagingActionStateMachine 
	{
		void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility);
		void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility);
		void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility);
		void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility);
		void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility);
		void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility);
		void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility);
		void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility);
		void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility);
		void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility);
		void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility);
		void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility);
		void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility);
		void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility);
		void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility);
		void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility);
		void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility);
		void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility);
	}
	
	public interface IUserManagement_GetRightStateMachine 
	{
		void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility);
		void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility);
		void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility);
		void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility);
		void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility);
		void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility);
		void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility);
		void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility);
		void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility);
		void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility);
		void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility);
		void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility);
		void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility);
		void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility);
		void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility);
		void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility);
		void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility);
		void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility);
	
		event System.Action<XComponent.UserManagement.UserObject.GetRight> GetRight;
		void OnGetRightInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IUserManagement_RightRequestStateMachine 
	{
		void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility);
		void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility);
		void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility);
		void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility);
		void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility);
		void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility);
		void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility);
		void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility);
		void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility);
		void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility);
		void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility);
		void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility);
		void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility);
		void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility);
		void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility);
		void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility);
		void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility);
		void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility);
	}
	
	public interface IUserManagement_CachedPermissionCheckerStateMachine 
	{
		void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility);
		void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility);
		void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility);
		void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility);
		void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility);
		void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility);
		void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility);
		void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility);
		void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility);
		void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility);
		void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility);
		void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility);
		void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility);
		void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility);
		void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility);
		void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility);
		void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility);
		void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility);
	
		event System.Action<XComponent.UserManagement.UserObject.CachedPermissionChecker> CachedPermissionChecker;
		void OnCachedPermissionCheckerInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IUserManagement_PermissionsSnapshotStateMachine 
	{
		void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility);
		void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility);
		void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility);
		void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility);
		void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility);
		void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility);
		void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility);
		void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility);
		void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility);
		void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility);
		void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility);
		void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility);
		void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility);
		void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility);
		void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility);
		void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility);
		void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility);
		void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility);
	}
	
	public interface IUserManagement_GetCustomRightStateMachine 
	{
		void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility);
		void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility);
		void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility);
		void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility);
		void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility);
		void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility);
		void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility);
		void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility);
		void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility);
		void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility);
		void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility);
		void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility);
		void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility);
		void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility);
		void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility);
		void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility);
		void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility);
		void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility);
	}
	
	public interface IUserManagement_ChangePasswordStateMachine 
	{
		void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility);
		void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility);
		void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility);
		void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility);
		void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility);
		void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility);
		void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility);
		void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility);
		void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility);
		void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility);
		void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility);
		void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility);
		void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility);
		void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility);
		void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility);
		void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility);
		void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility);
		void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility);
	
		event System.Action<XComponent.UserManagement.UserObject.ChangingPassword> ChangePassword;
		void OnChangePasswordInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IUserManagement_SessionIdDownStateMachine 
	{
		void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility);
		void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility);
		void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility);
		void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility);
		void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility);
		void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility);
		void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility);
		void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility);
		void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility);
		void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility);
		void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility);
		void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility);
		void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility);
		void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility);
		void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility);
		void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility);
		void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility);
		void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility);
	}
	
	public interface IUserManagement_SessionUpdatedStateMachine 
	{
		void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility);
		void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility);
		void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility);
		void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility);
		void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility);
		void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility);
		void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility);
		void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility);
		void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility);
		void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility);
		void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility);
		void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility);
		void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility);
		void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility);
		void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility);
		void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility);
		void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility);
		void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility);
	}
	
	public interface IUserManagement_SessionsToRecoverSnapshotStateMachine 
	{
		void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility);
		void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility);
		void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility);
		void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility);
		void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility);
		void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility);
		void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility);
		void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility);
		void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility);
		void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility);
		void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility);
		void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility);
		void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility);
		void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility);
		void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility);
		void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility);
		void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility);
		void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility);
	}
	
	public interface IUserManagement_UserRightHistoryStateMachine 
	{
		void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility);
		void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility);
		void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility);
		void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility);
		void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility);
		void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility);
		void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility);
		void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility);
		void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility);
		void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility);
		void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility);
		void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility);
		void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility);
		void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility);
		void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility);
		void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility);
		void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility);
		void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility);
	}
	
	public interface IUserManagement_GetSessionStateMachine 
	{
		void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility);
		void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility);
		void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility);
		void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility);
		void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility);
		void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility);
		void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility);
		void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility);
		void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility);
		void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility);
		void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility);
		void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility);
		void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility);
		void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility);
		void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility);
		void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility);
		void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility);
		void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility);
	}
	
	public interface IUserManagement_UserEntityInfoStateMachine 
	{
		void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility);
		void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility);
		void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility);
		void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility);
		void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility);
		void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility);
		void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility);
		void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility);
		void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility);
		void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility);
		void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility);
		void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility);
		void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility);
		void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility);
		void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility);
		void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility);
		void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility);
		void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility);
	
		event System.Action<XComponent.UserManagement.UserObject.UserEntityInfo> UserEntityInfo;
		void OnUserEntityInfoInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IUserManagement_MarketDataAccessHistorySnapshotStateMachine 
	{
		void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility);
		void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility);
		void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility);
		void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility);
		void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility);
		void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility);
		void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility);
		void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility);
		void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility);
		void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility);
		void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility);
		void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility);
		void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility);
		void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility);
		void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility);
		void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility);
		void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility);
		void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility);
	}
	
	public interface IUserManagement_MarketDataAccessReportGeneratorStateMachine 
	{
		void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility);
		void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility);
		void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility);
		void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility);
		void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility);
		void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility);
		void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility);
		void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility);
		void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility);
		void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility);
		void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility);
		void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility);
		void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility);
		void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility);
		void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility);
		void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility);
		void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility);
		void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility);
	}
	
	public interface IUserManagement_BackendInfoStateMachine 
	{
		void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility);
		void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility);
		void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility);
		void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility);
		void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility);
		void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility);
		void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility);
		void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility);
		void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility);
		void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility);
		void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility);
		void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility);
		void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility);
		void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility);
		void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility);
		void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility);
		void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility);
		void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility);
		void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility);
		void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility);
	
		event System.Action<XComponent.UserManagement.UserObject.BackendInfo> BackendInfo;
		void OnBackendInfoInstanceUpdated(MessageEventArgs busEvent); 
	}
	
	public interface IXcAppMetricsPublisher_XcAppPublisherStateMachine 
	{
	}
	
	public interface IXcAppMetricsPublisher_SessionsStateMachine 
	{
	}
	
	public interface IXcAppMetricsPublisher_SqlServerStateMachine 
	{
	}
	
	public interface IXcAppMetricsPublisher_XcAppHeartBeatStateMachine 
	{
	}
	
	public interface IXcAppMetricsPublisher_OrdersCounterStateMachine 
	{
	}
	
	public interface IXcAppMetricsPublisher_TradesCounterStateMachine 
	{
	}
	public class CheckOrder_CheckComponentStateMachine : ICheckOrder_CheckComponentStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public CheckOrder_CheckComponentStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	
		public event System.Action<XComponent.CheckOrder.CheckComponentNode> CheckComponent;
		public void OnCheckComponentInstanceUpdated(MessageEventArgs busEvent) {
			if( CheckComponent != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.CheckOrder.CheckComponentNode;
				if( publicMember != null ) CheckComponent(publicMember);
			}
		}
	}
	public class CheckOrder_GenericConnectedRuleStateMachine : ICheckOrder_GenericConnectedRuleStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public CheckOrder_GenericConnectedRuleStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	}
	public class CheckOrder_ConnectedRuleStateMachine : ICheckOrder_ConnectedRuleStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public CheckOrder_ConnectedRuleStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	}
	public class CheckOrder_FeedSubscriptionStateMachine : ICheckOrder_FeedSubscriptionStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public CheckOrder_FeedSubscriptionStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	}
	public class CheckOrder_RuleResultStateMachine : ICheckOrder_RuleResultStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public CheckOrder_RuleResultStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	}
	public class CheckOrder_StandardRuleStateMachine : ICheckOrder_StandardRuleStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public CheckOrder_StandardRuleStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	}
	public class CheckOrder_RuleFilterStateMachine : ICheckOrder_RuleFilterStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public CheckOrder_RuleFilterStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	}
	public class CheckOrder_RuleSetStateMachine : ICheckOrder_RuleSetStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public CheckOrder_RuleSetStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	}
	public class CheckOrder_OrderLifeStateMachine : ICheckOrder_OrderLifeStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public CheckOrder_OrderLifeStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	}
	public class CheckOrder_RejectOrderStateMachine : ICheckOrder_RejectOrderStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public CheckOrder_RejectOrderStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	}
	public class CheckOrder_AcceptOrderStateMachine : ICheckOrder_AcceptOrderStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public CheckOrder_AcceptOrderStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	}
	public class ExchangeManager_ExchangeManagerStateMachine : IExchangeManager_ExchangeManagerStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ExchangeManager_ExchangeManagerStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeManager", obj, visibility);
		}
		public void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeManager", obj, visibility);
		}
	
		public event System.Action<XComponent.ExchangeManager.UserObject.ExchangeManager> ExchangeManager;
		public void OnExchangeManagerInstanceUpdated(MessageEventArgs busEvent) {
			if( ExchangeManager != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.ExchangeManager.UserObject.ExchangeManager;
				if( publicMember != null ) ExchangeManager(publicMember);
			}
		}
	}
	public class ExchangeManager_ExchangeStateMachine : IExchangeManager_ExchangeStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ExchangeManager_ExchangeStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Exchange", obj, visibility);
		}
		public void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Exchange", obj, visibility);
		}
	
		public event System.Action<PerseusLib.Common.Dto.Referential.ExchangeInfo> Exchange;
		public void OnExchangeInstanceUpdated(MessageEventArgs busEvent) {
			if( Exchange != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Referential.ExchangeInfo;
				if( publicMember != null ) Exchange(publicMember);
			}
		}
	}
	public class ExchangeManager_ExchangeOpeningStateMachine : IExchangeManager_ExchangeOpeningStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ExchangeManager_ExchangeOpeningStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeOpening", obj, visibility);
		}
		public void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeOpening", obj, visibility);
		}
	
		public event System.Action<PerseusLib.Common.Dto.Referential.ExchangeInfo> ExchangeOpening;
		public void OnExchangeOpeningInstanceUpdated(MessageEventArgs busEvent) {
			if( ExchangeOpening != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Referential.ExchangeInfo;
				if( publicMember != null ) ExchangeOpening(publicMember);
			}
		}
	}
	public class ExchangeManager_ErrorStateMachine : IExchangeManager_ErrorStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ExchangeManager_ErrorStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Error", obj, visibility);
		}
		public void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Error", obj, visibility);
		}
	
		public event System.Action<XComponent.ExchangeManager.UserObject.Error> Error;
		public void OnErrorInstanceUpdated(MessageEventArgs busEvent) {
			if( Error != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.ExchangeManager.UserObject.Error;
				if( publicMember != null ) Error(publicMember);
			}
		}
	}
	public class ExchangeManager_ReferentialUpQueryStateMachine : IExchangeManager_ReferentialUpQueryStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ExchangeManager_ReferentialUpQueryStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialUpQuery", obj, visibility);
		}
		public void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialUpQuery", obj, visibility);
		}
	}
	public class ExchangeManager_RightRequestStateMachine : IExchangeManager_RightRequestStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ExchangeManager_RightRequestStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
	}
	public class ExchangeManager_ExchangeErrorStateMachine : IExchangeManager_ExchangeErrorStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ExchangeManager_ExchangeErrorStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeError", obj, visibility);
		}
		public void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeError", obj, visibility);
		}
	
		public event System.Action<XComponent.ExchangeManager.UserObject.ExchangeError> ExchangeError;
		public void OnExchangeErrorInstanceUpdated(MessageEventArgs busEvent) {
			if( ExchangeError != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.ExchangeManager.UserObject.ExchangeError;
				if( publicMember != null ) ExchangeError(publicMember);
			}
		}
	}
	public class ExchangeManager_ExchangeLoadingStateMachine : IExchangeManager_ExchangeLoadingStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ExchangeManager_ExchangeLoadingStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeLoading", obj, visibility);
		}
		public void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeLoading", obj, visibility);
		}
	
		public event System.Action<PerseusLib.Common.Dto.Referential.ExchangeInfo> ExchangeLoading;
		public void OnExchangeLoadingInstanceUpdated(MessageEventArgs busEvent) {
			if( ExchangeLoading != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Referential.ExchangeInfo;
				if( publicMember != null ) ExchangeLoading(publicMember);
			}
		}
	}
	public class ExchangeManager_TimeZoneStateMachine : IExchangeManager_TimeZoneStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ExchangeManager_TimeZoneStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TimeZone", obj, visibility);
		}
		public void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TimeZone", obj, visibility);
		}
	
		public event System.Action<PerseusLib.Common.Dto.Referential.TimeZoneDefinition> TimeZone;
		public void OnTimeZoneInstanceUpdated(MessageEventArgs busEvent) {
			if( TimeZone != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Referential.TimeZoneDefinition;
				if( publicMember != null ) TimeZone(publicMember);
			}
		}
	}
	public class ExchangeManager_ExchangeDisablingStateMachine : IExchangeManager_ExchangeDisablingStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ExchangeManager_ExchangeDisablingStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeDisabling", obj, visibility);
		}
		public void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeDisabling", obj, visibility);
		}
	
		public event System.Action<PerseusLib.Common.Dto.Referential.ExchangeInfo> ExchangeDisabling;
		public void OnExchangeDisablingInstanceUpdated(MessageEventArgs busEvent) {
			if( ExchangeDisabling != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Referential.ExchangeInfo;
				if( publicMember != null ) ExchangeDisabling(publicMember);
			}
		}
	}
	public class ExchangeManager_ExchangeQueryReplyStateMachine : IExchangeManager_ExchangeQueryReplyStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ExchangeManager_ExchangeQueryReplyStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQueryReply", obj, visibility);
		}
		public void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQueryReply", obj, visibility);
		}
	}
	public class ExchangeManager_ExchangeMidnightStateMachine : IExchangeManager_ExchangeMidnightStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ExchangeManager_ExchangeMidnightStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnight", obj, visibility);
		}
		public void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnight", obj, visibility);
		}
	
		public event System.Action<PerseusLib.Common.Dto.Referential.ExchangeInfo> ExchangeMidnight;
		public void OnExchangeMidnightInstanceUpdated(MessageEventArgs busEvent) {
			if( ExchangeMidnight != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Referential.ExchangeInfo;
				if( publicMember != null ) ExchangeMidnight(publicMember);
			}
		}
	}
	public class ExchangeManager_MidnightCheckerStateMachine : IExchangeManager_MidnightCheckerStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ExchangeManager_MidnightCheckerStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.ExchangeManager.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MidnightChecker", obj, visibility);
		}
		public void SendRetry(XComponent.ExchangeManager.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MidnightChecker", obj, visibility);
		}
	}
	public class FeedSource_FeedManagerStateMachine : IFeedSource_FeedManagerStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public FeedSource_FeedManagerStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FeedManager", obj, visibility);
		}
		public void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FeedManager", obj, visibility);
		}
		public void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FeedManager", obj, visibility);
		}
		public void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FeedManager", obj, visibility);
		}
		public void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FeedManager", obj, visibility);
		}
		public void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FeedManager", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FeedManager", obj, visibility);
		}
		public void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FeedManager", obj, visibility);
		}
		public void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FeedManager", obj, visibility);
		}
	
		public event System.Action<XComponent.FeedSource.UserObject.FeedManager> FeedManager;
		public void OnFeedManagerInstanceUpdated(MessageEventArgs busEvent) {
			if( FeedManager != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.FeedSource.UserObject.FeedManager;
				if( publicMember != null ) FeedManager(publicMember);
			}
		}
	}
	public class FeedSource_GatewayStateMachine : IFeedSource_GatewayStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public FeedSource_GatewayStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Gateway", obj, visibility);
		}
		public void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Gateway", obj, visibility);
		}
		public void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Gateway", obj, visibility);
		}
		public void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Gateway", obj, visibility);
		}
		public void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Gateway", obj, visibility);
		}
		public void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Gateway", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Gateway", obj, visibility);
		}
		public void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Gateway", obj, visibility);
		}
		public void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Gateway", obj, visibility);
		}
	
		public event System.Action<XComponent.FeedSource.UserObject.Gateway> Gateway;
		public void OnGatewayInstanceUpdated(MessageEventArgs busEvent) {
			if( Gateway != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.FeedSource.UserObject.Gateway;
				if( publicMember != null ) Gateway(publicMember);
			}
		}
	}
	public class FeedSource_FeedStateMachine : IFeedSource_FeedStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public FeedSource_FeedStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Feed", obj, visibility);
		}
		public void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Feed", obj, visibility);
		}
		public void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Feed", obj, visibility);
		}
		public void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Feed", obj, visibility);
		}
		public void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Feed", obj, visibility);
		}
		public void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Feed", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Feed", obj, visibility);
		}
		public void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Feed", obj, visibility);
		}
		public void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Feed", obj, visibility);
		}
	
		public event System.Action<XComponent.FeedSource.UserObject.Feed> Feed;
		public void OnFeedInstanceUpdated(MessageEventArgs busEvent) {
			if( Feed != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.FeedSource.UserObject.Feed;
				if( publicMember != null ) Feed(publicMember);
			}
		}
	}
	public class FeedSource_DataSubscriptionStateMachine : IFeedSource_DataSubscriptionStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public FeedSource_DataSubscriptionStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DataSubscription", obj, visibility);
		}
		public void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DataSubscription", obj, visibility);
		}
		public void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DataSubscription", obj, visibility);
		}
		public void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DataSubscription", obj, visibility);
		}
		public void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DataSubscription", obj, visibility);
		}
		public void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DataSubscription", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DataSubscription", obj, visibility);
		}
		public void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DataSubscription", obj, visibility);
		}
		public void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DataSubscription", obj, visibility);
		}
	
		public event System.Action<XComponent.FeedSource.UserObject.DataSubscription> DataSubscription;
		public void OnDataSubscriptionInstanceUpdated(MessageEventArgs busEvent) {
			if( DataSubscription != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.FeedSource.UserObject.DataSubscription;
				if( publicMember != null ) DataSubscription(publicMember);
			}
		}
	}
	public class FeedSource_InstrumentQueryStateMachine : IFeedSource_InstrumentQueryStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public FeedSource_InstrumentQueryStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentQuery", obj, visibility);
		}
		public void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentQuery", obj, visibility);
		}
		public void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentQuery", obj, visibility);
		}
		public void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentQuery", obj, visibility);
		}
		public void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentQuery", obj, visibility);
		}
		public void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentQuery", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentQuery", obj, visibility);
		}
		public void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentQuery", obj, visibility);
		}
		public void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentQuery", obj, visibility);
		}
	}
	public class FeedSource_ReferentialUpQueryStateMachine : IFeedSource_ReferentialUpQueryStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public FeedSource_ReferentialUpQueryStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialUpQuery", obj, visibility);
		}
		public void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialUpQuery", obj, visibility);
		}
		public void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialUpQuery", obj, visibility);
		}
		public void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialUpQuery", obj, visibility);
		}
		public void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialUpQuery", obj, visibility);
		}
		public void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialUpQuery", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialUpQuery", obj, visibility);
		}
		public void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialUpQuery", obj, visibility);
		}
		public void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialUpQuery", obj, visibility);
		}
	}
	public class FeedSource_FeedSnapshotStateMachine : IFeedSource_FeedSnapshotStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public FeedSource_FeedSnapshotStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FeedSnapshot", obj, visibility);
		}
		public void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FeedSnapshot", obj, visibility);
		}
		public void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FeedSnapshot", obj, visibility);
		}
		public void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FeedSnapshot", obj, visibility);
		}
		public void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FeedSnapshot", obj, visibility);
		}
		public void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FeedSnapshot", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FeedSnapshot", obj, visibility);
		}
		public void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FeedSnapshot", obj, visibility);
		}
		public void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FeedSnapshot", obj, visibility);
		}
	
		public event System.Action<XComponent.FeedSource.UserObject.FeedSnapshot> FeedSnapshot;
		public void OnFeedSnapshotInstanceUpdated(MessageEventArgs busEvent) {
			if( FeedSnapshot != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.FeedSource.UserObject.FeedSnapshot;
				if( publicMember != null ) FeedSnapshot(publicMember);
			}
		}
	}
	public class FeedSource_GatewaySettingsStateMachine : IFeedSource_GatewaySettingsStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public FeedSource_GatewaySettingsStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GatewaySettings", obj, visibility);
		}
		public void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GatewaySettings", obj, visibility);
		}
		public void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GatewaySettings", obj, visibility);
		}
		public void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GatewaySettings", obj, visibility);
		}
		public void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GatewaySettings", obj, visibility);
		}
		public void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GatewaySettings", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GatewaySettings", obj, visibility);
		}
		public void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GatewaySettings", obj, visibility);
		}
		public void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GatewaySettings", obj, visibility);
		}
	}
	public class FeedSource_SubscriptionPreprocessorStateMachine : IFeedSource_SubscriptionPreprocessorStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public FeedSource_SubscriptionPreprocessorStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SubscriptionPreprocessor", obj, visibility);
		}
		public void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SubscriptionPreprocessor", obj, visibility);
		}
		public void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SubscriptionPreprocessor", obj, visibility);
		}
		public void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SubscriptionPreprocessor", obj, visibility);
		}
		public void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SubscriptionPreprocessor", obj, visibility);
		}
		public void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SubscriptionPreprocessor", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SubscriptionPreprocessor", obj, visibility);
		}
		public void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SubscriptionPreprocessor", obj, visibility);
		}
		public void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SubscriptionPreprocessor", obj, visibility);
		}
	}
	public class FeedSource_DataSubscriptionDenialStateMachine : IFeedSource_DataSubscriptionDenialStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public FeedSource_DataSubscriptionDenialStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DataSubscriptionDenial", obj, visibility);
		}
		public void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DataSubscriptionDenial", obj, visibility);
		}
		public void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DataSubscriptionDenial", obj, visibility);
		}
		public void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DataSubscriptionDenial", obj, visibility);
		}
		public void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DataSubscriptionDenial", obj, visibility);
		}
		public void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DataSubscriptionDenial", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DataSubscriptionDenial", obj, visibility);
		}
		public void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DataSubscriptionDenial", obj, visibility);
		}
		public void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DataSubscriptionDenial", obj, visibility);
		}
	
		public event System.Action<XComponent.FeedSource.UserObject.DataSubscriptionDenial> DataSubscriptionDenial;
		public void OnDataSubscriptionDenialInstanceUpdated(MessageEventArgs busEvent) {
			if( DataSubscriptionDenial != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.FeedSource.UserObject.DataSubscriptionDenial;
				if( publicMember != null ) DataSubscriptionDenial(publicMember);
			}
		}
	}
	public class FeedSource_RightRequestStateMachine : IFeedSource_RightRequestStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public FeedSource_RightRequestStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
	}
	public class FeedSource_GetSessionRequestStateMachine : IFeedSource_GetSessionRequestStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public FeedSource_GetSessionRequestStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSessionRequest", obj, visibility);
		}
		public void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSessionRequest", obj, visibility);
		}
		public void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSessionRequest", obj, visibility);
		}
		public void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSessionRequest", obj, visibility);
		}
		public void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSessionRequest", obj, visibility);
		}
		public void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSessionRequest", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSessionRequest", obj, visibility);
		}
		public void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSessionRequest", obj, visibility);
		}
		public void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSessionRequest", obj, visibility);
		}
	}
	public class FeedSource_GetSessionRequestByDbIdStateMachine : IFeedSource_GetSessionRequestByDbIdStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public FeedSource_GetSessionRequestByDbIdStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSessionRequestByDbId", obj, visibility);
		}
		public void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSessionRequestByDbId", obj, visibility);
		}
		public void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSessionRequestByDbId", obj, visibility);
		}
		public void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSessionRequestByDbId", obj, visibility);
		}
		public void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSessionRequestByDbId", obj, visibility);
		}
		public void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSessionRequestByDbId", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSessionRequestByDbId", obj, visibility);
		}
		public void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSessionRequestByDbId", obj, visibility);
		}
		public void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSessionRequestByDbId", obj, visibility);
		}
	}
	public class FeedSource_LoadInstrumentsQueryStateMachine : IFeedSource_LoadInstrumentsQueryStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public FeedSource_LoadInstrumentsQueryStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendStop(XComponent.FeedSource.UserObject.Stop obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadInstrumentsQuery", obj, visibility);
		}
		public void SendRestoreSubscription(XComponent.FeedSource.UserObject.RestoreSubscription obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadInstrumentsQuery", obj, visibility);
		}
		public void SendUnsubscriptionRequest(XComponent.FeedSource.UserObject.UnsubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadInstrumentsQuery", obj, visibility);
		}
		public void SendSubscriptionRequest(XComponent.FeedSource.UserObject.SubscriptionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadInstrumentsQuery", obj, visibility);
		}
		public void SendInitReport(XComponent.FeedSource.UserObject.InitReport obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadInstrumentsQuery", obj, visibility);
		}
		public void SendConnectionLost(XComponent.FeedSource.UserObject.ConnectionLost obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadInstrumentsQuery", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadInstrumentsQuery", obj, visibility);
		}
		public void SendSubscriptionPreprocessor(XComponent.FeedSource.UserObject.SubscriptionPreprocessor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadInstrumentsQuery", obj, visibility);
		}
		public void SendRetry(XComponent.Referential.UserObject.Retry obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadInstrumentsQuery", obj, visibility);
		}
	}
	public class OrderDbAccessor_OrderDbAccessorStateMachine : IOrderDbAccessor_OrderDbAccessorStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public OrderDbAccessor_OrderDbAccessorStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderDbAccessor", obj, visibility);
		}
		public void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderDbAccessor", obj, visibility);
		}
		public void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderDbAccessor", obj, visibility);
		}
		public void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderDbAccessor", obj, visibility);
		}
		public void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderDbAccessor", obj, visibility);
		}
		public void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderDbAccessor", obj, visibility);
		}
		public void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderDbAccessor", obj, visibility);
		}
		public void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderDbAccessor", obj, visibility);
		}
		public void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderDbAccessor", obj, visibility);
		}
		public void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderDbAccessor", obj, visibility);
		}
		public void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderDbAccessor", obj, visibility);
		}
	}
	public class OrderDbAccessor_UpdateOperationErrorStateMachine : IOrderDbAccessor_UpdateOperationErrorStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public OrderDbAccessor_UpdateOperationErrorStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UpdateOperationError", obj, visibility);
		}
		public void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UpdateOperationError", obj, visibility);
		}
		public void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UpdateOperationError", obj, visibility);
		}
		public void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UpdateOperationError", obj, visibility);
		}
		public void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UpdateOperationError", obj, visibility);
		}
		public void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UpdateOperationError", obj, visibility);
		}
		public void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UpdateOperationError", obj, visibility);
		}
		public void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UpdateOperationError", obj, visibility);
		}
		public void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UpdateOperationError", obj, visibility);
		}
		public void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UpdateOperationError", obj, visibility);
		}
		public void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UpdateOperationError", obj, visibility);
		}
	}
	public class OrderDbAccessor_OrderSnapshotStateMachine : IOrderDbAccessor_OrderSnapshotStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public OrderDbAccessor_OrderSnapshotStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshot", obj, visibility);
		}
		public void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshot", obj, visibility);
		}
		public void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshot", obj, visibility);
		}
		public void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshot", obj, visibility);
		}
		public void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshot", obj, visibility);
		}
		public void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshot", obj, visibility);
		}
		public void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshot", obj, visibility);
		}
		public void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshot", obj, visibility);
		}
		public void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshot", obj, visibility);
		}
		public void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshot", obj, visibility);
		}
		public void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshot", obj, visibility);
		}
	
		public event System.Action<XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult> OrderSnapshot;
		public void OnOrderSnapshotInstanceUpdated(MessageEventArgs busEvent) {
			if( OrderSnapshot != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult;
				if( publicMember != null ) OrderSnapshot(publicMember);
			}
		}
	}
	public class OrderDbAccessor_OrderSnapshotErrorStateMachine : IOrderDbAccessor_OrderSnapshotErrorStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public OrderDbAccessor_OrderSnapshotErrorStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshotError", obj, visibility);
		}
		public void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshotError", obj, visibility);
		}
		public void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshotError", obj, visibility);
		}
		public void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshotError", obj, visibility);
		}
		public void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshotError", obj, visibility);
		}
		public void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshotError", obj, visibility);
		}
		public void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshotError", obj, visibility);
		}
		public void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshotError", obj, visibility);
		}
		public void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshotError", obj, visibility);
		}
		public void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshotError", obj, visibility);
		}
		public void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderSnapshotError", obj, visibility);
		}
	}
	public class OrderDbAccessor_TradeSnapshotStateMachine : IOrderDbAccessor_TradeSnapshotStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public OrderDbAccessor_TradeSnapshotStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshot", obj, visibility);
		}
		public void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshot", obj, visibility);
		}
		public void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshot", obj, visibility);
		}
		public void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshot", obj, visibility);
		}
		public void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshot", obj, visibility);
		}
		public void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshot", obj, visibility);
		}
		public void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshot", obj, visibility);
		}
		public void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshot", obj, visibility);
		}
		public void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshot", obj, visibility);
		}
		public void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshot", obj, visibility);
		}
		public void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshot", obj, visibility);
		}
	
		public event System.Action<XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult> TradeSnapshot;
		public void OnTradeSnapshotInstanceUpdated(MessageEventArgs busEvent) {
			if( TradeSnapshot != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult;
				if( publicMember != null ) TradeSnapshot(publicMember);
			}
		}
	}
	public class OrderDbAccessor_TradeSnapshotErrorStateMachine : IOrderDbAccessor_TradeSnapshotErrorStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public OrderDbAccessor_TradeSnapshotErrorStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshotError", obj, visibility);
		}
		public void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshotError", obj, visibility);
		}
		public void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshotError", obj, visibility);
		}
		public void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshotError", obj, visibility);
		}
		public void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshotError", obj, visibility);
		}
		public void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshotError", obj, visibility);
		}
		public void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshotError", obj, visibility);
		}
		public void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshotError", obj, visibility);
		}
		public void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshotError", obj, visibility);
		}
		public void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshotError", obj, visibility);
		}
		public void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeSnapshotError", obj, visibility);
		}
	}
	public class OrderDbAccessor_NewTradeAvailableStateMachine : IOrderDbAccessor_NewTradeAvailableStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public OrderDbAccessor_NewTradeAvailableStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("NewTradeAvailable", obj, visibility);
		}
		public void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("NewTradeAvailable", obj, visibility);
		}
		public void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("NewTradeAvailable", obj, visibility);
		}
		public void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("NewTradeAvailable", obj, visibility);
		}
		public void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("NewTradeAvailable", obj, visibility);
		}
		public void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("NewTradeAvailable", obj, visibility);
		}
		public void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("NewTradeAvailable", obj, visibility);
		}
		public void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("NewTradeAvailable", obj, visibility);
		}
		public void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("NewTradeAvailable", obj, visibility);
		}
		public void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("NewTradeAvailable", obj, visibility);
		}
		public void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("NewTradeAvailable", obj, visibility);
		}
	
		public event System.Action<PerseusLib.Common.Dto.Orders.Trade> NewTradeAvailable;
		public void OnNewTradeAvailableInstanceUpdated(MessageEventArgs busEvent) {
			if( NewTradeAvailable != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Orders.Trade;
				if( publicMember != null ) NewTradeAvailable(publicMember);
			}
		}
	}
	public class OrderDbAccessor_TradeReportGeneratorStateMachine : IOrderDbAccessor_TradeReportGeneratorStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public OrderDbAccessor_TradeReportGeneratorStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeReportGenerator", obj, visibility);
		}
		public void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeReportGenerator", obj, visibility);
		}
		public void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeReportGenerator", obj, visibility);
		}
		public void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeReportGenerator", obj, visibility);
		}
		public void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeReportGenerator", obj, visibility);
		}
		public void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeReportGenerator", obj, visibility);
		}
		public void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeReportGenerator", obj, visibility);
		}
		public void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeReportGenerator", obj, visibility);
		}
		public void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeReportGenerator", obj, visibility);
		}
		public void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeReportGenerator", obj, visibility);
		}
		public void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TradeReportGenerator", obj, visibility);
		}
	}
	public class OrderDbAccessor_ReportGenerationErrorStateMachine : IOrderDbAccessor_ReportGenerationErrorStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public OrderDbAccessor_ReportGenerationErrorStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReportGenerationError", obj, visibility);
		}
		public void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReportGenerationError", obj, visibility);
		}
		public void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReportGenerationError", obj, visibility);
		}
		public void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReportGenerationError", obj, visibility);
		}
		public void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReportGenerationError", obj, visibility);
		}
		public void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReportGenerationError", obj, visibility);
		}
		public void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReportGenerationError", obj, visibility);
		}
		public void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReportGenerationError", obj, visibility);
		}
		public void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReportGenerationError", obj, visibility);
		}
		public void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReportGenerationError", obj, visibility);
		}
		public void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReportGenerationError", obj, visibility);
		}
	}
	public class OrderDbAccessor_GeneratedReportStateMachine : IOrderDbAccessor_GeneratedReportStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public OrderDbAccessor_GeneratedReportStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GeneratedReport", obj, visibility);
		}
		public void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GeneratedReport", obj, visibility);
		}
		public void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GeneratedReport", obj, visibility);
		}
		public void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GeneratedReport", obj, visibility);
		}
		public void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GeneratedReport", obj, visibility);
		}
		public void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GeneratedReport", obj, visibility);
		}
		public void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GeneratedReport", obj, visibility);
		}
		public void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GeneratedReport", obj, visibility);
		}
		public void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GeneratedReport", obj, visibility);
		}
		public void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GeneratedReport", obj, visibility);
		}
		public void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GeneratedReport", obj, visibility);
		}
	}
	public class OrderDbAccessor_OrdersTradesSnapshotStateMachine : IOrderDbAccessor_OrdersTradesSnapshotStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public OrderDbAccessor_OrdersTradesSnapshotStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendUpdateOperationFail(XComponent.OrderDbAccessor.UserObject.UpdateOperationFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrdersTradesSnapshot", obj, visibility);
		}
		public void SendOrderSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrderSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrdersTradesSnapshot", obj, visibility);
		}
		public void SendOrderSnapshotFail(XComponent.OrderDbAccessor.UserObject.OrderSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrdersTradesSnapshot", obj, visibility);
		}
		public void SendTradeSnapshotResult(XComponent.OrderDbAccessor.UserObject.TradeSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrdersTradesSnapshot", obj, visibility);
		}
		public void SendTradeSnapshotFail(XComponent.OrderDbAccessor.UserObject.TradeSnapshotFail obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrdersTradesSnapshot", obj, visibility);
		}
		public void SendOrderSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrderSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrdersTradesSnapshot", obj, visibility);
		}
		public void SendTradeSnapshotRequest(XComponent.OrderDbAccessor.UserObject.TradeSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrdersTradesSnapshot", obj, visibility);
		}
		public void SendTradeAvailable(XComponent.OrderDbAccessor.UserObject.TradeAvailable obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrdersTradesSnapshot", obj, visibility);
		}
		public void SendCreateTradeReportGenerator(XComponent.OrderDbAccessor.UserObject.CreateTradeReportGenerator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrdersTradesSnapshot", obj, visibility);
		}
		public void SendOrdersTradesSnapshotRequest(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrdersTradesSnapshot", obj, visibility);
		}
		public void SendOrdersTradesSnapshotResult(XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrdersTradesSnapshot", obj, visibility);
		}
	
		public event System.Action<XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult> OrdersTradesSnapshot;
		public void OnOrdersTradesSnapshotInstanceUpdated(MessageEventArgs busEvent) {
			if( OrdersTradesSnapshot != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.OrderDbAccessor.UserObject.OrdersTradesSnapshotResult;
				if( publicMember != null ) OrdersTradesSnapshot(publicMember);
			}
		}
	}
	public class OrderManagementSystem_OrderManagementSystemStateMachine : IOrderManagementSystem_OrderManagementSystemStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public OrderManagementSystem_OrderManagementSystemStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendRestore(XComponent.OrderManagementSystem.UserObject.Restore obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
		public void SendModify(XComponent.OrderManagementSystem.UserObject.Modify obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
		public void SendCancelOrder(XComponent.OrderManagementSystem.UserObject.CancelOrder obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
		public void SendCancellationAcceptance(XComponent.OrderManagementSystem.UserObject.CancellationAcceptance obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
		public void SendCancelRequest(XComponent.OrderManagementSystem.UserObject.CancelRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
		public void SendPartialExecutionInput(XComponent.OrderManagementSystem.UserObject.PartialExecutionInput obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
		public void SendCancelAcked(XComponent.OrderManagementSystem.UserObject.CancelAcked obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
		public void SendExecutionInput(XComponent.OrderManagementSystem.UserObject.ExecutionInput obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
		public void SendRejectCancel(XComponent.OrderManagementSystem.UserObject.RejectCancel obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
		public void SendCreateTrade(XComponent.OrderManagementSystem.UserObject.CreateTrade obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
		public void SendExpireOrders(XComponent.OrderManagementSystem.UserObject.ExpireOrders obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
		public void SendAcknowledgement(XComponent.OrderManagementSystem.UserObject.Acknowledgement obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
		public void SendRejectOrder(XComponent.OrderManagementSystem.UserObject.RejectOrder obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
		public void SendRejectModification(XComponent.OrderManagementSystem.UserObject.RejectModification obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
		public void SendAcceptModification(XComponent.OrderManagementSystem.UserObject.AcceptModification obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
		public void SendModifyAcked(XComponent.OrderManagementSystem.UserObject.ModifyAcked obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
		public void SendShutDown(XComponent.OrderManagementSystem.UserObject.ShutDown obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
		public void SendCreateExchangeListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeListener obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
		public void SendCreateExchangeMidnightListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeMidnightListener obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
		public void SendDisconnected(XComponent.OrderManagementSystem.UserObject.Disconnected obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderManagementSystem", obj, visibility);
		}
	
		public event System.Action<XComponent.OrderManagementSystem.UserObject.OrderManagementSystem> OrderManagementSystem;
		public void OnOrderManagementSystemInstanceUpdated(MessageEventArgs busEvent) {
			if( OrderManagementSystem != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.OrderManagementSystem.UserObject.OrderManagementSystem;
				if( publicMember != null ) OrderManagementSystem(publicMember);
			}
		}
	}
	public class OrderManagementSystem_TradeStateMachine : IOrderManagementSystem_TradeStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public OrderManagementSystem_TradeStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendRestore(XComponent.OrderManagementSystem.UserObject.Restore obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
		public void SendModify(XComponent.OrderManagementSystem.UserObject.Modify obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
		public void SendCancelOrder(XComponent.OrderManagementSystem.UserObject.CancelOrder obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
		public void SendCancellationAcceptance(XComponent.OrderManagementSystem.UserObject.CancellationAcceptance obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
		public void SendCancelRequest(XComponent.OrderManagementSystem.UserObject.CancelRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
		public void SendPartialExecutionInput(XComponent.OrderManagementSystem.UserObject.PartialExecutionInput obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
		public void SendCancelAcked(XComponent.OrderManagementSystem.UserObject.CancelAcked obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
		public void SendExecutionInput(XComponent.OrderManagementSystem.UserObject.ExecutionInput obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
		public void SendRejectCancel(XComponent.OrderManagementSystem.UserObject.RejectCancel obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
		public void SendCreateTrade(XComponent.OrderManagementSystem.UserObject.CreateTrade obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
		public void SendExpireOrders(XComponent.OrderManagementSystem.UserObject.ExpireOrders obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
		public void SendAcknowledgement(XComponent.OrderManagementSystem.UserObject.Acknowledgement obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
		public void SendRejectOrder(XComponent.OrderManagementSystem.UserObject.RejectOrder obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
		public void SendRejectModification(XComponent.OrderManagementSystem.UserObject.RejectModification obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
		public void SendAcceptModification(XComponent.OrderManagementSystem.UserObject.AcceptModification obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
		public void SendModifyAcked(XComponent.OrderManagementSystem.UserObject.ModifyAcked obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
		public void SendShutDown(XComponent.OrderManagementSystem.UserObject.ShutDown obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
		public void SendCreateExchangeListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeListener obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
		public void SendCreateExchangeMidnightListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeMidnightListener obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
		public void SendDisconnected(XComponent.OrderManagementSystem.UserObject.Disconnected obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Trade", obj, visibility);
		}
	
		public event System.Action<PerseusLib.Common.Dto.Orders.Trade> Trade;
		public void OnTradeInstanceUpdated(MessageEventArgs busEvent) {
			if( Trade != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Orders.Trade;
				if( publicMember != null ) Trade(publicMember);
			}
		}
	}
	public class OrderManagementSystem_OrderStateMachine : IOrderManagementSystem_OrderStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public OrderManagementSystem_OrderStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendRestore(XComponent.OrderManagementSystem.UserObject.Restore obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
		public void SendModify(XComponent.OrderManagementSystem.UserObject.Modify obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
		public void SendCancelOrder(XComponent.OrderManagementSystem.UserObject.CancelOrder obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
		public void SendCancellationAcceptance(XComponent.OrderManagementSystem.UserObject.CancellationAcceptance obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
		public void SendCancelRequest(XComponent.OrderManagementSystem.UserObject.CancelRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
		public void SendPartialExecutionInput(XComponent.OrderManagementSystem.UserObject.PartialExecutionInput obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
		public void SendCancelAcked(XComponent.OrderManagementSystem.UserObject.CancelAcked obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
		public void SendExecutionInput(XComponent.OrderManagementSystem.UserObject.ExecutionInput obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
		public void SendRejectCancel(XComponent.OrderManagementSystem.UserObject.RejectCancel obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
		public void SendCreateTrade(XComponent.OrderManagementSystem.UserObject.CreateTrade obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
		public void SendExpireOrders(XComponent.OrderManagementSystem.UserObject.ExpireOrders obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
		public void SendAcknowledgement(XComponent.OrderManagementSystem.UserObject.Acknowledgement obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
		public void SendRejectOrder(XComponent.OrderManagementSystem.UserObject.RejectOrder obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
		public void SendRejectModification(XComponent.OrderManagementSystem.UserObject.RejectModification obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
		public void SendAcceptModification(XComponent.OrderManagementSystem.UserObject.AcceptModification obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
		public void SendModifyAcked(XComponent.OrderManagementSystem.UserObject.ModifyAcked obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
		public void SendShutDown(XComponent.OrderManagementSystem.UserObject.ShutDown obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
		public void SendCreateExchangeListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeListener obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
		public void SendCreateExchangeMidnightListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeMidnightListener obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
		public void SendDisconnected(XComponent.OrderManagementSystem.UserObject.Disconnected obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Order", obj, visibility);
		}
	
		public event System.Action<PerseusLib.Common.Dto.Orders.XCOrder> Order;
		public void OnOrderInstanceUpdated(MessageEventArgs busEvent) {
			if( Order != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Orders.XCOrder;
				if( publicMember != null ) Order(publicMember);
			}
		}
	}
	public class OrderManagementSystem_OmsSettingsStateMachine : IOrderManagementSystem_OmsSettingsStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public OrderManagementSystem_OmsSettingsStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendRestore(XComponent.OrderManagementSystem.UserObject.Restore obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
		public void SendModify(XComponent.OrderManagementSystem.UserObject.Modify obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
		public void SendCancelOrder(XComponent.OrderManagementSystem.UserObject.CancelOrder obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
		public void SendCancellationAcceptance(XComponent.OrderManagementSystem.UserObject.CancellationAcceptance obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
		public void SendCancelRequest(XComponent.OrderManagementSystem.UserObject.CancelRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
		public void SendPartialExecutionInput(XComponent.OrderManagementSystem.UserObject.PartialExecutionInput obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
		public void SendCancelAcked(XComponent.OrderManagementSystem.UserObject.CancelAcked obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
		public void SendExecutionInput(XComponent.OrderManagementSystem.UserObject.ExecutionInput obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
		public void SendRejectCancel(XComponent.OrderManagementSystem.UserObject.RejectCancel obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
		public void SendCreateTrade(XComponent.OrderManagementSystem.UserObject.CreateTrade obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
		public void SendExpireOrders(XComponent.OrderManagementSystem.UserObject.ExpireOrders obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
		public void SendAcknowledgement(XComponent.OrderManagementSystem.UserObject.Acknowledgement obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
		public void SendRejectOrder(XComponent.OrderManagementSystem.UserObject.RejectOrder obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
		public void SendRejectModification(XComponent.OrderManagementSystem.UserObject.RejectModification obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
		public void SendAcceptModification(XComponent.OrderManagementSystem.UserObject.AcceptModification obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
		public void SendModifyAcked(XComponent.OrderManagementSystem.UserObject.ModifyAcked obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
		public void SendShutDown(XComponent.OrderManagementSystem.UserObject.ShutDown obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
		public void SendCreateExchangeListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeListener obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
		public void SendCreateExchangeMidnightListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeMidnightListener obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
		public void SendDisconnected(XComponent.OrderManagementSystem.UserObject.Disconnected obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OmsSettings", obj, visibility);
		}
	}
	public class OrderManagementSystem_LoadableOrderStateMachine : IOrderManagementSystem_LoadableOrderStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public OrderManagementSystem_LoadableOrderStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendRestore(XComponent.OrderManagementSystem.UserObject.Restore obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
		public void SendModify(XComponent.OrderManagementSystem.UserObject.Modify obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
		public void SendCancelOrder(XComponent.OrderManagementSystem.UserObject.CancelOrder obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
		public void SendCancellationAcceptance(XComponent.OrderManagementSystem.UserObject.CancellationAcceptance obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
		public void SendCancelRequest(XComponent.OrderManagementSystem.UserObject.CancelRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
		public void SendPartialExecutionInput(XComponent.OrderManagementSystem.UserObject.PartialExecutionInput obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
		public void SendCancelAcked(XComponent.OrderManagementSystem.UserObject.CancelAcked obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
		public void SendExecutionInput(XComponent.OrderManagementSystem.UserObject.ExecutionInput obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
		public void SendRejectCancel(XComponent.OrderManagementSystem.UserObject.RejectCancel obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
		public void SendCreateTrade(XComponent.OrderManagementSystem.UserObject.CreateTrade obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
		public void SendExpireOrders(XComponent.OrderManagementSystem.UserObject.ExpireOrders obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
		public void SendAcknowledgement(XComponent.OrderManagementSystem.UserObject.Acknowledgement obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
		public void SendRejectOrder(XComponent.OrderManagementSystem.UserObject.RejectOrder obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
		public void SendRejectModification(XComponent.OrderManagementSystem.UserObject.RejectModification obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
		public void SendAcceptModification(XComponent.OrderManagementSystem.UserObject.AcceptModification obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
		public void SendModifyAcked(XComponent.OrderManagementSystem.UserObject.ModifyAcked obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
		public void SendShutDown(XComponent.OrderManagementSystem.UserObject.ShutDown obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
		public void SendCreateExchangeListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeListener obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
		public void SendCreateExchangeMidnightListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeMidnightListener obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
		public void SendDisconnected(XComponent.OrderManagementSystem.UserObject.Disconnected obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("LoadableOrder", obj, visibility);
		}
	}
	public class OrderManagementSystem_OrderLoadNotificationStateMachine : IOrderManagementSystem_OrderLoadNotificationStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public OrderManagementSystem_OrderLoadNotificationStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendRestore(XComponent.OrderManagementSystem.UserObject.Restore obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
		public void SendModify(XComponent.OrderManagementSystem.UserObject.Modify obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
		public void SendCancelOrder(XComponent.OrderManagementSystem.UserObject.CancelOrder obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
		public void SendCancellationAcceptance(XComponent.OrderManagementSystem.UserObject.CancellationAcceptance obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
		public void SendCancelRequest(XComponent.OrderManagementSystem.UserObject.CancelRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
		public void SendPartialExecutionInput(XComponent.OrderManagementSystem.UserObject.PartialExecutionInput obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
		public void SendCancelAcked(XComponent.OrderManagementSystem.UserObject.CancelAcked obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
		public void SendExecutionInput(XComponent.OrderManagementSystem.UserObject.ExecutionInput obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
		public void SendRejectCancel(XComponent.OrderManagementSystem.UserObject.RejectCancel obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
		public void SendCreateTrade(XComponent.OrderManagementSystem.UserObject.CreateTrade obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
		public void SendExpireOrders(XComponent.OrderManagementSystem.UserObject.ExpireOrders obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
		public void SendAcknowledgement(XComponent.OrderManagementSystem.UserObject.Acknowledgement obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
		public void SendRejectOrder(XComponent.OrderManagementSystem.UserObject.RejectOrder obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
		public void SendRejectModification(XComponent.OrderManagementSystem.UserObject.RejectModification obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
		public void SendAcceptModification(XComponent.OrderManagementSystem.UserObject.AcceptModification obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
		public void SendModifyAcked(XComponent.OrderManagementSystem.UserObject.ModifyAcked obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
		public void SendShutDown(XComponent.OrderManagementSystem.UserObject.ShutDown obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
		public void SendCreateExchangeListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeListener obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
		public void SendCreateExchangeMidnightListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeMidnightListener obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
		public void SendDisconnected(XComponent.OrderManagementSystem.UserObject.Disconnected obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OrderLoadNotification", obj, visibility);
		}
	}
	public class OrderManagementSystem_ExchangeListenerStateMachine : IOrderManagementSystem_ExchangeListenerStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public OrderManagementSystem_ExchangeListenerStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendRestore(XComponent.OrderManagementSystem.UserObject.Restore obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
		public void SendModify(XComponent.OrderManagementSystem.UserObject.Modify obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
		public void SendCancelOrder(XComponent.OrderManagementSystem.UserObject.CancelOrder obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
		public void SendCancellationAcceptance(XComponent.OrderManagementSystem.UserObject.CancellationAcceptance obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
		public void SendCancelRequest(XComponent.OrderManagementSystem.UserObject.CancelRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
		public void SendPartialExecutionInput(XComponent.OrderManagementSystem.UserObject.PartialExecutionInput obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
		public void SendCancelAcked(XComponent.OrderManagementSystem.UserObject.CancelAcked obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
		public void SendExecutionInput(XComponent.OrderManagementSystem.UserObject.ExecutionInput obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
		public void SendRejectCancel(XComponent.OrderManagementSystem.UserObject.RejectCancel obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
		public void SendCreateTrade(XComponent.OrderManagementSystem.UserObject.CreateTrade obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
		public void SendExpireOrders(XComponent.OrderManagementSystem.UserObject.ExpireOrders obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
		public void SendAcknowledgement(XComponent.OrderManagementSystem.UserObject.Acknowledgement obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
		public void SendRejectOrder(XComponent.OrderManagementSystem.UserObject.RejectOrder obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
		public void SendRejectModification(XComponent.OrderManagementSystem.UserObject.RejectModification obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
		public void SendAcceptModification(XComponent.OrderManagementSystem.UserObject.AcceptModification obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
		public void SendModifyAcked(XComponent.OrderManagementSystem.UserObject.ModifyAcked obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
		public void SendShutDown(XComponent.OrderManagementSystem.UserObject.ShutDown obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
		public void SendCreateExchangeListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeListener obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
		public void SendCreateExchangeMidnightListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeMidnightListener obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
		public void SendDisconnected(XComponent.OrderManagementSystem.UserObject.Disconnected obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeListener", obj, visibility);
		}
	}
	public class OrderManagementSystem_ExchangeMidnightListenerStateMachine : IOrderManagementSystem_ExchangeMidnightListenerStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public OrderManagementSystem_ExchangeMidnightListenerStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendRestore(XComponent.OrderManagementSystem.UserObject.Restore obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
		public void SendModify(XComponent.OrderManagementSystem.UserObject.Modify obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
		public void SendCancelOrder(XComponent.OrderManagementSystem.UserObject.CancelOrder obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
		public void SendSessionId(XComponent.UserManagement.UserObject.SessionId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
		public void SendCancellationAcceptance(XComponent.OrderManagementSystem.UserObject.CancellationAcceptance obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
		public void SendCancelRequest(XComponent.OrderManagementSystem.UserObject.CancelRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
		public void SendPartialExecutionInput(XComponent.OrderManagementSystem.UserObject.PartialExecutionInput obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
		public void SendCancelAcked(XComponent.OrderManagementSystem.UserObject.CancelAcked obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
		public void SendExecutionInput(XComponent.OrderManagementSystem.UserObject.ExecutionInput obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
		public void SendRejectCancel(XComponent.OrderManagementSystem.UserObject.RejectCancel obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
		public void SendCreateTrade(XComponent.OrderManagementSystem.UserObject.CreateTrade obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
		public void SendExpireOrders(XComponent.OrderManagementSystem.UserObject.ExpireOrders obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
		public void SendAcknowledgement(XComponent.OrderManagementSystem.UserObject.Acknowledgement obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
		public void SendRejectOrder(XComponent.OrderManagementSystem.UserObject.RejectOrder obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
		public void SendRejectModification(XComponent.OrderManagementSystem.UserObject.RejectModification obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
		public void SendAcceptModification(XComponent.OrderManagementSystem.UserObject.AcceptModification obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
		public void SendModifyAcked(XComponent.OrderManagementSystem.UserObject.ModifyAcked obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
		public void SendShutDown(XComponent.OrderManagementSystem.UserObject.ShutDown obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
		public void SendCreateExchangeListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeListener obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
		public void SendCreateExchangeMidnightListener(XComponent.OrderManagementSystem.UserObject.CreateExchangeMidnightListener obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
		public void SendDisconnected(XComponent.OrderManagementSystem.UserObject.Disconnected obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeMidnightListener", obj, visibility);
		}
	
		public event System.Action<XComponent.OrderManagementSystem.UserObject.ExchangeMidnightListener> ExchangeMidnightListener;
		public void OnExchangeMidnightListenerInstanceUpdated(MessageEventArgs busEvent) {
			if( ExchangeMidnightListener != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.OrderManagementSystem.UserObject.ExchangeMidnightListener;
				if( publicMember != null ) ExchangeMidnightListener(publicMember);
			}
		}
	}
	public class Pricer_PricerStateMachine : IPricer_PricerStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Pricer_PricerStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendRequestCalculation(XComponent.Pricer.UserObject.RequestCalculation obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Pricer", obj, visibility);
		}
		public void SendRequestDetailedCalculation(XComponent.Pricer.UserObject.RequestDetailedCalculation obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Pricer", obj, visibility);
		}
	}
	public class Pricer_CalculationStateMachine : IPricer_CalculationStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Pricer_CalculationStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendRequestCalculation(XComponent.Pricer.UserObject.RequestCalculation obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Calculation", obj, visibility);
		}
		public void SendRequestDetailedCalculation(XComponent.Pricer.UserObject.RequestDetailedCalculation obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Calculation", obj, visibility);
		}
	
		public event System.Action<XComponent.Pricer.UserObject.Calculation> Calculation;
		public void OnCalculationInstanceUpdated(MessageEventArgs busEvent) {
			if( Calculation != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Pricer.UserObject.Calculation;
				if( publicMember != null ) Calculation(publicMember);
			}
		}
	}
	public class Pricer_DetailedCalculationStateMachine : IPricer_DetailedCalculationStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Pricer_DetailedCalculationStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendRequestCalculation(XComponent.Pricer.UserObject.RequestCalculation obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DetailedCalculation", obj, visibility);
		}
		public void SendRequestDetailedCalculation(XComponent.Pricer.UserObject.RequestDetailedCalculation obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DetailedCalculation", obj, visibility);
		}
	
		public event System.Action<XComponent.Pricer.UserObject.DetailedCalculation> DetailedCalculation;
		public void OnDetailedCalculationInstanceUpdated(MessageEventArgs busEvent) {
			if( DetailedCalculation != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Pricer.UserObject.DetailedCalculation;
				if( publicMember != null ) DetailedCalculation(publicMember);
			}
		}
	}
	public class Referential_ReferentialStateMachine : IReferential_ReferentialStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Referential_ReferentialStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
		public void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Referential", obj, visibility);
		}
	
		public event System.Action<XComponent.Referential.UserObject.Referential> Referential;
		public void OnReferentialInstanceUpdated(MessageEventArgs busEvent) {
			if( Referential != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Referential.UserObject.Referential;
				if( publicMember != null ) Referential(publicMember);
			}
		}
	}
	public class Referential_FinancialInstrumentStateMachine : IReferential_FinancialInstrumentStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Referential_FinancialInstrumentStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
		public void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FinancialInstrument", obj, visibility);
		}
	
		public event System.Action<PerseusLib.Common.Dto.Referential.FinancialInstrument> FinancialInstrument;
		public void OnFinancialInstrumentInstanceUpdated(MessageEventArgs busEvent) {
			if( FinancialInstrument != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Referential.FinancialInstrument;
				if( publicMember != null ) FinancialInstrument(publicMember);
			}
		}
	}
	public class Referential_InstrumentRequestStateMachine : IReferential_InstrumentRequestStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Referential_InstrumentRequestStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
		public void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentRequest", obj, visibility);
		}
	
		public event System.Action<XComponent.Referential.UserObject.InstrumentRequest> InstrumentRequest;
		public void OnInstrumentRequestInstanceUpdated(MessageEventArgs busEvent) {
			if( InstrumentRequest != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Referential.UserObject.InstrumentRequest;
				if( publicMember != null ) InstrumentRequest(publicMember);
			}
		}
	}
	public class Referential_CustomInstrumentRequestStateMachine : IReferential_CustomInstrumentRequestStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Referential_CustomInstrumentRequestStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
		public void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CustomInstrumentRequest", obj, visibility);
		}
	
		public event System.Action<XComponent.Referential.UserObject.CustomInstrumentRequestResult> CustomInstrumentRequest;
		public void OnCustomInstrumentRequestInstanceUpdated(MessageEventArgs busEvent) {
			if( CustomInstrumentRequest != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Referential.UserObject.CustomInstrumentRequestResult;
				if( publicMember != null ) CustomInstrumentRequest(publicMember);
			}
		}
	}
	public class Referential_ReferentialImportStateMachine : IReferential_ReferentialImportStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Referential_ReferentialImportStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
		public void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialImport", obj, visibility);
		}
	}
	public class Referential_ImportSourceErrorStateMachine : IReferential_ImportSourceErrorStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Referential_ImportSourceErrorStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
		public void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportSourceError", obj, visibility);
		}
	}
	public class Referential_RightRequestStateMachine : IReferential_RightRequestStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Referential_RightRequestStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
	}
	public class Referential_ErrorReportStateMachine : IReferential_ErrorReportStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Referential_ErrorReportStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
		public void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ErrorReport", obj, visibility);
		}
	}
	public class Referential_ExchangeReferentialImportStateMachine : IReferential_ExchangeReferentialImportStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Referential_ExchangeReferentialImportStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
		public void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeReferentialImport", obj, visibility);
		}
	
		public event System.Action<PerseusLib.Common.Dto.Referential.ExchangeReferentialImport> ExchangeReferentialImport;
		public void OnExchangeReferentialImportInstanceUpdated(MessageEventArgs busEvent) {
			if( ExchangeReferentialImport != null ){ 
				var publicMember = busEvent.MessageReceived as PerseusLib.Common.Dto.Referential.ExchangeReferentialImport;
				if( publicMember != null ) ExchangeReferentialImport(publicMember);
			}
		}
	}
	public class Referential_ReferentialFeedQueryStateMachine : IReferential_ReferentialFeedQueryStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Referential_ReferentialFeedQueryStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
		public void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedQuery", obj, visibility);
		}
	}
	public class Referential_ExchangeImportErrorStateMachine : IReferential_ExchangeImportErrorStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Referential_ExchangeImportErrorStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
		public void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeImportError", obj, visibility);
		}
	
		public event System.Action<XComponent.Referential.UserObject.MinorError> ExchangeImportError;
		public void OnExchangeImportErrorInstanceUpdated(MessageEventArgs busEvent) {
			if( ExchangeImportError != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Referential.UserObject.MinorError;
				if( publicMember != null ) ExchangeImportError(publicMember);
			}
		}
	}
	public class Referential_UserSessionHeartbeatStateMachine : IReferential_UserSessionHeartbeatStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Referential_UserSessionHeartbeatStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
		public void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSessionHeartbeat", obj, visibility);
		}
	}
	public class Referential_UMUpQueryStateMachine : IReferential_UMUpQueryStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Referential_UMUpQueryStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
		public void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UMUpQuery", obj, visibility);
		}
	}
	public class Referential_OpenSessionQueryStateMachine : IReferential_OpenSessionQueryStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Referential_OpenSessionQueryStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
		public void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("OpenSessionQuery", obj, visibility);
		}
	}
	public class Referential_QuickSearchStateMachine : IReferential_QuickSearchStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Referential_QuickSearchStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
		public void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("QuickSearch", obj, visibility);
		}
	
		public event System.Action<XComponent.Referential.UserObject.QuickSearch> QuickSearch;
		public void OnQuickSearchInstanceUpdated(MessageEventArgs busEvent) {
			if( QuickSearch != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Referential.UserObject.QuickSearch;
				if( publicMember != null ) QuickSearch(publicMember);
			}
		}
	}
	public class Referential_ImportManagerStateMachine : IReferential_ImportManagerStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Referential_ImportManagerStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
		public void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ImportManager", obj, visibility);
		}
	
		public event System.Action<XComponent.Referential.UserObject.ImportManager> ImportManager;
		public void OnImportManagerInstanceUpdated(MessageEventArgs busEvent) {
			if( ImportManager != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Referential.UserObject.ImportManager;
				if( publicMember != null ) ImportManager(publicMember);
			}
		}
	}
	public class Referential_ExchangeQueryStateMachine : IReferential_ExchangeQueryStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Referential_ExchangeQueryStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
		public void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ExchangeQuery", obj, visibility);
		}
	}
	public class Referential_CsvDirectoryWatcherStateMachine : IReferential_CsvDirectoryWatcherStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Referential_CsvDirectoryWatcherStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
		public void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CsvDirectoryWatcher", obj, visibility);
		}
	}
	public class Referential_AllInstrumentsRequestStateMachine : IReferential_AllInstrumentsRequestStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Referential_AllInstrumentsRequestStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferential(XComponent.Referential.UserObject.Referential obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendGetFromType(XComponent.Referential.UserObject.GetFromType obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendGetFromId(XComponent.Referential.UserObject.GetFromId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendUpdate(XComponent.Referential.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendGetFromIsin(XComponent.Referential.UserObject.GetFromIsin obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendGetRight(XComponent.UserManagement.UserObject.GetRight obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendIsValid(XComponent.Referential.UserObject.IsValid obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendError(XComponent.Referential.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendDone(XComponent.Referential.UserObject.Done obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendDown(XComponent.Referential.UserObject.Down obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendHeartBeat(XComponent.Referential.UserObject.HeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendCustomInstrumentRequest(XComponent.Referential.UserObject.CustomInstrumentRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendCreateInstrument(XComponent.Referential.UserObject.CreateInstrument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendMultiFieldsQuery(XComponent.Referential.UserObject.MultiFieldsQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendDoQuickSearch(XComponent.Referential.UserObject.DoQuickSearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendImportReferentialFromCsv(XComponent.Referential.UserObject.ImportReferentialFromCsv obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendImport(XComponent.Referential.UserObject.Import obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendGetAllInstruments(XComponent.Referential.UserObject.GetAllInstruments obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendInstrumentLoaded(XComponent.Referential.UserObject.InstrumentLoaded obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendReferentialFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendMinorError(XComponent.Referential.UserObject.MinorError obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendFeedSourceOrchestrator(XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendReferentialTickSizeFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialTickSizeFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendReferentialDictionaryFeed(XComponent.ReferentialFeedSource.UserObject.ReferentialDictionaryFeed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendInstrumentModified(XComponent.Referential.UserObject.InstrumentModified obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendModificationsCompleted(XComponent.Referential.UserObject.ModificationsCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
		public void SendModificationsPartiallyCompleted(XComponent.Referential.UserObject.ModificationsPartiallyCompleted obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("AllInstrumentsRequest", obj, visibility);
		}
	}
	public class ReferentialFeedSource_ReferentialFeedManagerStateMachine : IReferentialFeedSource_ReferentialFeedManagerStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ReferentialFeedSource_ReferentialFeedManagerStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeedManager", obj, visibility);
		}
	
		public event System.Action<XComponent.ReferentialFeedSource.UserObject.ReferentialFeedManager> ReferentialFeedManager;
		public void OnReferentialFeedManagerInstanceUpdated(MessageEventArgs busEvent) {
			if( ReferentialFeedManager != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.ReferentialFeedSource.UserObject.ReferentialFeedManager;
				if( publicMember != null ) ReferentialFeedManager(publicMember);
			}
		}
	}
	public class ReferentialFeedSource_HeartBeatRequestStateMachine : IReferentialFeedSource_HeartBeatRequestStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ReferentialFeedSource_HeartBeatRequestStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("HeartBeatRequest", obj, visibility);
		}
	
		public event System.Action<XComponent.FeedSource.UserObject.HeartBeat> HeartBeatRequest;
		public void OnHeartBeatRequestInstanceUpdated(MessageEventArgs busEvent) {
			if( HeartBeatRequest != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.FeedSource.UserObject.HeartBeat;
				if( publicMember != null ) HeartBeatRequest(publicMember);
			}
		}
	}
	public class ReferentialFeedSource_TimerStateMachine : IReferentialFeedSource_TimerStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ReferentialFeedSource_TimerStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("Timer", obj, visibility);
		}
	}
	public class ReferentialFeedSource_FeedSourceOrchestratorStateMachine : IReferentialFeedSource_FeedSourceOrchestratorStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ReferentialFeedSource_FeedSourceOrchestratorStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("FeedSourceOrchestrator", obj, visibility);
		}
	
		public event System.Action<XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator> FeedSourceOrchestrator;
		public void OnFeedSourceOrchestratorInstanceUpdated(MessageEventArgs busEvent) {
			if( FeedSourceOrchestrator != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.ReferentialFeedSource.UserObject.FeedSourceOrchestrator;
				if( publicMember != null ) FeedSourceOrchestrator(publicMember);
			}
		}
	}
	public class ReferentialFeedSource_DictionaryRequestStateMachine : IReferentialFeedSource_DictionaryRequestStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ReferentialFeedSource_DictionaryRequestStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DictionaryRequest", obj, visibility);
		}
	}
	public class ReferentialFeedSource_TickSizeRequestStateMachine : IReferentialFeedSource_TickSizeRequestStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ReferentialFeedSource_TickSizeRequestStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TickSizeRequest", obj, visibility);
		}
	}
	public class ReferentialFeedSource_StockWatchRequestStateMachine : IReferentialFeedSource_StockWatchRequestStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ReferentialFeedSource_StockWatchRequestStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("StockWatchRequest", obj, visibility);
		}
	}
	public class ReferentialFeedSource_ReferentialFeedStateMachine : IReferentialFeedSource_ReferentialFeedStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ReferentialFeedSource_ReferentialFeedStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ReferentialFeed", obj, visibility);
		}
	
		public event System.Action<XComponent.ReferentialFeedSource.UserObject.ReferentialFeed> ReferentialFeed;
		public void OnReferentialFeedInstanceUpdated(MessageEventArgs busEvent) {
			if( ReferentialFeed != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.ReferentialFeedSource.UserObject.ReferentialFeed;
				if( publicMember != null ) ReferentialFeed(publicMember);
			}
		}
	}
	public class ReferentialFeedSource_ShutDownTimerStateMachine : IReferentialFeedSource_ShutDownTimerStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ReferentialFeedSource_ShutDownTimerStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ShutDownTimer", obj, visibility);
		}
	
		public event System.Action<XComponent.ReferentialFeedSource.UserObject.ShutDownTimer> ShutDownTimer;
		public void OnShutDownTimerInstanceUpdated(MessageEventArgs busEvent) {
			if( ShutDownTimer != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.ReferentialFeedSource.UserObject.ShutDownTimer;
				if( publicMember != null ) ShutDownTimer(publicMember);
			}
		}
	}
	public class ReferentialFeedSource_TickSizeFeedStateMachine : IReferentialFeedSource_TickSizeFeedStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ReferentialFeedSource_TickSizeFeedStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("TickSizeFeed", obj, visibility);
		}
	}
	public class ReferentialFeedSource_DictionaryFeedStateMachine : IReferentialFeedSource_DictionaryFeedStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ReferentialFeedSource_DictionaryFeedStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendReferentialFeedDescriptor(XComponent.ReferentialFeedSource.UserObject.ReferentialFeedDescriptor obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("DictionaryFeed", obj, visibility);
		}
	}
	public class ReportsManager_ReportsManagerStateMachine : IReportsManager_ReportsManagerStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ReportsManager_ReportsManagerStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	}
	public class ReportsManager_ReportsListStateMachine : IReportsManager_ReportsListStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ReportsManager_ReportsListStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	}
	public class ReportsManager_RightRequestStateMachine : IReportsManager_RightRequestStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ReportsManager_RightRequestStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	}
	public class ReportsManager_ReportUpdateStateMachine : IReportsManager_ReportUpdateStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public ReportsManager_ReportUpdateStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	}
	public class Research_ResearchCacheStateMachine : IResearch_ResearchCacheStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Research_ResearchCacheStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendFindResearch(XComponent.Research.UserObject.FindResearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchCache", obj, visibility);
		}
		public void SendGetResearchEntity(XComponent.Research.UserObject.GetResearchEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchCache", obj, visibility);
		}
		public void SendInitFailed(XComponent.Research.UserObject.InitFailed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchCache", obj, visibility);
		}
		public void SendGetResearchDocument(XComponent.Research.UserObject.GetResearchDocument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchCache", obj, visibility);
		}
		public void SendSuggestQuery(XComponent.Research.UserObject.SuggestQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchCache", obj, visibility);
		}
		public void SendGetLatestResearch(XComponent.Research.UserObject.GetLatestResearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchCache", obj, visibility);
		}
		public void SendInitOk(XComponent.Research.UserObject.InitOk obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchCache", obj, visibility);
		}
		public void SendRebuildIndex(XComponent.Research.UserObject.RebuildIndex obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchCache", obj, visibility);
		}
		public void SendUpdate(XComponent.Research.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchCache", obj, visibility);
		}
	
		public event System.Action<XComponent.Research.UserObject.ResearchCache> ResearchCache;
		public void OnResearchCacheInstanceUpdated(MessageEventArgs busEvent) {
			if( ResearchCache != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Research.UserObject.ResearchCache;
				if( publicMember != null ) ResearchCache(publicMember);
			}
		}
	}
	public class Research_ResearchEntityStateMachine : IResearch_ResearchEntityStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Research_ResearchEntityStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendFindResearch(XComponent.Research.UserObject.FindResearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchEntity", obj, visibility);
		}
		public void SendGetResearchEntity(XComponent.Research.UserObject.GetResearchEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchEntity", obj, visibility);
		}
		public void SendInitFailed(XComponent.Research.UserObject.InitFailed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchEntity", obj, visibility);
		}
		public void SendGetResearchDocument(XComponent.Research.UserObject.GetResearchDocument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchEntity", obj, visibility);
		}
		public void SendSuggestQuery(XComponent.Research.UserObject.SuggestQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchEntity", obj, visibility);
		}
		public void SendGetLatestResearch(XComponent.Research.UserObject.GetLatestResearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchEntity", obj, visibility);
		}
		public void SendInitOk(XComponent.Research.UserObject.InitOk obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchEntity", obj, visibility);
		}
		public void SendRebuildIndex(XComponent.Research.UserObject.RebuildIndex obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchEntity", obj, visibility);
		}
		public void SendUpdate(XComponent.Research.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchEntity", obj, visibility);
		}
	
		public event System.Action<XComponent.Research.UserObject.ResearchEntity> ResearchEntity;
		public void OnResearchEntityInstanceUpdated(MessageEventArgs busEvent) {
			if( ResearchEntity != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Research.UserObject.ResearchEntity;
				if( publicMember != null ) ResearchEntity(publicMember);
			}
		}
	}
	public class Research_ResearchDocumentStateMachine : IResearch_ResearchDocumentStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Research_ResearchDocumentStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendFindResearch(XComponent.Research.UserObject.FindResearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchDocument", obj, visibility);
		}
		public void SendGetResearchEntity(XComponent.Research.UserObject.GetResearchEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchDocument", obj, visibility);
		}
		public void SendInitFailed(XComponent.Research.UserObject.InitFailed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchDocument", obj, visibility);
		}
		public void SendGetResearchDocument(XComponent.Research.UserObject.GetResearchDocument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchDocument", obj, visibility);
		}
		public void SendSuggestQuery(XComponent.Research.UserObject.SuggestQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchDocument", obj, visibility);
		}
		public void SendGetLatestResearch(XComponent.Research.UserObject.GetLatestResearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchDocument", obj, visibility);
		}
		public void SendInitOk(XComponent.Research.UserObject.InitOk obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchDocument", obj, visibility);
		}
		public void SendRebuildIndex(XComponent.Research.UserObject.RebuildIndex obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchDocument", obj, visibility);
		}
		public void SendUpdate(XComponent.Research.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchDocument", obj, visibility);
		}
	
		public event System.Action<XComponent.Research.UserObject.ResearchDocumentResponse> ResearchDocument;
		public void OnResearchDocumentInstanceUpdated(MessageEventArgs busEvent) {
			if( ResearchDocument != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Research.UserObject.ResearchDocumentResponse;
				if( publicMember != null ) ResearchDocument(publicMember);
			}
		}
	}
	public class Research_CacheUpdaterStateMachine : IResearch_CacheUpdaterStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Research_CacheUpdaterStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendFindResearch(XComponent.Research.UserObject.FindResearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CacheUpdater", obj, visibility);
		}
		public void SendGetResearchEntity(XComponent.Research.UserObject.GetResearchEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CacheUpdater", obj, visibility);
		}
		public void SendInitFailed(XComponent.Research.UserObject.InitFailed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CacheUpdater", obj, visibility);
		}
		public void SendGetResearchDocument(XComponent.Research.UserObject.GetResearchDocument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CacheUpdater", obj, visibility);
		}
		public void SendSuggestQuery(XComponent.Research.UserObject.SuggestQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CacheUpdater", obj, visibility);
		}
		public void SendGetLatestResearch(XComponent.Research.UserObject.GetLatestResearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CacheUpdater", obj, visibility);
		}
		public void SendInitOk(XComponent.Research.UserObject.InitOk obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CacheUpdater", obj, visibility);
		}
		public void SendRebuildIndex(XComponent.Research.UserObject.RebuildIndex obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CacheUpdater", obj, visibility);
		}
		public void SendUpdate(XComponent.Research.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CacheUpdater", obj, visibility);
		}
	
		public event System.Action<XComponent.Research.UserObject.CacheUpdater> CacheUpdater;
		public void OnCacheUpdaterInstanceUpdated(MessageEventArgs busEvent) {
			if( CacheUpdater != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Research.UserObject.CacheUpdater;
				if( publicMember != null ) CacheUpdater(publicMember);
			}
		}
	}
	public class Research_ResearchQueryStateMachine : IResearch_ResearchQueryStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Research_ResearchQueryStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendFindResearch(XComponent.Research.UserObject.FindResearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchQuery", obj, visibility);
		}
		public void SendGetResearchEntity(XComponent.Research.UserObject.GetResearchEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchQuery", obj, visibility);
		}
		public void SendInitFailed(XComponent.Research.UserObject.InitFailed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchQuery", obj, visibility);
		}
		public void SendGetResearchDocument(XComponent.Research.UserObject.GetResearchDocument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchQuery", obj, visibility);
		}
		public void SendSuggestQuery(XComponent.Research.UserObject.SuggestQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchQuery", obj, visibility);
		}
		public void SendGetLatestResearch(XComponent.Research.UserObject.GetLatestResearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchQuery", obj, visibility);
		}
		public void SendInitOk(XComponent.Research.UserObject.InitOk obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchQuery", obj, visibility);
		}
		public void SendRebuildIndex(XComponent.Research.UserObject.RebuildIndex obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchQuery", obj, visibility);
		}
		public void SendUpdate(XComponent.Research.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchQuery", obj, visibility);
		}
	
		public event System.Action<XComponent.Research.UserObject.ResearchQueryResult> ResearchQuery;
		public void OnResearchQueryInstanceUpdated(MessageEventArgs busEvent) {
			if( ResearchQuery != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Research.UserObject.ResearchQueryResult;
				if( publicMember != null ) ResearchQuery(publicMember);
			}
		}
	}
	public class Research_ResearchSuggestQueryStateMachine : IResearch_ResearchSuggestQueryStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Research_ResearchSuggestQueryStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendFindResearch(XComponent.Research.UserObject.FindResearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchSuggestQuery", obj, visibility);
		}
		public void SendGetResearchEntity(XComponent.Research.UserObject.GetResearchEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchSuggestQuery", obj, visibility);
		}
		public void SendInitFailed(XComponent.Research.UserObject.InitFailed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchSuggestQuery", obj, visibility);
		}
		public void SendGetResearchDocument(XComponent.Research.UserObject.GetResearchDocument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchSuggestQuery", obj, visibility);
		}
		public void SendSuggestQuery(XComponent.Research.UserObject.SuggestQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchSuggestQuery", obj, visibility);
		}
		public void SendGetLatestResearch(XComponent.Research.UserObject.GetLatestResearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchSuggestQuery", obj, visibility);
		}
		public void SendInitOk(XComponent.Research.UserObject.InitOk obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchSuggestQuery", obj, visibility);
		}
		public void SendRebuildIndex(XComponent.Research.UserObject.RebuildIndex obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchSuggestQuery", obj, visibility);
		}
		public void SendUpdate(XComponent.Research.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchSuggestQuery", obj, visibility);
		}
	
		public event System.Action<XComponent.Research.UserObject.WordSuggested> ResearchSuggestQuery;
		public void OnResearchSuggestQueryInstanceUpdated(MessageEventArgs busEvent) {
			if( ResearchSuggestQuery != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Research.UserObject.WordSuggested;
				if( publicMember != null ) ResearchSuggestQuery(publicMember);
			}
		}
	}
	public class Research_InstrumentDetailsStateMachine : IResearch_InstrumentDetailsStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Research_InstrumentDetailsStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendFindResearch(XComponent.Research.UserObject.FindResearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentDetails", obj, visibility);
		}
		public void SendGetResearchEntity(XComponent.Research.UserObject.GetResearchEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentDetails", obj, visibility);
		}
		public void SendInitFailed(XComponent.Research.UserObject.InitFailed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentDetails", obj, visibility);
		}
		public void SendGetResearchDocument(XComponent.Research.UserObject.GetResearchDocument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentDetails", obj, visibility);
		}
		public void SendSuggestQuery(XComponent.Research.UserObject.SuggestQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentDetails", obj, visibility);
		}
		public void SendGetLatestResearch(XComponent.Research.UserObject.GetLatestResearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentDetails", obj, visibility);
		}
		public void SendInitOk(XComponent.Research.UserObject.InitOk obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentDetails", obj, visibility);
		}
		public void SendRebuildIndex(XComponent.Research.UserObject.RebuildIndex obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentDetails", obj, visibility);
		}
		public void SendUpdate(XComponent.Research.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("InstrumentDetails", obj, visibility);
		}
	}
	public class Research_ResearchSettingsStateMachine : IResearch_ResearchSettingsStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public Research_ResearchSettingsStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendFindResearch(XComponent.Research.UserObject.FindResearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchSettings", obj, visibility);
		}
		public void SendGetResearchEntity(XComponent.Research.UserObject.GetResearchEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchSettings", obj, visibility);
		}
		public void SendInitFailed(XComponent.Research.UserObject.InitFailed obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchSettings", obj, visibility);
		}
		public void SendGetResearchDocument(XComponent.Research.UserObject.GetResearchDocument obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchSettings", obj, visibility);
		}
		public void SendSuggestQuery(XComponent.Research.UserObject.SuggestQuery obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchSettings", obj, visibility);
		}
		public void SendGetLatestResearch(XComponent.Research.UserObject.GetLatestResearch obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchSettings", obj, visibility);
		}
		public void SendInitOk(XComponent.Research.UserObject.InitOk obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchSettings", obj, visibility);
		}
		public void SendRebuildIndex(XComponent.Research.UserObject.RebuildIndex obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchSettings", obj, visibility);
		}
		public void SendUpdate(XComponent.Research.UserObject.Update obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ResearchSettings", obj, visibility);
		}
	
		public event System.Action<XComponent.Research.UserObject.ResearchSettings> ResearchSettings;
		public void OnResearchSettingsInstanceUpdated(MessageEventArgs busEvent) {
			if( ResearchSettings != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.Research.UserObject.ResearchSettings;
				if( publicMember != null ) ResearchSettings(publicMember);
			}
		}
	}
	public class UserManagement_UserManagementStateMachine : IUserManagement_UserManagementStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public UserManagement_UserManagementStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserManagement", obj, visibility);
		}
		public void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserManagement", obj, visibility);
		}
		public void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserManagement", obj, visibility);
		}
		public void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserManagement", obj, visibility);
		}
		public void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserManagement", obj, visibility);
		}
		public void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserManagement", obj, visibility);
		}
		public void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserManagement", obj, visibility);
		}
		public void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserManagement", obj, visibility);
		}
		public void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserManagement", obj, visibility);
		}
		public void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserManagement", obj, visibility);
		}
		public void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserManagement", obj, visibility);
		}
		public void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserManagement", obj, visibility);
		}
		public void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserManagement", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserManagement", obj, visibility);
		}
		public void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserManagement", obj, visibility);
		}
		public void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserManagement", obj, visibility);
		}
		public void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserManagement", obj, visibility);
		}
		public void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserManagement", obj, visibility);
		}
		public void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserManagement", obj, visibility);
		}
		public void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserManagement", obj, visibility);
		}
	
		public event System.Action<XComponent.UserManagement.UserObject.UserManagement> UserManagement;
		public void OnUserManagementInstanceUpdated(MessageEventArgs busEvent) {
			if( UserManagement != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.UserManagement.UserObject.UserManagement;
				if( publicMember != null ) UserManagement(publicMember);
			}
		}
	}
	public class UserManagement_UserSessionStateMachine : IUserManagement_UserSessionStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public UserManagement_UserSessionStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSession", obj, visibility);
		}
		public void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSession", obj, visibility);
		}
		public void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSession", obj, visibility);
		}
		public void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSession", obj, visibility);
		}
		public void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSession", obj, visibility);
		}
		public void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSession", obj, visibility);
		}
		public void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSession", obj, visibility);
		}
		public void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSession", obj, visibility);
		}
		public void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSession", obj, visibility);
		}
		public void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSession", obj, visibility);
		}
		public void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSession", obj, visibility);
		}
		public void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSession", obj, visibility);
		}
		public void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSession", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSession", obj, visibility);
		}
		public void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSession", obj, visibility);
		}
		public void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSession", obj, visibility);
		}
		public void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSession", obj, visibility);
		}
		public void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSession", obj, visibility);
		}
		public void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSession", obj, visibility);
		}
		public void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserSession", obj, visibility);
		}
	
		public event System.Action<XComponent.UserManagement.UserObject.UserSessionInfo> UserSession;
		public void OnUserSessionInstanceUpdated(MessageEventArgs busEvent) {
			if( UserSession != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.UserManagement.UserObject.UserSessionInfo;
				if( publicMember != null ) UserSession(publicMember);
			}
		}
	}
	public class UserManagement_ManagingActionStateMachine : IUserManagement_ManagingActionStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public UserManagement_ManagingActionStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ManagingAction", obj, visibility);
		}
		public void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ManagingAction", obj, visibility);
		}
		public void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ManagingAction", obj, visibility);
		}
		public void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ManagingAction", obj, visibility);
		}
		public void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ManagingAction", obj, visibility);
		}
		public void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ManagingAction", obj, visibility);
		}
		public void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ManagingAction", obj, visibility);
		}
		public void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ManagingAction", obj, visibility);
		}
		public void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ManagingAction", obj, visibility);
		}
		public void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ManagingAction", obj, visibility);
		}
		public void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ManagingAction", obj, visibility);
		}
		public void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ManagingAction", obj, visibility);
		}
		public void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ManagingAction", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ManagingAction", obj, visibility);
		}
		public void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ManagingAction", obj, visibility);
		}
		public void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ManagingAction", obj, visibility);
		}
		public void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ManagingAction", obj, visibility);
		}
		public void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ManagingAction", obj, visibility);
		}
		public void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ManagingAction", obj, visibility);
		}
		public void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ManagingAction", obj, visibility);
		}
	}
	public class UserManagement_GetRightStateMachine : IUserManagement_GetRightStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public UserManagement_GetRightStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetRight", obj, visibility);
		}
		public void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetRight", obj, visibility);
		}
		public void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetRight", obj, visibility);
		}
		public void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetRight", obj, visibility);
		}
		public void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetRight", obj, visibility);
		}
		public void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetRight", obj, visibility);
		}
		public void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetRight", obj, visibility);
		}
		public void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetRight", obj, visibility);
		}
		public void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetRight", obj, visibility);
		}
		public void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetRight", obj, visibility);
		}
		public void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetRight", obj, visibility);
		}
		public void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetRight", obj, visibility);
		}
		public void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetRight", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetRight", obj, visibility);
		}
		public void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetRight", obj, visibility);
		}
		public void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetRight", obj, visibility);
		}
		public void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetRight", obj, visibility);
		}
		public void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetRight", obj, visibility);
		}
		public void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetRight", obj, visibility);
		}
		public void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetRight", obj, visibility);
		}
	
		public event System.Action<XComponent.UserManagement.UserObject.GetRight> GetRight;
		public void OnGetRightInstanceUpdated(MessageEventArgs busEvent) {
			if( GetRight != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.UserManagement.UserObject.GetRight;
				if( publicMember != null ) GetRight(publicMember);
			}
		}
	}
	public class UserManagement_RightRequestStateMachine : IUserManagement_RightRequestStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public UserManagement_RightRequestStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
		public void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("RightRequest", obj, visibility);
		}
	}
	public class UserManagement_CachedPermissionCheckerStateMachine : IUserManagement_CachedPermissionCheckerStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public UserManagement_CachedPermissionCheckerStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CachedPermissionChecker", obj, visibility);
		}
		public void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CachedPermissionChecker", obj, visibility);
		}
		public void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CachedPermissionChecker", obj, visibility);
		}
		public void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CachedPermissionChecker", obj, visibility);
		}
		public void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CachedPermissionChecker", obj, visibility);
		}
		public void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CachedPermissionChecker", obj, visibility);
		}
		public void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CachedPermissionChecker", obj, visibility);
		}
		public void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CachedPermissionChecker", obj, visibility);
		}
		public void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CachedPermissionChecker", obj, visibility);
		}
		public void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CachedPermissionChecker", obj, visibility);
		}
		public void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CachedPermissionChecker", obj, visibility);
		}
		public void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CachedPermissionChecker", obj, visibility);
		}
		public void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CachedPermissionChecker", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CachedPermissionChecker", obj, visibility);
		}
		public void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CachedPermissionChecker", obj, visibility);
		}
		public void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CachedPermissionChecker", obj, visibility);
		}
		public void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CachedPermissionChecker", obj, visibility);
		}
		public void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CachedPermissionChecker", obj, visibility);
		}
		public void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CachedPermissionChecker", obj, visibility);
		}
		public void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("CachedPermissionChecker", obj, visibility);
		}
	
		public event System.Action<XComponent.UserManagement.UserObject.CachedPermissionChecker> CachedPermissionChecker;
		public void OnCachedPermissionCheckerInstanceUpdated(MessageEventArgs busEvent) {
			if( CachedPermissionChecker != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.UserManagement.UserObject.CachedPermissionChecker;
				if( publicMember != null ) CachedPermissionChecker(publicMember);
			}
		}
	}
	public class UserManagement_PermissionsSnapshotStateMachine : IUserManagement_PermissionsSnapshotStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public UserManagement_PermissionsSnapshotStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("PermissionsSnapshot", obj, visibility);
		}
		public void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("PermissionsSnapshot", obj, visibility);
		}
		public void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("PermissionsSnapshot", obj, visibility);
		}
		public void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("PermissionsSnapshot", obj, visibility);
		}
		public void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("PermissionsSnapshot", obj, visibility);
		}
		public void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("PermissionsSnapshot", obj, visibility);
		}
		public void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("PermissionsSnapshot", obj, visibility);
		}
		public void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("PermissionsSnapshot", obj, visibility);
		}
		public void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("PermissionsSnapshot", obj, visibility);
		}
		public void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("PermissionsSnapshot", obj, visibility);
		}
		public void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("PermissionsSnapshot", obj, visibility);
		}
		public void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("PermissionsSnapshot", obj, visibility);
		}
		public void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("PermissionsSnapshot", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("PermissionsSnapshot", obj, visibility);
		}
		public void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("PermissionsSnapshot", obj, visibility);
		}
		public void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("PermissionsSnapshot", obj, visibility);
		}
		public void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("PermissionsSnapshot", obj, visibility);
		}
		public void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("PermissionsSnapshot", obj, visibility);
		}
		public void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("PermissionsSnapshot", obj, visibility);
		}
		public void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("PermissionsSnapshot", obj, visibility);
		}
	}
	public class UserManagement_GetCustomRightStateMachine : IUserManagement_GetCustomRightStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public UserManagement_GetCustomRightStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetCustomRight", obj, visibility);
		}
		public void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetCustomRight", obj, visibility);
		}
		public void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetCustomRight", obj, visibility);
		}
		public void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetCustomRight", obj, visibility);
		}
		public void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetCustomRight", obj, visibility);
		}
		public void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetCustomRight", obj, visibility);
		}
		public void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetCustomRight", obj, visibility);
		}
		public void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetCustomRight", obj, visibility);
		}
		public void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetCustomRight", obj, visibility);
		}
		public void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetCustomRight", obj, visibility);
		}
		public void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetCustomRight", obj, visibility);
		}
		public void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetCustomRight", obj, visibility);
		}
		public void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetCustomRight", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetCustomRight", obj, visibility);
		}
		public void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetCustomRight", obj, visibility);
		}
		public void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetCustomRight", obj, visibility);
		}
		public void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetCustomRight", obj, visibility);
		}
		public void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetCustomRight", obj, visibility);
		}
		public void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetCustomRight", obj, visibility);
		}
		public void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetCustomRight", obj, visibility);
		}
	}
	public class UserManagement_ChangePasswordStateMachine : IUserManagement_ChangePasswordStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public UserManagement_ChangePasswordStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ChangePassword", obj, visibility);
		}
		public void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ChangePassword", obj, visibility);
		}
		public void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ChangePassword", obj, visibility);
		}
		public void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ChangePassword", obj, visibility);
		}
		public void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ChangePassword", obj, visibility);
		}
		public void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ChangePassword", obj, visibility);
		}
		public void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ChangePassword", obj, visibility);
		}
		public void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ChangePassword", obj, visibility);
		}
		public void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ChangePassword", obj, visibility);
		}
		public void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ChangePassword", obj, visibility);
		}
		public void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ChangePassword", obj, visibility);
		}
		public void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ChangePassword", obj, visibility);
		}
		public void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ChangePassword", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ChangePassword", obj, visibility);
		}
		public void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ChangePassword", obj, visibility);
		}
		public void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ChangePassword", obj, visibility);
		}
		public void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ChangePassword", obj, visibility);
		}
		public void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ChangePassword", obj, visibility);
		}
		public void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ChangePassword", obj, visibility);
		}
		public void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("ChangePassword", obj, visibility);
		}
	
		public event System.Action<XComponent.UserManagement.UserObject.ChangingPassword> ChangePassword;
		public void OnChangePasswordInstanceUpdated(MessageEventArgs busEvent) {
			if( ChangePassword != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.UserManagement.UserObject.ChangingPassword;
				if( publicMember != null ) ChangePassword(publicMember);
			}
		}
	}
	public class UserManagement_SessionIdDownStateMachine : IUserManagement_SessionIdDownStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public UserManagement_SessionIdDownStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionIdDown", obj, visibility);
		}
		public void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionIdDown", obj, visibility);
		}
		public void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionIdDown", obj, visibility);
		}
		public void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionIdDown", obj, visibility);
		}
		public void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionIdDown", obj, visibility);
		}
		public void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionIdDown", obj, visibility);
		}
		public void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionIdDown", obj, visibility);
		}
		public void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionIdDown", obj, visibility);
		}
		public void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionIdDown", obj, visibility);
		}
		public void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionIdDown", obj, visibility);
		}
		public void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionIdDown", obj, visibility);
		}
		public void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionIdDown", obj, visibility);
		}
		public void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionIdDown", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionIdDown", obj, visibility);
		}
		public void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionIdDown", obj, visibility);
		}
		public void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionIdDown", obj, visibility);
		}
		public void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionIdDown", obj, visibility);
		}
		public void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionIdDown", obj, visibility);
		}
		public void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionIdDown", obj, visibility);
		}
		public void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionIdDown", obj, visibility);
		}
	}
	public class UserManagement_SessionUpdatedStateMachine : IUserManagement_SessionUpdatedStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public UserManagement_SessionUpdatedStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionUpdated", obj, visibility);
		}
		public void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionUpdated", obj, visibility);
		}
		public void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionUpdated", obj, visibility);
		}
		public void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionUpdated", obj, visibility);
		}
		public void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionUpdated", obj, visibility);
		}
		public void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionUpdated", obj, visibility);
		}
		public void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionUpdated", obj, visibility);
		}
		public void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionUpdated", obj, visibility);
		}
		public void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionUpdated", obj, visibility);
		}
		public void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionUpdated", obj, visibility);
		}
		public void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionUpdated", obj, visibility);
		}
		public void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionUpdated", obj, visibility);
		}
		public void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionUpdated", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionUpdated", obj, visibility);
		}
		public void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionUpdated", obj, visibility);
		}
		public void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionUpdated", obj, visibility);
		}
		public void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionUpdated", obj, visibility);
		}
		public void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionUpdated", obj, visibility);
		}
		public void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionUpdated", obj, visibility);
		}
		public void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionUpdated", obj, visibility);
		}
	}
	public class UserManagement_SessionsToRecoverSnapshotStateMachine : IUserManagement_SessionsToRecoverSnapshotStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public UserManagement_SessionsToRecoverSnapshotStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionsToRecoverSnapshot", obj, visibility);
		}
		public void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionsToRecoverSnapshot", obj, visibility);
		}
		public void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionsToRecoverSnapshot", obj, visibility);
		}
		public void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionsToRecoverSnapshot", obj, visibility);
		}
		public void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionsToRecoverSnapshot", obj, visibility);
		}
		public void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionsToRecoverSnapshot", obj, visibility);
		}
		public void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionsToRecoverSnapshot", obj, visibility);
		}
		public void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionsToRecoverSnapshot", obj, visibility);
		}
		public void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionsToRecoverSnapshot", obj, visibility);
		}
		public void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionsToRecoverSnapshot", obj, visibility);
		}
		public void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionsToRecoverSnapshot", obj, visibility);
		}
		public void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionsToRecoverSnapshot", obj, visibility);
		}
		public void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionsToRecoverSnapshot", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionsToRecoverSnapshot", obj, visibility);
		}
		public void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionsToRecoverSnapshot", obj, visibility);
		}
		public void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionsToRecoverSnapshot", obj, visibility);
		}
		public void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionsToRecoverSnapshot", obj, visibility);
		}
		public void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionsToRecoverSnapshot", obj, visibility);
		}
		public void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionsToRecoverSnapshot", obj, visibility);
		}
		public void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("SessionsToRecoverSnapshot", obj, visibility);
		}
	}
	public class UserManagement_UserRightHistoryStateMachine : IUserManagement_UserRightHistoryStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public UserManagement_UserRightHistoryStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserRightHistory", obj, visibility);
		}
		public void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserRightHistory", obj, visibility);
		}
		public void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserRightHistory", obj, visibility);
		}
		public void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserRightHistory", obj, visibility);
		}
		public void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserRightHistory", obj, visibility);
		}
		public void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserRightHistory", obj, visibility);
		}
		public void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserRightHistory", obj, visibility);
		}
		public void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserRightHistory", obj, visibility);
		}
		public void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserRightHistory", obj, visibility);
		}
		public void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserRightHistory", obj, visibility);
		}
		public void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserRightHistory", obj, visibility);
		}
		public void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserRightHistory", obj, visibility);
		}
		public void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserRightHistory", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserRightHistory", obj, visibility);
		}
		public void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserRightHistory", obj, visibility);
		}
		public void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserRightHistory", obj, visibility);
		}
		public void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserRightHistory", obj, visibility);
		}
		public void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserRightHistory", obj, visibility);
		}
		public void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserRightHistory", obj, visibility);
		}
		public void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserRightHistory", obj, visibility);
		}
	}
	public class UserManagement_GetSessionStateMachine : IUserManagement_GetSessionStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public UserManagement_GetSessionStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSession", obj, visibility);
		}
		public void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSession", obj, visibility);
		}
		public void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSession", obj, visibility);
		}
		public void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSession", obj, visibility);
		}
		public void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSession", obj, visibility);
		}
		public void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSession", obj, visibility);
		}
		public void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSession", obj, visibility);
		}
		public void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSession", obj, visibility);
		}
		public void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSession", obj, visibility);
		}
		public void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSession", obj, visibility);
		}
		public void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSession", obj, visibility);
		}
		public void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSession", obj, visibility);
		}
		public void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSession", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSession", obj, visibility);
		}
		public void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSession", obj, visibility);
		}
		public void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSession", obj, visibility);
		}
		public void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSession", obj, visibility);
		}
		public void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSession", obj, visibility);
		}
		public void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSession", obj, visibility);
		}
		public void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("GetSession", obj, visibility);
		}
	}
	public class UserManagement_UserEntityInfoStateMachine : IUserManagement_UserEntityInfoStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public UserManagement_UserEntityInfoStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserEntityInfo", obj, visibility);
		}
		public void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserEntityInfo", obj, visibility);
		}
		public void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserEntityInfo", obj, visibility);
		}
		public void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserEntityInfo", obj, visibility);
		}
		public void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserEntityInfo", obj, visibility);
		}
		public void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserEntityInfo", obj, visibility);
		}
		public void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserEntityInfo", obj, visibility);
		}
		public void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserEntityInfo", obj, visibility);
		}
		public void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserEntityInfo", obj, visibility);
		}
		public void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserEntityInfo", obj, visibility);
		}
		public void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserEntityInfo", obj, visibility);
		}
		public void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserEntityInfo", obj, visibility);
		}
		public void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserEntityInfo", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserEntityInfo", obj, visibility);
		}
		public void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserEntityInfo", obj, visibility);
		}
		public void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserEntityInfo", obj, visibility);
		}
		public void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserEntityInfo", obj, visibility);
		}
		public void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserEntityInfo", obj, visibility);
		}
		public void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserEntityInfo", obj, visibility);
		}
		public void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("UserEntityInfo", obj, visibility);
		}
	
		public event System.Action<XComponent.UserManagement.UserObject.UserEntityInfo> UserEntityInfo;
		public void OnUserEntityInfoInstanceUpdated(MessageEventArgs busEvent) {
			if( UserEntityInfo != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.UserManagement.UserObject.UserEntityInfo;
				if( publicMember != null ) UserEntityInfo(publicMember);
			}
		}
	}
	public class UserManagement_MarketDataAccessHistorySnapshotStateMachine : IUserManagement_MarketDataAccessHistorySnapshotStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public UserManagement_MarketDataAccessHistorySnapshotStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessHistorySnapshot", obj, visibility);
		}
		public void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessHistorySnapshot", obj, visibility);
		}
		public void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessHistorySnapshot", obj, visibility);
		}
		public void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessHistorySnapshot", obj, visibility);
		}
		public void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessHistorySnapshot", obj, visibility);
		}
		public void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessHistorySnapshot", obj, visibility);
		}
		public void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessHistorySnapshot", obj, visibility);
		}
		public void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessHistorySnapshot", obj, visibility);
		}
		public void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessHistorySnapshot", obj, visibility);
		}
		public void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessHistorySnapshot", obj, visibility);
		}
		public void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessHistorySnapshot", obj, visibility);
		}
		public void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessHistorySnapshot", obj, visibility);
		}
		public void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessHistorySnapshot", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessHistorySnapshot", obj, visibility);
		}
		public void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessHistorySnapshot", obj, visibility);
		}
		public void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessHistorySnapshot", obj, visibility);
		}
		public void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessHistorySnapshot", obj, visibility);
		}
		public void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessHistorySnapshot", obj, visibility);
		}
		public void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessHistorySnapshot", obj, visibility);
		}
		public void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessHistorySnapshot", obj, visibility);
		}
	}
	public class UserManagement_MarketDataAccessReportGeneratorStateMachine : IUserManagement_MarketDataAccessReportGeneratorStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public UserManagement_MarketDataAccessReportGeneratorStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessReportGenerator", obj, visibility);
		}
		public void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessReportGenerator", obj, visibility);
		}
		public void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessReportGenerator", obj, visibility);
		}
		public void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessReportGenerator", obj, visibility);
		}
		public void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessReportGenerator", obj, visibility);
		}
		public void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessReportGenerator", obj, visibility);
		}
		public void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessReportGenerator", obj, visibility);
		}
		public void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessReportGenerator", obj, visibility);
		}
		public void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessReportGenerator", obj, visibility);
		}
		public void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessReportGenerator", obj, visibility);
		}
		public void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessReportGenerator", obj, visibility);
		}
		public void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessReportGenerator", obj, visibility);
		}
		public void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessReportGenerator", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessReportGenerator", obj, visibility);
		}
		public void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessReportGenerator", obj, visibility);
		}
		public void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessReportGenerator", obj, visibility);
		}
		public void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessReportGenerator", obj, visibility);
		}
		public void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessReportGenerator", obj, visibility);
		}
		public void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessReportGenerator", obj, visibility);
		}
		public void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("MarketDataAccessReportGenerator", obj, visibility);
		}
	}
	public class UserManagement_BackendInfoStateMachine : IUserManagement_BackendInfoStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public UserManagement_BackendInfoStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
		public void SendError(XComponent.UserManagement.UserObject.Error obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("BackendInfo", obj, visibility);
		}
		public void SendOpenSession(XComponent.UserManagement.UserObject.OpenSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("BackendInfo", obj, visibility);
		}
		public void SendPing(XComponent.UserManagement.UserObject.Ping obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("BackendInfo", obj, visibility);
		}
		public void SendDoManagingAction(XComponent.UserManagement.UserObject.DoManagingAction obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("BackendInfo", obj, visibility);
		}
		public void SendChangingPassword(XComponent.UserManagement.UserObject.ChangingPassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("BackendInfo", obj, visibility);
		}
		public void SendCloseSession(XComponent.UserManagement.UserObject.CloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("BackendInfo", obj, visibility);
		}
		public void SendGetPermissionsSnapshot(XComponent.UserManagement.UserObject.GetPermissionsSnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("BackendInfo", obj, visibility);
		}
		public void SendCustomRightRequest(XComponent.UserManagement.UserObject.CustomRightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("BackendInfo", obj, visibility);
		}
		public void SendChangePassword(XComponent.UserManagement.UserObject.ChangePassword obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("BackendInfo", obj, visibility);
		}
		public void SendClientSessionHeartBeat(XComponent.UserManagement.UserObject.ClientSessionHeartBeat obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("BackendInfo", obj, visibility);
		}
		public void SendInnerCloseSession(XComponent.UserManagement.UserObject.InnerCloseSession obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("BackendInfo", obj, visibility);
		}
		public void SendSessionUpdated(XComponent.UserManagement.UserObject.SessionUpdated obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("BackendInfo", obj, visibility);
		}
		public void SendGetUserRightHistory(XComponent.UserManagement.UserObject.GetUserRightHistory obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("BackendInfo", obj, visibility);
		}
		public void SendRightRequest(XComponent.UserManagement.UserObject.RightRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("BackendInfo", obj, visibility);
		}
		public void SendGetSessionRequest(XComponent.UserManagement.UserObject.GetSessionRequest obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("BackendInfo", obj, visibility);
		}
		public void SendGetUserEntity(XComponent.UserManagement.UserObject.GetUserEntity obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("BackendInfo", obj, visibility);
		}
		public void SendGetSessionRequestByDbId(XComponent.UserManagement.UserObject.GetSessionRequestByDbId obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("BackendInfo", obj, visibility);
		}
		public void SendGetMarketDataAccessHistorySnapshot(XComponent.UserManagement.UserObject.GetMarketDataAccessHistorySnapshot obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("BackendInfo", obj, visibility);
		}
		public void SendBackendInfo(XComponent.UserManagement.UserObject.BackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("BackendInfo", obj, visibility);
		}
		public void SendGetBackendInfo(XComponent.UserManagement.UserObject.GetBackendInfo obj, Visibility visibility)
		{
			_xcPublisher.SendEvent("BackendInfo", obj, visibility);
		}
	
		public event System.Action<XComponent.UserManagement.UserObject.BackendInfo> BackendInfo;
		public void OnBackendInfoInstanceUpdated(MessageEventArgs busEvent) {
			if( BackendInfo != null ){ 
				var publicMember = busEvent.MessageReceived as XComponent.UserManagement.UserObject.BackendInfo;
				if( publicMember != null ) BackendInfo(publicMember);
			}
		}
	}
	public class XcAppMetricsPublisher_XcAppPublisherStateMachine : IXcAppMetricsPublisher_XcAppPublisherStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public XcAppMetricsPublisher_XcAppPublisherStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	}
	public class XcAppMetricsPublisher_SessionsStateMachine : IXcAppMetricsPublisher_SessionsStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public XcAppMetricsPublisher_SessionsStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	}
	public class XcAppMetricsPublisher_SqlServerStateMachine : IXcAppMetricsPublisher_SqlServerStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public XcAppMetricsPublisher_SqlServerStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	}
	public class XcAppMetricsPublisher_XcAppHeartBeatStateMachine : IXcAppMetricsPublisher_XcAppHeartBeatStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public XcAppMetricsPublisher_XcAppHeartBeatStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	}
	public class XcAppMetricsPublisher_OrdersCounterStateMachine : IXcAppMetricsPublisher_OrdersCounterStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public XcAppMetricsPublisher_OrdersCounterStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	}
	public class XcAppMetricsPublisher_TradesCounterStateMachine : IXcAppMetricsPublisher_TradesCounterStateMachine
	{
		private readonly IXCPublisher _xcPublisher;
		
		public XcAppMetricsPublisher_TradesCounterStateMachine(IXCPublisher publisher)
		{
			_xcPublisher = publisher;
		}
	}
}


