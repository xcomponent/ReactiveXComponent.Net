////------------------------------------------------------------------------------
//// <auto-generated>
////     This code was generated by XCTools.
////     Changes to this file may cause incorrect behavior and will be lost if
////     the code is regenerated.
//// </auto-generated>
////------------------------------------------------------------------------------
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using Akka.Actor;
using XComponent.Common.ApiContext;
using XComponent.Common.Timeouts;
using XComponent.Common.Processing;
using XComponent.Runtime.Processing;
using XComponent.Runtime.StateMachine;
using XComponent.Runtime.StateMachine.Actor.Messages;
using XComponent.Runtime.StateMachine.ExecutionResult;
using XComponent.Shared.Api;
using XComponent.Shared;
using XComponent.HelloWorld.TriggeredMethod;
using XComponent.HelloWorld.Common;
using XComponent.HelloWorld.Common.Senders;

namespace XComponent.HelloWorld.StateMachine
{
    public class ResponseListener : StateMachineBase<XComponent.HelloWorld.UserObject.ResponseListener, XComponent.HelloWorld.UserObject.ResponseListenerInternal, ResponseListener>
    {
        static ResponseListener()
        {
            ExecutionMap[0,11] = new StandardExecutionResult<XComponent.HelloWorld.UserObject.ResponseListener, XComponent.HelloWorld.UserObject.ResponseListenerInternal>(0, false, ExecuteOn_Up_From_Up_Through_Count);


            StateHashCodeCalculators[0] = new XComponent.HelloWorld.Common.StateHashCodeCalculator.ResponseListener.UpStateHashCodeCalculator();
        }

        public ResponseListener() : base((int)StdEnum.ResponseListener, ComponentHelper.COMPONENT_NAME, ComponentHelper.COMPONENT_CODE)
        {

        }

        protected override void InitialiseStateMachine(int triggeringEvent, int initialStateCode)
		{
			NextTriggeredMethodToExecute = GetInitNextTriggeredMethodToExecute(triggeringEvent, initialStateCode);
		}

        public override object ClonePublicMember()
        {
            return XCClone.Clone<XComponent.HelloWorld.UserObject.ResponseListener>(TypedPublicMember);
        }

		private TriggeredMethodToExecute<XComponent.HelloWorld.UserObject.ResponseListener, XComponent.HelloWorld.UserObject.ResponseListenerInternal> GetInitNextTriggeredMethodToExecute(int triggeringEvent, int initialStateCode)
		{
			switch(initialStateCode)
			{
				case 0 :
					switch(triggeringEvent)
					{
						case 10 :
							return ExecuteOn_Up_From_Listening_Through_CreateListener;
					}
			        break;
			}

			return null;
		}

		protected override string ConvertStateCodeToString(int stateCode)
        {
			switch(stateCode)
			{
				case 0 :
			        return "Up";
				case -2147483648 :
			        return "FatalError";
			}

            return string.Empty;
        }
        
        protected override string ConvertStateMachineCodeToString(int stateMachineCode)
        {
			switch(stateMachineCode)
			{
				case -69981087 :
			        return "HelloWorld";
				case -1152526010 :
			        return "ResponseListener";
				case -343862282 :
			        return "HelloWorldResponse";
			}

            return string.Empty;
        }

		public static void ExecuteOn_Up_From_Up_Through_Count(object receivedEvent, XComponent.HelloWorld.UserObject.ResponseListener publicMember, XComponent.HelloWorld.UserObject.ResponseListenerInternal internalMember, IStateMachine stateMachine)
        {
            var context = stateMachine.Context;
			ExecuteTriggeredMethod<XComponent.HelloWorld.UserObject.HelloWorldResponse>(receivedEvent, context, "ResponseListenerTriggeredMethod.ExecuteOn_Up_Through_Count",
				typedEvent => ResponseListenerTriggeredMethod.ExecuteOn_Up_Through_Count(typedEvent, publicMember, internalMember, context, SenderManager.CountHelloWorldResponseOnUpResponseListenerSender),
				triggeredMethodException => TriggeredMethodContext.Instance.UnHanledException(triggeredMethodException));
        }

		public static void ExecuteOn_Up_From_Listening_Through_CreateListener(object receivedEvent, XComponent.HelloWorld.UserObject.ResponseListener publicMember, XComponent.HelloWorld.UserObject.ResponseListenerInternal internalMember, IStateMachine stateMachine)
        {
            var context = stateMachine.Context;
			ExecuteTriggeredMethod<XComponent.HelloWorld.UserObject.CreateListener>(receivedEvent, context, "ResponseListenerTriggeredMethod.ExecuteOn_Up_Through_CreateListener",
				typedEvent => ResponseListenerTriggeredMethod.ExecuteOn_Up_Through_CreateListener(typedEvent, publicMember, internalMember, context, SenderManager.CreateListenerCreateListenerOnUpResponseListenerSender),
				triggeredMethodException => TriggeredMethodContext.Instance.UnHanledException(triggeredMethodException));
        }

    }
}
