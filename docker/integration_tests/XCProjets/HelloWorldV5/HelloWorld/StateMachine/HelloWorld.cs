////------------------------------------------------------------------------------
//// <auto-generated>
////     This code was generated by XCTools.
////     Changes to this file may cause incorrect behavior and will be lost if
////     the code is regenerated.
//// </auto-generated>
////------------------------------------------------------------------------------
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using Akka.Actor;
using XComponent.Common.ApiContext;
using XComponent.Common.Timeouts;
using XComponent.Common.Processing;
using XComponent.Runtime.Processing;
using XComponent.Runtime.StateMachine;
using XComponent.Runtime.StateMachine.Actor.Messages;
using XComponent.Runtime.StateMachine.ExecutionResult;
using XComponent.Shared.Api;
using XComponent.Shared;
using XComponent.HelloWorld.TriggeredMethod;
using XComponent.HelloWorld.Common;
using XComponent.HelloWorld.Common.Senders;

namespace XComponent.HelloWorld.StateMachine
{
    public class HelloWorld : StateMachineBase<object, object, HelloWorld>
    {
        static HelloWorld()
        {
            ExecutionMap[0,6] = new StandardExecutionResult<object, object>(1, false, ExecuteOn_Listening_From_EntryPoint_Through_Init);
            ExecutionMap[1,10] = new ForkExecutionResult<object, object>(GetInstanceCreationMessages_Event_CreateListener_From_Listening);
            ExecutionMap[1,20] = new ForkExecutionResult<object, object>(GetInstanceCreationMessages_Event_SayHello_From_Listening);


            StateHashCodeCalculators[0] = new XComponent.HelloWorld.Common.StateHashCodeCalculator.HelloWorld.EntryPointStateHashCodeCalculator();
            StateHashCodeCalculators[1] = new XComponent.HelloWorld.Common.StateHashCodeCalculator.HelloWorld.ListeningStateHashCodeCalculator();
        }

        public HelloWorld() : base((int)StdEnum.HelloWorld, ComponentHelper.COMPONENT_NAME, ComponentHelper.COMPONENT_CODE)
        {
            TimeoutMap[0] = HandleAutomaticOnEntryPoint;

        }

        protected override void InitialiseStateMachine(int triggeringEvent, int initialStateCode)
		{
            NextTriggeredMethodToExecute = ExecuteOn_EntryPoint;
		}

		protected override string ConvertStateCodeToString(int stateCode)
        {
			switch(stateCode)
			{
				case 0 :
			        return "EntryPoint";
				case 1 :
			        return "Listening";
				case -2147483648 :
			        return "FatalError";
			}

            return string.Empty;
        }
        
        protected override string ConvertStateMachineCodeToString(int stateMachineCode)
        {
			switch(stateMachineCode)
			{
				case -69981087 :
			        return "HelloWorld";
				case -1152526010 :
			        return "ResponseListener";
				case -343862282 :
			        return "HelloWorldResponse";
			}

            return string.Empty;
        }

		public static void ExecuteOn_EntryPoint(object receivedEvent, object publicMember, object internalMember, IStateMachine stateMachine)
        {
            var context = stateMachine.Context;
            var senderObject = SenderManager.EntryPointSender;

			ExecuteTriggeredMethod<XComponent.Common.Event.DefaultEvent>(receivedEvent, context, "HelloWorldTriggeredMethod.ExecuteOn_EntryPoint",
				typedEvent => HelloWorldTriggeredMethod.ExecuteOn_EntryPoint(publicMember, internalMember, context, senderObject),
				triggeredMethodException => TriggeredMethodContext.Instance.UnHanledException(triggeredMethodException));
        }

		public static void ExecuteOn_Listening_From_EntryPoint_Through_Init(object receivedEvent, object publicMember, object internalMember, IStateMachine stateMachine)
        {
            var context = stateMachine.Context;
			ExecuteTriggeredMethod<XComponent.Common.Event.DefaultEvent>(receivedEvent, context, "HelloWorldTriggeredMethod.ExecuteOn_Listening_Through_Init",
				typedEvent => HelloWorldTriggeredMethod.ExecuteOn_Listening_Through_Init(typedEvent, publicMember, internalMember, context, SenderManager.InitDefaultEventOnListeningHelloWorldSender),
				triggeredMethodException => TriggeredMethodContext.Instance.UnHanledException(triggeredMethodException));
        }

        public static IEnumerable<Task<CreateInstance>> GetInstanceCreationMessages_Event_CreateListener_From_Listening(IStateMachine parentStateMachine, IncomingEvent incomingEvent, bool isInitializePublicMemberSupported)
        {
            var publicMember = parentStateMachine.PublicMember as object;
            var internalMember = parentStateMachine.InternalMember as object;
            if (isInitializePublicMemberSupported)
			{
				
            var createInstanceMessages = new List<Task<CreateInstance>>();

			var createInstanceCreateListenerResponseListenerMessage = new CreateInstanceWithTypedUserObjects<XComponent.HelloWorld.UserObject.ResponseListener, XComponent.HelloWorld.UserObject.ResponseListenerInternal>(ComponentHelper.COMPONENT_CODE, "ResponseListener", (int)StdEnum.ResponseListener, 0, "Up", "Listening", 1, 10, parentStateMachine.StateMachineId, incomingEvent.Header == null ? null : incomingEvent.Header.PublishTopic, false, incomingEvent);
			var childPublicMemberResponseListener = createInstanceCreateListenerResponseListenerMessage.TypedPublicMember;
			var childInternalMemberResponseListener = createInstanceCreateListenerResponseListenerMessage.TypedInternalMember;
			createInstanceMessages.Add(Task.FromResult<CreateInstance>(createInstanceCreateListenerResponseListenerMessage));

				return createInstanceMessages;
			}
			else 
			{
				var createInstanceMessages = new List<Task<CreateInstance>>();

					var createInstanceCreateListenerResponseListenerMessage = new CreateInstance(ComponentHelper.COMPONENT_CODE, "ResponseListener", (int)StdEnum.ResponseListener, 0, "Up", "Listening", 1, 10, parentStateMachine.StateMachineId, incomingEvent.Header == null ? null : incomingEvent.Header.PublishTopic, false, incomingEvent);

				createInstanceMessages.Add(Task.FromResult<CreateInstance>(createInstanceCreateListenerResponseListenerMessage));

				return createInstanceMessages;
			}
				
		}

        public static IEnumerable<Task<CreateInstance>> GetInstanceCreationMessages_Event_SayHello_From_Listening(IStateMachine parentStateMachine, IncomingEvent incomingEvent, bool isInitializePublicMemberSupported)
        {
            var publicMember = parentStateMachine.PublicMember as object;
            var internalMember = parentStateMachine.InternalMember as object;
            if (isInitializePublicMemberSupported)
			{
				
            var createInstanceMessages = new List<Task<CreateInstance>>();

			var createInstanceSayHelloHelloWorldResponseMessage = new CreateInstanceWithTypedUserObjects<XComponent.HelloWorld.UserObject.HelloWorldResponse, object>(ComponentHelper.COMPONENT_CODE, "HelloWorldResponse", (int)StdEnum.HelloWorldResponse, 1, "Published", "Listening", 1, 20, parentStateMachine.StateMachineId, incomingEvent.Header == null ? null : incomingEvent.Header.PublishTopic, false, incomingEvent);
			var childPublicMemberHelloWorldResponse = createInstanceSayHelloHelloWorldResponseMessage.TypedPublicMember;
			var childInternalMemberHelloWorldResponse = createInstanceSayHelloHelloWorldResponseMessage.TypedInternalMember;
			createInstanceMessages.Add(Task.FromResult<CreateInstance>(createInstanceSayHelloHelloWorldResponseMessage));

				return createInstanceMessages;
			}
			else 
			{
				var createInstanceMessages = new List<Task<CreateInstance>>();

					var createInstanceSayHelloHelloWorldResponseMessage = new CreateInstance(ComponentHelper.COMPONENT_CODE, "HelloWorldResponse", (int)StdEnum.HelloWorldResponse, 1, "Published", "Listening", 1, 20, parentStateMachine.StateMachineId, incomingEvent.Header == null ? null : incomingEvent.Header.PublishTopic, false, incomingEvent);

				createInstanceMessages.Add(Task.FromResult<CreateInstance>(createInstanceSayHelloHelloWorldResponseMessage));

				return createInstanceMessages;
			}
				
		}

        protected void HandleAutomaticOnEntryPoint()
        {
			var automaticEvent = new IncomingEvent()
			{
				Message = new XComponent.Common.Event.DefaultEvent(),
				EventType = IncomingEventType.Transition,
				Header = new Header()
				{
					ComponentCode = ComponentHelper.COMPONENT_CODE,
					StateMachineCode = (int)StdEnum.HelloWorld,
					StateCode = 0,
					StateMachineId = StateMachineId,
					EventCode = 6,
					IncomingEventType = IncomingEventType.Transition,

				}
			};
            WorkerActor.Tell(automaticEvent);
        }

    }
}
